%% File generated by erl-openapi on "2022-03-03T14:35:46Z".

-module(stripe_schemas).

-export_type([error/0]).
-export_type([sku_inventory/0]).
-export_type([payment_method_details_card_present_receipt/0]).
-export_type([gelato_id_number_report_error/0]).
-export_type([source_code_verification_flow/0]).
-export_type([payment_pages_checkout_session_after_expiration_recovery/0]).
-export_type([customer_acceptance/0]).
-export_type([setup_intent_payment_method_options_sepa_debit/0]).
-export_type([dispute_evidence_details/0]).
-export_type([payment_links_resource_phone_number_collection/0]).
-export_type([payment_pages_checkout_session_shipping_option/0]).
-export_type([payment_method_card_wallet_masterpass/0]).
-export_type([source_type_ach_credit_transfer/0]).
-export_type([issuing_transaction_lodging_data/0]).
-export_type([checkout_acss_debit_mandate_options/0]).
-export_type([quotes_resource_status_transitions/0]).
-export_type([payment_method/0]).
-export_type([notification_event_request/0]).
-export_type([radar_value_list/0]).
-export_type([payment_method_details_wechat/0]).
-export_type([deleted_terminal_reader/0]).
-export_type([payment_method_details_bacs_debit/0]).
-export_type([customer_tax_location/0]).
-export_type([payment_intent_type_specific_payment_method_options_client/0]).
-export_type([payment_method_details_card_present/0]).
-export_type([payment_method_details_fpx/0]).
-export_type([payment_links_resource_transfer_data/0]).
-export_type([source_type_ach_debit/0]).
-export_type([quotes_resource_transfer_data/0]).
-export_type([issuing_authorization/0]).
-export_type([payment_pages_checkout_session_tax_id/0]).
-export_type([source_mandate_notification_bacs_debit_data/0]).
-export_type([portal_subscription_update/0]).
-export_type([deleted_card/0]).
-export_type([payment_intent_next_action_display_oxxo_details/0]).
-export_type([account_capabilities/0]).
-export_type([payment_flows_private_payment_methods_klarna_dob/0]).
-export_type([mandate_bacs_debit/0]).
-export_type([invoice_payment_method_options_bancontact/0]).
-export_type([invoice_tax_amount/0]).
-export_type([issuing_settlement/0]).
-export_type([payment_method_details_sofort/0]).
-export_type([issuing_card_authorization_controls/0]).
-export_type([invoices_payment_method_options/0]).
-export_type([source_transaction_chf_credit_transfer_data/0]).
-export_type([deleted_product/0]).
-export_type([credit_note_line_item/0]).
-export_type([payment_method_details_card_wallet_amex_express_checkout/0]).
-export_type([payment_method_options_wechat_pay/0]).
-export_type([gelato_verified_outputs/0]).
-export_type([invoices_resource_invoice_tax_id/0]).
-export_type([payment_method_details_p24/0]).
-export_type([person_future_requirements/0]).
-export_type([login_link/0]).
-export_type([source_mandate_notification_sepa_debit_data/0]).
-export_type([apple_pay_domain/0]).
-export_type([invoice_payment_method_options_acss_debit_mandate_options/0]).
-export_type([payment_method_eps/0]).
-export_type([transfer_reversal/0]).
-export_type([delivery_estimate/0]).
-export_type([account_capability_requirements/0]).
-export_type([legal_entity_person_verification_document/0]).
-export_type([issuing_card_wallets/0]).
-export_type([payment_method_card_wallet_visa_checkout/0]).
-export_type([payment_method_boleto/0]).
-export_type([gelato_verification_session_options/0]).
-export_type([payment_method_details_acss_debit/0]).
-export_type([issuing_authorization_request/0]).
-export_type([connect_collection_transfer/0]).
-export_type([payment_intent_payment_method_options_sepa_debit/0]).
-export_type([deleted_apple_pay_domain/0]).
-export_type([payment_method_bacs_debit/0]).
-export_type([setup_attempt/0]).
-export_type([payment_intent_next_action_boleto/0]).
-export_type([deleted_radar_value_list/0]).
-export_type([issuing_cardholder_individual_dob/0]).
-export_type([issuing_cardholder_company/0]).
-export_type([token/0]).
-export_type([order_item/0]).
-export_type([account_payments_settings/0]).
-export_type([payment_method_sofort/0]).
-export_type([payment_link/0]).
-export_type([deleted_terminal_location/0]).
-export_type([subscription_schedules_resource_default_settings/0]).
-export_type([payment_pages_checkout_session_total_details/0]).
-export_type([topup/0]).
-export_type([card/0]).
-export_type([alipay_account/0]).
-export_type([account_decline_charge_on/0]).
-export_type([coupon/0]).
-export_type([payment_intent_card_processing/0]).
-export_type([payment_method_options_grabpay/0]).
-export_type([dispute_evidence/0]).
-export_type([gelato_data_id_number_report_date/0]).
-export_type([terminal_reader/0]).
-export_type([payment_links_resource_subscription_data/0]).
-export_type([line_items_discount_amount/0]).
-export_type([gelato_report_id_number_options/0]).
-export_type([setup_attempt_payment_method_details/0]).
-export_type([issuing_dispute_fraudulent_evidence/0]).
-export_type([invoice_setting_subscription_schedule_setting/0]).
-export_type([subscription_item/0]).
-export_type([line_items_tax_amount/0]).
-export_type([source_type_eps/0]).
-export_type([terminal_connection_token/0]).
-export_type([payment_intent_payment_method_options_card/0]).
-export_type([portal_customer_update/0]).
-export_type([setup_attempt_payment_method_details_sepa_debit/0]).
-export_type([quotes_resource_subscription_data/0]).
-export_type([application_fee/0]).
-export_type([deleted_tax_id/0]).
-export_type([radar_review_resource_session/0]).
-export_type([file/0]).
-export_type([payment_intent_next_action_verify_with_microdeposits/0]).
-export_type([payment_method_details_card_wallet_masterpass/0]).
-export_type([issuer_fraud_record/0]).
-export_type([recipient/0]).
-export_type([payment_method_details_boleto/0]).
-export_type([payment_method_details_card_wallet_apple_pay/0]).
-export_type([invoices_status_transitions/0]).
-export_type([source_transaction/0]).
-export_type([payment_pages_checkout_session_total_details_resource_breakdown/0]).
-export_type([review/0]).
-export_type([balance/0]).
-export_type([bitcoin_transaction/0]).
-export_type([subscription_schedule_phase_configuration/0]).
-export_type([mandate_multi_use/0]).
-export_type([card_issuing_account_terms_of_service/0]).
-export_type([deleted_payment_source/0]).
-export_type([issuing_authorization_amount_details/0]).
-export_type([payment_method_bancontact/0]).
-export_type([gelato_data_verified_outputs_date/0]).
-export_type([setup_attempt_payment_method_details_card/0]).
-export_type([invoices_payment_settings/0]).
-export_type([issuing_dispute_merchandise_not_as_described_evidence/0]).
-export_type([payment_intent/0]).
-export_type([setup_attempt_payment_method_details_acss_debit/0]).
-export_type([capability/0]).
-export_type([subscription_schedule/0]).
-export_type([schedules_phase_automatic_tax/0]).
-export_type([discount/0]).
-export_type([account_card_payments_settings/0]).
-export_type([deleted_plan/0]).
-export_type([gelato_data_document_report_issued_date/0]).
-export_type([invoice_mandate_options_card/0]).
-export_type([setup_attempt_payment_method_details_ideal/0]).
-export_type([issuing_card_spending_limit/0]).
-export_type([portal_subscription_cancel/0]).
-export_type([portal_subscription_update_product/0]).
-export_type([payment_method_details_ach_debit/0]).
-export_type([shipping_method/0]).
-export_type([payment_method_details_ach_credit_transfer/0]).
-export_type([customer_tax/0]).
-export_type([portal_subscription_cancellation_reason/0]).
-export_type([payment_method_options_boleto/0]).
-export_type([platform_tax_fee/0]).
-export_type([payment_pages_checkout_session_tax_id_collection/0]).
-export_type([invoice_payment_method_options_card/0]).
-export_type([setup_attempt_payment_method_details_sofort/0]).
-export_type([payment_intent_payment_method_options_mandate_options_sepa_debit/0]).
-export_type([payment_intent_payment_method_options_au_becs_debit/0]).
-export_type([invoice_transfer_data/0]).
-export_type([subscription_pending_invoice_item_interval/0]).
-export_type([issuing_card_apple_pay/0]).
-export_type([charge/0]).
-export_type([issuing_cardholder_id_document/0]).
-export_type([person_relationship/0]).
-export_type([source_type_three_d_secure/0]).
-export_type([payment_pages_checkout_session_phone_number_collection/0]).
-export_type([payment_method_card/0]).
-export_type([setup_intent_payment_method_options/0]).
-export_type([source_type_ideal/0]).
-export_type([payment_source/0]).
-export_type([item/0]).
-export_type([subscriptions_resource_pause_collection/0]).
-export_type([tax_id_verification/0]).
-export_type([gelato_document_report_error/0]).
-export_type([customer/0]).
-export_type([deleted_bitcoin_receiver/0]).
-export_type([issuing_dispute_canceled_evidence/0]).
-export_type([tax_deducted_at_source/0]).
-export_type([issuing_cardholder_address/0]).
-export_type([issuing_cardholder_requirements/0]).
-export_type([payment_intent_payment_method_options_acss_debit/0]).
-export_type([payment_method_card_present/0]).
-export_type([setup_attempt_payment_method_details_boleto/0]).
-export_type([reporting_report_type/0]).
-export_type([external_account/0]).
-export_type([quotes_resource_total_details_resource_breakdown/0]).
-export_type([invoice_line_item_period/0]).
-export_type([source_mandate_notification/0]).
-export_type([deleted_customer/0]).
-export_type([gelato_document_report/0]).
-export_type([payment_method_options_fpx/0]).
-export_type([checkout_session_payment_method_options/0]).
-export_type([payment_intent_next_action_wechat_pay_display_qr_code/0]).
-export_type([payment_method_card_wallet_samsung_pay/0]).
-export_type([offline_acceptance/0]).
-export_type([plan_tier/0]).
-export_type([webhook_endpoint/0]).
-export_type([price/0]).
-export_type([payment_flows_automatic_payment_methods_payment_intent/0]).
-export_type([bank_account/0]).
-export_type([invoice/0]).
-export_type([card_mandate_payment_method_details/0]).
-export_type([payment_method_sepa_debit/0]).
-export_type([payment_intent_processing/0]).
-export_type([issuing_authorization_verification_data/0]).
-export_type([payment_method_options_card_present/0]).
-export_type([subscription_payment_method_options_card/0]).
-export_type([charge_transfer_data/0]).
-export_type([invoice_setting_custom_field/0]).
-export_type([payment_method_details/0]).
-export_type([package_dimensions/0]).
-export_type([issuing_card/0]).
-export_type([deleted_webhook_endpoint/0]).
-export_type([recurring/0]).
-export_type([account_dashboard_settings/0]).
-export_type([promotion_codes_resource_restrictions/0]).
-export_type([issuing_authorization_pending_request/0]).
-export_type([setup_intent_payment_method_options_mandate_options_sepa_debit/0]).
-export_type([mandate_sepa_debit/0]).
-export_type([invoice_threshold_reason/0]).
-export_type([payment_method_details_interac_present/0]).
-export_type([refund/0]).
-export_type([transform_usage/0]).
-export_type([setup_attempt_payment_method_details_card_present/0]).
-export_type([price_tier/0]).
-export_type([checkout_boleto_payment_method_options/0]).
-export_type([balance_transaction/0]).
-export_type([account_link/0]).
-export_type([payment_flows_private_payment_methods_alipay/0]).
-export_type([quotes_resource_computed/0]).
-export_type([payment_method_details_card_wallet_visa_checkout/0]).
-export_type([payment_intent_payment_method_options_eps/0]).
-export_type([promotion_code/0]).
-export_type([identity_verification_session/0]).
-export_type([payment_method_card_wallet/0]).
-export_type([application/0]).
-export_type([terminal_location/0]).
-export_type([setup_intent_payment_method_options_acss_debit/0]).
-export_type([payment_method_options_interac_present/0]).
-export_type([payment_method_giropay/0]).
-export_type([payment_pages_checkout_session_after_expiration/0]).
-export_type([account/0]).
-export_type([payment_method_card_checks/0]).
-export_type([payment_method_options_bacs_debit/0]).
-export_type([account_requirements/0]).
-export_type([issuing_transaction_amount_details/0]).
-export_type([issuing_transaction_purchase_details/0]).
-export_type([payment_method_acss_debit/0]).
-export_type([deleted_subscription_item/0]).
-export_type([product/0]).
-export_type([deleted_bank_account/0]).
-export_type([legal_entity_company/0]).
-export_type([sigma_scheduled_query_run_error/0]).
-export_type([account_future_requirements/0]).
-export_type([issuing_dispute_not_received_evidence/0]).
-export_type([issuing_dispute_service_not_as_described_evidence/0]).
-export_type([card_generated_from_payment_method_details/0]).
-export_type([issuing_transaction_fuel_data/0]).
-export_type([payment_pages_checkout_session_automatic_tax/0]).
-export_type([shipping_rate_delivery_estimate/0]).
-export_type([payment_method_details_eps/0]).
-export_type([charge_fraud_details/0]).
-export_type([setup_intent_next_action/0]).
-export_type([legal_entity_japan_address/0]).
-export_type([deleted_external_account/0]).
-export_type([reserve_transaction/0]).
-export_type([payment_intent_next_action_redirect_to_url/0]).
-export_type([invoiceitem/0]).
-export_type([setup_intent_next_action_verify_with_microdeposits/0]).
-export_type([radar_review_resource_location/0]).
-export_type([legal_entity_company_verification/0]).
-export_type([payment_method_card_generated_card/0]).
-export_type([identity_verification_report/0]).
-export_type([reporting_report_run/0]).
-export_type([sepa_debit_generated_from/0]).
-export_type([account_bacs_debit_payments_settings/0]).
-export_type([payment_intent_next_action_alipay_handle_redirect/0]).
-export_type([financial_reporting_finance_report_run_run_parameters/0]).
-export_type([payment_links_resource_completion_behavior_confirmation_page/0]).
-export_type([subscription_schedule_add_invoice_item/0]).
-export_type([three_d_secure_usage/0]).
-export_type([source_type_sepa_debit/0]).
-export_type([payment_method_details_card_wallet_samsung_pay/0]).
-export_type([gelato_verification_report_options/0]).
-export_type([subscriptions_resource_payment_settings/0]).
-export_type([customer_balance_transaction/0]).
-export_type([rule/0]).
-export_type([payment_method_details_card/0]).
-export_type([issuing_card_google_pay/0]).
-export_type([payment_intent_payment_method_options_mandate_options_acss_debit/0]).
-export_type([mandate_single_use/0]).
-export_type([payment_method_options_giropay/0]).
-export_type([coupon_applies_to/0]).
-export_type([invoice_payment_method_options_acss_debit/0]).
-export_type([deleted_alipay_account/0]).
-export_type([issuing_cardholder_spending_limit/0]).
-export_type([bitcoin_receiver/0]).
-export_type([issuing_cardholder_individual/0]).
-export_type([status_transitions/0]).
-export_type([payment_intent_next_action/0]).
-export_type([payment_method_options_card_installments/0]).
-export_type([setup_intent_payment_method_options_mandate_options_acss_debit/0]).
-export_type([order/0]).
-export_type([billing_details/0]).
-export_type([payment_method_details_sepa_debit/0]).
-export_type([source_type_bancontact/0]).
-export_type([deleted_price/0]).
-export_type([source_type_au_becs_debit/0]).
-export_type([source_receiver_flow/0]).
-export_type([quotes_resource_automatic_tax/0]).
-export_type([payment_method_options_sofort/0]).
-export_type([gelato_data_document_report_expiration_date/0]).
-export_type([account_business_profile/0]).
-export_type([exchange_rate/0]).
-export_type([payment_method_wechat_pay/0]).
-export_type([payment_intent_payment_method_options/0]).
-export_type([invoice_item_threshold_reason/0]).
-export_type([source_redirect_flow/0]).
-export_type([setup_intent_next_action_redirect_to_url/0]).
-export_type([automatic_tax/0]).
-export_type([source/0]).
-export_type([payment_links_resource_completion_behavior_redirect/0]).
-export_type([setup_intent/0]).
-export_type([issuing_dispute/0]).
-export_type([payment_method_fpx/0]).
-export_type([subscription_schedule_configuration_item/0]).
-export_type([gelato_session_id_number_options/0]).
-export_type([payment_method_options_p24/0]).
-export_type([mandate_acss_debit/0]).
-export_type([file_link/0]).
-export_type([legal_entity_ubo_declaration/0]).
-export_type([payment_method_klarna/0]).
-export_type([ephemeral_key/0]).
-export_type([fee_refund/0]).
-export_type([billing_portal_configuration/0]).
-export_type([source_transaction_ach_credit_transfer_data/0]).
-export_type([deleted_sku/0]).
-export_type([payment_method_details_grabpay/0]).
-export_type([payment_method_details_au_becs_debit/0]).
-export_type([event/0]).
-export_type([payment_method_interac_present/0]).
-export_type([deleted_discount/0]).
-export_type([source_transaction_sepa_credit_transfer_data/0]).
-export_type([issuing_cardholder/0]).
-export_type([issuing_transaction_flight_data_leg/0]).
-export_type([gelato_report_document_options/0]).
-export_type([payment_method_card_wallet_amex_express_checkout/0]).
-export_type([account_sepa_debit_payments_settings/0]).
-export_type([portal_invoice_list/0]).
-export_type([account_payout_settings/0]).
-export_type([sku/0]).
-export_type([checkout_session/0]).
-export_type([scheduled_query_run/0]).
-export_type([credit_note_tax_amount/0]).
-export_type([account_card_issuing_settings/0]).
-export_type([deleted_person/0]).
-export_type([payment_method_details_oxxo/0]).
-export_type([payment_method_details_giropay/0]).
-export_type([payment_method_p24/0]).
-export_type([payment_method_grabpay/0]).
-export_type([source_type_alipay/0]).
-export_type([networks/0]).
-export_type([source_order_item/0]).
-export_type([source_type_card_present/0]).
-export_type([transfer/0]).
-export_type([mandate_payment_method_details/0]).
-export_type([quote/0]).
-export_type([payment_method_details_card_checks/0]).
-export_type([subscription_schedules_resource_default_settings_automatic_tax/0]).
-export_type([gelato_selfie_report_error/0]).
-export_type([payment_intent_next_action_wechat_pay_redirect_to_ios_app/0]).
-export_type([charge_outcome/0]).
-export_type([radar_early_fraud_warning/0]).
-export_type([portal_payment_method_update/0]).
-export_type([payment_method_ideal/0]).
-export_type([source_type_wechat/0]).
-export_type([account_settings/0]).
-export_type([tax_rate/0]).
-export_type([verification_session_redaction/0]).
-export_type([issuing_cardholder_authorization_controls/0]).
-export_type([payment_links_resource_automatic_tax/0]).
-export_type([dispute/0]).
-export_type([payment_method_details_bancontact/0]).
-export_type([payment_method_card_wallet_apple_pay/0]).
-export_type([legal_entity_dob/0]).
-export_type([source_owner/0]).
-export_type([balance_amount/0]).
-export_type([payment_method_details_ideal/0]).
-export_type([deleted_invoiceitem/0]).
-export_type([shipping_rate_fixed_amount/0]).
-export_type([account_branding_settings/0]).
-export_type([payment_method_details_card_installments/0]).
-export_type([tax_code/0]).
-export_type([payment_method_details_stripe_account/0]).
-export_type([quotes_resource_recurring/0]).
-export_type([subscriptions_resource_pending_update/0]).
-export_type([subscription/0]).
-export_type([shipping_rate/0]).
-export_type([invoice_setting_customer_setting/0]).
-export_type([transfer_schedule/0]).
-export_type([payment_method_options_alipay/0]).
-export_type([issuing_dispute_evidence/0]).
-export_type([source_type_multibanco/0]).
-export_type([portal_subscription_pause/0]).
-export_type([deleted_coupon/0]).
-export_type([payment_links_resource_after_completion/0]).
-export_type([deleted_radar_value_list_item/0]).
-export_type([source_type_sofort/0]).
-export_type([payment_method_options_afterpay_clearpay/0]).
-export_type([issuing_cardholder_verification/0]).
-export_type([setup_attempt_payment_method_details_au_becs_debit/0]).
-export_type([portal_features/0]).
-export_type([order_return/0]).
-export_type([three_d_secure_details/0]).
-export_type([deleted_account/0]).
-export_type([payment_pages_checkout_session_customer_details/0]).
-export_type([invoice_setting_quote_setting/0]).
-export_type([country_spec_verification_field_details/0]).
-export_type([subscriptions_resource_payment_method_options/0]).
-export_type([deleted_invoice/0]).
-export_type([source_type_acss_debit/0]).
-export_type([transform_quantity/0]).
-export_type([api_errors/0]).
-export_type([gelato_data_document_report_date_of_birth/0]).
-export_type([legal_entity_company_verification_document/0]).
-export_type([payment_method_oxxo/0]).
-export_type([setup_intent_payment_method_options_card/0]).
-export_type([shipping_rate_delivery_estimate_bound/0]).
-export_type([account_tos_acceptance/0]).
-export_type([subscription_automatic_tax/0]).
-export_type([period/0]).
-export_type([payment_pages_checkout_session_consent_collection/0]).
-export_type([mandate/0]).
-export_type([quotes_resource_total_details/0]).
-export_type([radar_value_list_item/0]).
-export_type([payment_links_resource_shipping_address_collection/0]).
-export_type([payment_method_au_becs_debit/0]).
-export_type([subscription_transfer_data/0]).
-export_type([payment_method_details_card_wallet_google_pay/0]).
-export_type([source_transaction_gbp_credit_transfer_data/0]).
-export_type([quotes_resource_from_quote/0]).
-export_type([quotes_resource_upfront/0]).
-export_type([issuing_transaction_receipt_data/0]).
-export_type([gelato_selfie_report/0]).
-export_type([payment_method_details_klarna/0]).
-export_type([payment_method_options_bancontact/0]).
-export_type([discounts_resource_discount_amount/0]).
-export_type([payment_method_details_card_wallet/0]).
-export_type([account_requirements_error/0]).
-export_type([payout/0]).
-export_type([gelato_session_last_error/0]).
-export_type([payment_method_details_interac_present_receipt/0]).
-export_type([account_unification_account_controller/0]).
-export_type([three_d_secure/0]).
-export_type([account_requirements_alternative/0]).
-export_type([subscription_schedule_current_phase/0]).
-export_type([address/0]).
-export_type([source_type_p24/0]).
-export_type([issuing_transaction_flight_data/0]).
-export_type([checkout_oxxo_payment_method_options/0]).
-export_type([checkout_acss_debit_payment_method_options/0]).
-export_type([source_mandate_notification_acss_debit_data/0]).
-export_type([setup_attempt_payment_method_details_bancontact/0]).
-export_type([country_spec_verification_fields/0]).
-export_type([issuing_dispute_duplicate_evidence/0]).
-export_type([credit_note/0]).
-export_type([issuing_card_shipping/0]).
-export_type([line_item/0]).
-export_type([account_capability_future_requirements/0]).
-export_type([payment_intent_next_action_wechat_pay_redirect_to_android_app/0]).
-export_type([person_requirements/0]).
-export_type([issuing_authorization_merchant_data/0]).
-export_type([issuing_transaction/0]).
-export_type([deleted_recipient/0]).
-export_type([source_transaction_paper_check_data/0]).
-export_type([legal_entity_person_verification/0]).
-export_type([usage_record/0]).
-export_type([source_type_klarna/0]).
-export_type([payment_method_card_wallet_google_pay/0]).
-export_type([tax_id/0]).
-export_type([usage_record_summary/0]).
-export_type([balance_detail/0]).
-export_type([transfer_data/0]).
-export_type([balance_amount_by_source_type/0]).
-export_type([payment_method_afterpay_clearpay/0]).
-export_type([source_order/0]).
-export_type([payment_method_details_wechat_pay/0]).
-export_type([payment_flows_private_payment_methods_alipay_details/0]).
-export_type([fee/0]).
-export_type([issuing_dispute_other_evidence/0]).
-export_type([country_spec/0]).
-export_type([source_type_card/0]).
-export_type([shipping/0]).
-export_type([payment_method_details_afterpay_clearpay/0]).
-export_type([notification_event_data/0]).
-export_type([person/0]).
-export_type([billing_portal_session/0]).
-export_type([payment_method_details_card_installments_plan/0]).
-export_type([mandate_au_becs_debit/0]).
-export_type([payment_pages_checkout_session_consent/0]).
-export_type([setup_attempt_payment_method_details_bacs_debit/0]).
-export_type([online_acceptance/0]).
-export_type([gelato_id_number_report/0]).
-export_type([payment_method_options_ideal/0]).
-export_type([subscription_billing_thresholds/0]).
-export_type([payment_pages_checkout_session_shipping_address_collection/0]).
-export_type([payment_method_options_oxxo/0]).
-export_type([portal_business_profile/0]).
-export_type([payment_method_details_multibanco/0]).
-export_type([subscription_item_billing_thresholds/0]).
-export_type([payment_method_options_klarna/0]).
-export_type([source_type_giropay/0]).
-export_type([gelato_session_document_options/0]).
-export_type([plan/0]).

%% error
%%
%% An error response from the Stripe API
-type error() :: #{error := api_errors()}.
%% sku_inventory
-type sku_inventory() ::
    #{value => binary() | null,
      type := binary(),
      quantity => integer() | null}.
%% payment_method_details_card_present_receipt
-type payment_method_details_card_present_receipt() ::
    #{transaction_status_information => binary() | null,
      terminal_verification_results => binary() | null,
      dedicated_file_name => binary() | null,
      cardholder_verification_method => binary() | null,
      authorization_response_code => binary() | null,
      authorization_code => binary() | null,
      application_preferred_name => binary() | null,
      application_cryptogram => binary() | null,
      account_type => checking | credit | prepaid | unknown}.
%% gelato_id_number_report_error
-type gelato_id_number_report_error() ::
    #{reason => binary() | null,
      code =>
          id_number_insufficient_document_data |
          id_number_mismatch |
          id_number_unverified_other |
          null}.
%% source_code_verification_flow
-type source_code_verification_flow() ::
    #{status := binary(), attempts_remaining := integer()}.
%% payment_pages_checkout_session_after_expiration_recovery
-type payment_pages_checkout_session_after_expiration_recovery() ::
    #{url => binary() | null,
      expires_at => integer() | null,
      enabled := boolean(),
      allow_promotion_codes := boolean()}.
%% customer_acceptance
-type customer_acceptance() ::
    #{type := offline | online,
      online => online_acceptance(),
      offline => offline_acceptance(),
      accepted_at => integer() | null}.
%% setup_intent_payment_method_options_sepa_debit
-type setup_intent_payment_method_options_sepa_debit() ::
    #{mandate_options => setup_intent_payment_method_options_mandate_options_sepa_debit()}.
%% dispute_evidence_details
-type dispute_evidence_details() ::
    #{submission_count := integer(),
      past_due := boolean(),
      has_evidence := boolean(),
      due_by => integer() | null}.
%% payment_links_resource_phone_number_collection
-type payment_links_resource_phone_number_collection() :: #{enabled := boolean()}.
%% payment_pages_checkout_session_shipping_option
-type payment_pages_checkout_session_shipping_option() ::
    #{shipping_rate := binary() | shipping_rate(), shipping_amount := integer()}.
%% payment_method_card_wallet_masterpass
-type payment_method_card_wallet_masterpass() ::
    #{shipping_address => address(),
      name => binary() | null,
      email => binary() | null,
      billing_address => address()}.
%% source_type_ach_credit_transfer
-type source_type_ach_credit_transfer() ::
    #{swift_code => binary() | null,
      routing_number => binary() | null,
      refund_routing_number => binary() | null,
      refund_account_holder_type => binary() | null,
      refund_account_holder_name => binary() | null,
      fingerprint => binary() | null,
      bank_name => binary() | null,
      account_number => binary() | null}.
%% issuing_transaction_lodging_data
-type issuing_transaction_lodging_data() ::
    #{nights => integer() | null, check_in_at => integer() | null}.
%% checkout_acss_debit_mandate_options
-type checkout_acss_debit_mandate_options() ::
    #{transaction_type => business | personal | null,
      payment_schedule => combined | interval | sporadic | null,
      interval_description => binary() | null,
      default_for => [invoice | subscription],
      custom_mandate_url => binary()}.
%% quotes_resource_status_transitions
-type quotes_resource_status_transitions() ::
    #{finalized_at => integer() | null,
      canceled_at => integer() | null,
      accepted_at => integer() | null}.
%% payment_method
%%
%% PaymentMethod objects represent your customer's payment
%% instruments. They can be used with
%% [PaymentIntents](https://stripe.com/docs/payments/payment-intents)
%% to collect payments or saved to Customer objects to store
%% instrument details for future payments.
%%
%% Related guides: [Payment
%% Methods](https://stripe.com/docs/payments/payment-methods) and
%% [More Payment
%% Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
-type payment_method() ::
    #{wechat_pay => payment_method_wechat_pay(),
      type :=
          acss_debit |
          afterpay_clearpay |
          alipay |
          au_becs_debit |
          bacs_debit |
          bancontact |
          boleto |
          card |
          card_present |
          eps |
          fpx |
          giropay |
          grabpay |
          ideal |
          interac_present |
          klarna |
          oxxo |
          p24 |
          sepa_debit |
          sofort |
          wechat_pay,
      sofort => payment_method_sofort(),
      sepa_debit => payment_method_sepa_debit(),
      p24 => payment_method_p24(),
      oxxo => payment_method_oxxo(),
      object := payment_method,
      metadata => json:value() | null,
      livemode := boolean(),
      klarna => payment_method_klarna(),
      interac_present => payment_method_interac_present(),
      ideal => payment_method_ideal(),
      id := binary(),
      grabpay => payment_method_grabpay(),
      giropay => payment_method_giropay(),
      fpx => payment_method_fpx(),
      eps => payment_method_eps(),
      customer => binary() | customer(),
      created := integer(),
      card_present => payment_method_card_present(),
      card => payment_method_card(),
      boleto => payment_method_boleto(),
      billing_details := billing_details(),
      bancontact => payment_method_bancontact(),
      bacs_debit => payment_method_bacs_debit(),
      au_becs_debit => payment_method_au_becs_debit(),
      alipay => payment_flows_private_payment_methods_alipay(),
      afterpay_clearpay => payment_method_afterpay_clearpay(),
      acss_debit => payment_method_acss_debit()}.
%% notification_event_request
-type notification_event_request() ::
    #{idempotency_key => binary() | null, id => binary() | null}.
%% radar.value_list
%%
%% Value lists allow you to group values together which can then be
%% referenced in rules.
%%
%% Related guide: [Default Stripe
%% Lists](https://stripe.com/docs/radar/lists#managing-list-items).
-type radar_value_list() ::
    #{object := 'radar.value_list',
      name := binary(),
      metadata := json:value(),
      livemode := boolean(),
      list_items :=
          #{url := binary(),
            object := list,
            has_more := boolean(),
            data := [radar_value_list_item()]},
      item_type :=
          card_bin |
          card_fingerprint |
          case_sensitive_string |
          country |
          customer_id |
          email |
          ip_address |
          string,
      id := binary(),
      created_by := binary(),
      created := integer(),
      alias := binary()}.
%% payment_method_details_wechat
-type payment_method_details_wechat() :: #{}.
%% deleted_terminal.reader
-type deleted_terminal_reader() ::
    #{object := 'terminal.reader',
      id := binary(),
      deleted := boolean()}.
%% payment_method_details_bacs_debit
-type payment_method_details_bacs_debit() ::
    #{sort_code => binary() | null,
      mandate => binary() | null,
      last4 => binary() | null,
      fingerprint => binary() | null}.
%% customer_tax_location
-type customer_tax_location() ::
    #{state => binary() | null,
      source := billing_address | ip_address | payment_method | shipping_destination,
      country := binary()}.
%% payment_intent_type_specific_payment_method_options_client
-type payment_intent_type_specific_payment_method_options_client() ::
    #{setup_future_usage => none | off_session | on_session}.
%% payment_method_details_card_present
-type payment_method_details_card_present() ::
    #{receipt => payment_method_details_card_present_receipt(),
      read_method =>
          contact_emv |
          contactless_emv |
          contactless_magstripe_mode |
          magnetic_stripe_fallback |
          magnetic_stripe_track2 |
          null,
      overcapture_supported => boolean() | null,
      network => binary() | null,
      last4 => binary() | null,
      generated_card => binary() | null,
      funding => binary() | null,
      fingerprint => binary() | null,
      exp_year := integer(),
      exp_month := integer(),
      emv_auth_data => binary() | null,
      country => binary() | null,
      cardholder_name => binary() | null,
      brand => binary() | null,
      amount_authorized => integer() | null}.
%% payment_method_details_fpx
-type payment_method_details_fpx() ::
    #{transaction_id => binary() | null,
      bank :=
          affin_bank |
          agrobank |
          alliance_bank |
          ambank |
          bank_islam |
          bank_muamalat |
          bank_rakyat |
          bsn |
          cimb |
          deutsche_bank |
          hong_leong_bank |
          hsbc |
          kfh |
          maybank2e |
          maybank2u |
          ocbc |
          pb_enterprise |
          public_bank |
          rhb |
          standard_chartered |
          uob}.
%% payment_links_resource_transfer_data
-type payment_links_resource_transfer_data() ::
    #{destination := binary() | account(), amount => integer() | null}.
%% source_type_ach_debit
-type source_type_ach_debit() ::
    #{type => binary() | null,
      routing_number => binary() | null,
      last4 => binary() | null,
      fingerprint => binary() | null,
      country => binary() | null,
      bank_name => binary() | null}.
%% quotes_resource_transfer_data
-type quotes_resource_transfer_data() ::
    #{destination := binary() | account(),
      amount_percent => number() | null,
      amount => integer() | null}.
%% issuing.authorization
%%
%% When an [issued card](https://stripe.com/docs/issuing) is used to
%% make a purchase, an Issuing `Authorization` object is created.
%% [Authorizations](https://stripe.com/docs/issuing/purchases/authorizations)
%% must be approved for the purchase to be completed successfully.
%%
%% Related guide: [Issued Card
%% Authorizations](https://stripe.com/docs/issuing/purchases/authorizations).
-type issuing_authorization() ::
    #{wallet => binary() | null,
      verification_data := issuing_authorization_verification_data(),
      transactions := [issuing_transaction()],
      status := closed | pending | reversed,
      request_history := [issuing_authorization_request()],
      pending_request => issuing_authorization_pending_request(),
      object := 'issuing.authorization',
      metadata := json:value(),
      merchant_data := issuing_authorization_merchant_data(),
      merchant_currency := binary(),
      merchant_amount := integer(),
      livemode := boolean(),
      id := binary(),
      currency := binary(),
      created := integer(),
      cardholder => binary() | issuing_cardholder(),
      card := issuing_card(),
      balance_transactions := [balance_transaction()],
      authorization_method := chip | contactless | keyed_in | online | swipe,
      approved := boolean(),
      amount_details => issuing_authorization_amount_details(),
      amount := integer()}.
%% payment_pages_checkout_session_tax_id
-type payment_pages_checkout_session_tax_id() ::
    #{value => binary() | null,
      type :=
          ae_trn | au_abn | au_arn | br_cnpj | br_cpf | ca_bn | ca_gst_hst | ca_pst_bc | ca_pst_mb |
          ca_pst_sk | ca_qst | ch_vat | cl_tin | es_cif | eu_vat | gb_vat | ge_vat | hk_br |
          id_npwp | il_vat | in_gst | is_vat | jp_cn | jp_rn | kr_brn | li_uid | mx_rfc | my_frp |
          my_itn | my_sst | no_vat | nz_gst | ru_inn | ru_kpp | sa_vat | sg_gst | sg_uen | th_vat |
          tw_vat | ua_vat | unknown | us_ein | za_vat}.
%% source_mandate_notification_bacs_debit_data
-type source_mandate_notification_bacs_debit_data() :: #{last4 => binary()}.
%% portal_subscription_update
-type portal_subscription_update() ::
    #{proration_behavior := always_invoice | create_prorations | none,
      products => [portal_subscription_update_product()] | null,
      enabled := boolean(),
      default_allowed_updates := [price | promotion_code | quantity]}.
%% deleted_card
-type deleted_card() ::
    #{object := card,
      id := binary(),
      deleted := boolean(),
      currency => binary() | null}.
%% payment_intent_next_action_display_oxxo_details
-type payment_intent_next_action_display_oxxo_details() ::
    #{number => binary() | null,
      hosted_voucher_url => binary() | null,
      expires_after => integer() | null}.
%% account_capabilities
-type account_capabilities() ::
    #{transfers => active | inactive | pending,
      tax_reporting_us_1099_misc => active | inactive | pending,
      tax_reporting_us_1099_k => active | inactive | pending,
      sofort_payments => active | inactive | pending,
      sepa_debit_payments => active | inactive | pending,
      p24_payments => active | inactive | pending,
      oxxo_payments => active | inactive | pending,
      legacy_payments => active | inactive | pending,
      klarna_payments => active | inactive | pending,
      jcb_payments => active | inactive | pending,
      ideal_payments => active | inactive | pending,
      grabpay_payments => active | inactive | pending,
      giropay_payments => active | inactive | pending,
      fpx_payments => active | inactive | pending,
      eps_payments => active | inactive | pending,
      cartes_bancaires_payments => active | inactive | pending,
      card_payments => active | inactive | pending,
      card_issuing => active | inactive | pending,
      boleto_payments => active | inactive | pending,
      bancontact_payments => active | inactive | pending,
      bacs_debit_payments => active | inactive | pending,
      au_becs_debit_payments => active | inactive | pending,
      afterpay_clearpay_payments => active | inactive | pending,
      acss_debit_payments => active | inactive | pending}.
%% payment_flows_private_payment_methods_klarna_dob
-type payment_flows_private_payment_methods_klarna_dob() ::
    #{year => integer() | null,
      month => integer() | null,
      day => integer() | null}.
%% mandate_bacs_debit
-type mandate_bacs_debit() ::
    #{url := binary(),
      reference := binary(),
      network_status := accepted | pending | refused | revoked}.
%% invoice_payment_method_options_bancontact
-type invoice_payment_method_options_bancontact() ::
    #{preferred_language := de | en | fr | nl}.
%% invoice_tax_amount
-type invoice_tax_amount() ::
    #{tax_rate := binary() | tax_rate(),
      inclusive := boolean(),
      amount := integer()}.
%% issuing.settlement
%%
%% When a non-stripe BIN is used, any use of an [issued
%% card](https://stripe.com/docs/issuing) must be settled directly
%% with the card network. The net amount owed is represented by an
%% Issuing `Settlement` object.
-type issuing_settlement() ::
    #{transaction_volume := integer(),
      transaction_count := integer(),
      settlement_service := binary(),
      object := 'issuing.settlement',
      network_settlement_identifier := binary(),
      network_fees := integer(),
      network := visa,
      net_total := integer(),
      metadata := json:value(),
      livemode := boolean(),
      interchange_fees := integer(),
      id := binary(),
      currency := binary(),
      created := integer(),
      clearing_date := integer(),
      bin := binary()}.
%% payment_method_details_sofort
-type payment_method_details_sofort() ::
    #{verified_name => binary() | null,
      preferred_language => de | en | es | fr | it | nl | pl | null,
      iban_last4 => binary() | null,
      generated_sepa_debit_mandate => binary() | mandate(),
      generated_sepa_debit => binary() | payment_method(),
      country => binary() | null,
      bic => binary() | null,
      bank_name => binary() | null,
      bank_code => binary() | null}.
%% issuing_card_authorization_controls
-type issuing_card_authorization_controls() ::
    #{spending_limits_currency => binary() | null,
      spending_limits => [issuing_card_spending_limit()] | null,
      blocked_categories =>
          [ac_refrigeration_repair | accounting_bookkeeping_services | advertising_services |
           agricultural_cooperative | airlines_air_carriers | airports_flying_fields |
           ambulance_services | amusement_parks_carnivals | antique_reproductions | antique_shops |
           aquariums | architectural_surveying_services | art_dealers_and_galleries |
           artists_supply_and_craft_shops | auto_and_home_supply_stores | auto_body_repair_shops |
           auto_paint_shops | auto_service_shops | automated_cash_disburse |
           automated_fuel_dispensers | automobile_associations |
           automotive_parts_and_accessories_stores | automotive_tire_stores |
           bail_and_bond_payments | bakeries | bands_orchestras | barber_and_beauty_shops |
           betting_casino_gambling | bicycle_shops | billiard_pool_establishments | boat_dealers |
           boat_rentals_and_leases | book_stores | books_periodicals_and_newspapers |
           bowling_alleys | bus_lines | business_secretarial_schools | buying_shopping_services |
           cable_satellite_and_other_pay_television_and_radio |
           camera_and_photographic_supply_stores | candy_nut_and_confectionery_stores |
           car_and_truck_dealers_new_used | car_and_truck_dealers_used_only | car_rental_agencies |
           car_washes | carpentry_services | carpet_upholstery_cleaning | caterers |
           charitable_and_social_service_organizations_fundraising | chemicals_and_allied_products |
           child_care_services | childrens_and_infants_wear_stores | chiropodists_podiatrists |
           chiropractors | cigar_stores_and_stands | civic_social_fraternal_associations |
           cleaning_and_maintenance | clothing_rental | colleges_universities |
           commercial_equipment | commercial_footwear | commercial_photography_art_and_graphics |
           commuter_transport_and_ferries | computer_network_services | computer_programming |
           computer_repair | computer_software_stores | computers_peripherals_and_software |
           concrete_work_services | construction_materials | consulting_public_relations |
           correspondence_schools | cosmetic_stores | counseling_services | country_clubs |
           courier_services | court_costs | credit_reporting_agencies | cruise_lines |
           dairy_products_stores | dance_hall_studios_schools | dating_escort_services |
           dentists_orthodontists | department_stores | detective_agencies |
           digital_goods_applications | digital_goods_games | digital_goods_large_volume |
           digital_goods_media | direct_marketing_catalog_merchant |
           direct_marketing_combination_catalog_and_retail_merchant |
           direct_marketing_inbound_telemarketing | direct_marketing_insurance_services |
           direct_marketing_other | direct_marketing_outbound_telemarketing |
           direct_marketing_subscription | direct_marketing_travel | discount_stores | doctors |
           door_to_door_sales | drapery_window_covering_and_upholstery_stores | drinking_places |
           drug_stores_and_pharmacies | drugs_drug_proprietaries_and_druggist_sundries |
           dry_cleaners | durable_goods | duty_free_stores | eating_places_restaurants |
           educational_services | electric_razor_stores | electrical_parts_and_equipment |
           electrical_services | electronics_repair_shops | electronics_stores |
           elementary_secondary_schools | employment_temp_agencies | equipment_rental |
           exterminating_services | family_clothing_stores | fast_food_restaurants |
           financial_institutions | fines_government_administrative_entities |
           fireplace_fireplace_screens_and_accessories_stores | floor_covering_stores | florists |
           florists_supplies_nursery_stock_and_flowers | freezer_and_locker_meat_provisioners |
           fuel_dealers_non_automotive | funeral_services_crematories |
           furniture_home_furnishings_and_equipment_stores_except_appliances |
           furniture_repair_refinishing | furriers_and_fur_shops | general_services |
           gift_card_novelty_and_souvenir_shops | glass_paint_and_wallpaper_stores |
           glassware_crystal_stores | golf_courses_public | government_services |
           grocery_stores_supermarkets | hardware_equipment_and_supplies | hardware_stores |
           health_and_beauty_spas | hearing_aids_sales_and_supplies | heating_plumbing_a_c |
           hobby_toy_and_game_shops | home_supply_warehouse_stores | hospitals |
           hotels_motels_and_resorts | household_appliance_stores | industrial_supplies |
           information_retrieval_services | insurance_default | insurance_underwriting_premiums |
           intra_company_purchases | jewelry_stores_watches_clocks_and_silverware_stores |
           landscaping_services | laundries | laundry_cleaning_services | legal_services_attorneys |
           luggage_and_leather_goods_stores | lumber_building_materials_stores |
           manual_cash_disburse | marinas_service_and_supplies | masonry_stonework_and_plaster |
           massage_parlors | medical_and_dental_labs |
           medical_dental_ophthalmic_and_hospital_equipment_and_supplies | medical_services |
           membership_organizations | mens_and_boys_clothing_and_accessories_stores |
           mens_womens_clothing_stores | metal_service_centers | miscellaneous |
           miscellaneous_apparel_and_accessory_shops | miscellaneous_auto_dealers |
           miscellaneous_business_services | miscellaneous_food_stores |
           miscellaneous_general_merchandise | miscellaneous_general_services |
           miscellaneous_home_furnishing_specialty_stores | miscellaneous_publishing_and_printing |
           miscellaneous_recreation_services | miscellaneous_repair_shops |
           miscellaneous_specialty_retail | mobile_home_dealers | motion_picture_theaters |
           motor_freight_carriers_and_trucking | motor_homes_dealers |
           motor_vehicle_supplies_and_new_parts | motorcycle_shops_and_dealers |
           motorcycle_shops_dealers | music_stores_musical_instruments_pianos_and_sheet_music |
           news_dealers_and_newsstands | non_fi_money_orders |
           non_fi_stored_value_card_purchase_load | nondurable_goods |
           nurseries_lawn_and_garden_supply_stores | nursing_personal_care |
           office_and_commercial_furniture | opticians_eyeglasses | optometrists_ophthalmologist |
           orthopedic_goods_prosthetic_devices | osteopaths | package_stores_beer_wine_and_liquor |
           paints_varnishes_and_supplies | parking_lots_garages | passenger_railways | pawn_shops |
           pet_shops_pet_food_and_supplies | petroleum_and_petroleum_products | photo_developing |
           photographic_photocopy_microfilm_equipment_and_supplies | photographic_studios |
           picture_video_production | piece_goods_notions_and_other_dry_goods |
           plumbing_heating_equipment_and_supplies | political_organizations |
           postal_services_government_only | precious_stones_and_metals_watches_and_jewelry |
           professional_services | public_warehousing_and_storage | quick_copy_repro_and_blueprint |
           railroads | real_estate_agents_and_managers_rentals | record_stores |
           recreational_vehicle_rentals | religious_goods_stores | religious_organizations |
           roofing_siding_sheet_metal | secretarial_support_services | security_brokers_dealers |
           service_stations | sewing_needlework_fabric_and_piece_goods_stores |
           shoe_repair_hat_cleaning | shoe_stores | small_appliance_repair | snowmobile_dealers |
           special_trade_services | specialty_cleaning | sporting_goods_stores |
           sporting_recreation_camps | sports_and_riding_apparel_stores | sports_clubs_fields |
           stamp_and_coin_stores | stationary_office_supplies_printing_and_writing_paper |
           stationery_stores_office_and_school_supply_stores | swimming_pools_sales |
           t_ui_travel_germany | tailors_alterations | tax_payments_government_agencies |
           tax_preparation_services | taxicabs_limousines |
           telecommunication_equipment_and_telephone_sales | telecommunication_services |
           telegraph_services | tent_and_awning_shops | testing_laboratories |
           theatrical_ticket_agencies | timeshares | tire_retreading_and_repair |
           tolls_bridge_fees | tourist_attractions_and_exhibits | towing_services |
           trailer_parks_campgrounds | transportation_services | travel_agencies_tour_operators |
           truck_stop_iteration | truck_utility_trailer_rentals |
           typesetting_plate_making_and_related_services | typewriter_stores |
           u_s_federal_government_agencies_or_departments | uniforms_commercial_clothing |
           used_merchandise_and_secondhand_stores | utilities | variety_stores |
           veterinary_services | video_amusement_game_supplies | video_game_arcades |
           video_tape_rental_stores | vocational_trade_schools | watch_jewelry_repair |
           welding_repair | wholesale_clubs | wig_and_toupee_stores | wires_money_orders |
           womens_accessory_and_specialty_shops | womens_ready_to_wear_stores |
           wrecking_and_salvage_yards] |
          null,
      allowed_categories =>
          [ac_refrigeration_repair | accounting_bookkeeping_services | advertising_services |
           agricultural_cooperative | airlines_air_carriers | airports_flying_fields |
           ambulance_services | amusement_parks_carnivals | antique_reproductions | antique_shops |
           aquariums | architectural_surveying_services | art_dealers_and_galleries |
           artists_supply_and_craft_shops | auto_and_home_supply_stores | auto_body_repair_shops |
           auto_paint_shops | auto_service_shops | automated_cash_disburse |
           automated_fuel_dispensers | automobile_associations |
           automotive_parts_and_accessories_stores | automotive_tire_stores |
           bail_and_bond_payments | bakeries | bands_orchestras | barber_and_beauty_shops |
           betting_casino_gambling | bicycle_shops | billiard_pool_establishments | boat_dealers |
           boat_rentals_and_leases | book_stores | books_periodicals_and_newspapers |
           bowling_alleys | bus_lines | business_secretarial_schools | buying_shopping_services |
           cable_satellite_and_other_pay_television_and_radio |
           camera_and_photographic_supply_stores | candy_nut_and_confectionery_stores |
           car_and_truck_dealers_new_used | car_and_truck_dealers_used_only | car_rental_agencies |
           car_washes | carpentry_services | carpet_upholstery_cleaning | caterers |
           charitable_and_social_service_organizations_fundraising | chemicals_and_allied_products |
           child_care_services | childrens_and_infants_wear_stores | chiropodists_podiatrists |
           chiropractors | cigar_stores_and_stands | civic_social_fraternal_associations |
           cleaning_and_maintenance | clothing_rental | colleges_universities |
           commercial_equipment | commercial_footwear | commercial_photography_art_and_graphics |
           commuter_transport_and_ferries | computer_network_services | computer_programming |
           computer_repair | computer_software_stores | computers_peripherals_and_software |
           concrete_work_services | construction_materials | consulting_public_relations |
           correspondence_schools | cosmetic_stores | counseling_services | country_clubs |
           courier_services | court_costs | credit_reporting_agencies | cruise_lines |
           dairy_products_stores | dance_hall_studios_schools | dating_escort_services |
           dentists_orthodontists | department_stores | detective_agencies |
           digital_goods_applications | digital_goods_games | digital_goods_large_volume |
           digital_goods_media | direct_marketing_catalog_merchant |
           direct_marketing_combination_catalog_and_retail_merchant |
           direct_marketing_inbound_telemarketing | direct_marketing_insurance_services |
           direct_marketing_other | direct_marketing_outbound_telemarketing |
           direct_marketing_subscription | direct_marketing_travel | discount_stores | doctors |
           door_to_door_sales | drapery_window_covering_and_upholstery_stores | drinking_places |
           drug_stores_and_pharmacies | drugs_drug_proprietaries_and_druggist_sundries |
           dry_cleaners | durable_goods | duty_free_stores | eating_places_restaurants |
           educational_services | electric_razor_stores | electrical_parts_and_equipment |
           electrical_services | electronics_repair_shops | electronics_stores |
           elementary_secondary_schools | employment_temp_agencies | equipment_rental |
           exterminating_services | family_clothing_stores | fast_food_restaurants |
           financial_institutions | fines_government_administrative_entities |
           fireplace_fireplace_screens_and_accessories_stores | floor_covering_stores | florists |
           florists_supplies_nursery_stock_and_flowers | freezer_and_locker_meat_provisioners |
           fuel_dealers_non_automotive | funeral_services_crematories |
           furniture_home_furnishings_and_equipment_stores_except_appliances |
           furniture_repair_refinishing | furriers_and_fur_shops | general_services |
           gift_card_novelty_and_souvenir_shops | glass_paint_and_wallpaper_stores |
           glassware_crystal_stores | golf_courses_public | government_services |
           grocery_stores_supermarkets | hardware_equipment_and_supplies | hardware_stores |
           health_and_beauty_spas | hearing_aids_sales_and_supplies | heating_plumbing_a_c |
           hobby_toy_and_game_shops | home_supply_warehouse_stores | hospitals |
           hotels_motels_and_resorts | household_appliance_stores | industrial_supplies |
           information_retrieval_services | insurance_default | insurance_underwriting_premiums |
           intra_company_purchases | jewelry_stores_watches_clocks_and_silverware_stores |
           landscaping_services | laundries | laundry_cleaning_services | legal_services_attorneys |
           luggage_and_leather_goods_stores | lumber_building_materials_stores |
           manual_cash_disburse | marinas_service_and_supplies | masonry_stonework_and_plaster |
           massage_parlors | medical_and_dental_labs |
           medical_dental_ophthalmic_and_hospital_equipment_and_supplies | medical_services |
           membership_organizations | mens_and_boys_clothing_and_accessories_stores |
           mens_womens_clothing_stores | metal_service_centers | miscellaneous |
           miscellaneous_apparel_and_accessory_shops | miscellaneous_auto_dealers |
           miscellaneous_business_services | miscellaneous_food_stores |
           miscellaneous_general_merchandise | miscellaneous_general_services |
           miscellaneous_home_furnishing_specialty_stores | miscellaneous_publishing_and_printing |
           miscellaneous_recreation_services | miscellaneous_repair_shops |
           miscellaneous_specialty_retail | mobile_home_dealers | motion_picture_theaters |
           motor_freight_carriers_and_trucking | motor_homes_dealers |
           motor_vehicle_supplies_and_new_parts | motorcycle_shops_and_dealers |
           motorcycle_shops_dealers | music_stores_musical_instruments_pianos_and_sheet_music |
           news_dealers_and_newsstands | non_fi_money_orders |
           non_fi_stored_value_card_purchase_load | nondurable_goods |
           nurseries_lawn_and_garden_supply_stores | nursing_personal_care |
           office_and_commercial_furniture | opticians_eyeglasses | optometrists_ophthalmologist |
           orthopedic_goods_prosthetic_devices | osteopaths | package_stores_beer_wine_and_liquor |
           paints_varnishes_and_supplies | parking_lots_garages | passenger_railways | pawn_shops |
           pet_shops_pet_food_and_supplies | petroleum_and_petroleum_products | photo_developing |
           photographic_photocopy_microfilm_equipment_and_supplies | photographic_studios |
           picture_video_production | piece_goods_notions_and_other_dry_goods |
           plumbing_heating_equipment_and_supplies | political_organizations |
           postal_services_government_only | precious_stones_and_metals_watches_and_jewelry |
           professional_services | public_warehousing_and_storage | quick_copy_repro_and_blueprint |
           railroads | real_estate_agents_and_managers_rentals | record_stores |
           recreational_vehicle_rentals | religious_goods_stores | religious_organizations |
           roofing_siding_sheet_metal | secretarial_support_services | security_brokers_dealers |
           service_stations | sewing_needlework_fabric_and_piece_goods_stores |
           shoe_repair_hat_cleaning | shoe_stores | small_appliance_repair | snowmobile_dealers |
           special_trade_services | specialty_cleaning | sporting_goods_stores |
           sporting_recreation_camps | sports_and_riding_apparel_stores | sports_clubs_fields |
           stamp_and_coin_stores | stationary_office_supplies_printing_and_writing_paper |
           stationery_stores_office_and_school_supply_stores | swimming_pools_sales |
           t_ui_travel_germany | tailors_alterations | tax_payments_government_agencies |
           tax_preparation_services | taxicabs_limousines |
           telecommunication_equipment_and_telephone_sales | telecommunication_services |
           telegraph_services | tent_and_awning_shops | testing_laboratories |
           theatrical_ticket_agencies | timeshares | tire_retreading_and_repair |
           tolls_bridge_fees | tourist_attractions_and_exhibits | towing_services |
           trailer_parks_campgrounds | transportation_services | travel_agencies_tour_operators |
           truck_stop_iteration | truck_utility_trailer_rentals |
           typesetting_plate_making_and_related_services | typewriter_stores |
           u_s_federal_government_agencies_or_departments | uniforms_commercial_clothing |
           used_merchandise_and_secondhand_stores | utilities | variety_stores |
           veterinary_services | video_amusement_game_supplies | video_game_arcades |
           video_tape_rental_stores | vocational_trade_schools | watch_jewelry_repair |
           welding_repair | wholesale_clubs | wig_and_toupee_stores | wires_money_orders |
           womens_accessory_and_specialty_shops | womens_ready_to_wear_stores |
           wrecking_and_salvage_yards] |
          null}.
%% invoices_payment_method_options
-type invoices_payment_method_options() ::
    #{card => invoice_payment_method_options_card(),
      bancontact => invoice_payment_method_options_bancontact(),
      acss_debit => invoice_payment_method_options_acss_debit()}.
%% source_transaction_chf_credit_transfer_data
-type source_transaction_chf_credit_transfer_data() ::
    #{sender_name => binary(),
      sender_iban => binary(),
      sender_address_line1 => binary(),
      sender_address_country => binary(),
      reference => binary()}.
%% deleted_product
-type deleted_product() ::
    #{object := product,
      id := binary(),
      deleted := boolean()}.
%% credit_note_line_item
-type credit_note_line_item() ::
    #{unit_amount_decimal => binary() | null,
      unit_amount => integer() | null,
      type := custom_line_item | invoice_line_item,
      tax_rates := [tax_rate()],
      tax_amounts := [credit_note_tax_amount()],
      quantity => integer() | null,
      object := credit_note_line_item,
      livemode := boolean(),
      invoice_line_item => binary(),
      id := binary(),
      discount_amounts := [discounts_resource_discount_amount()],
      discount_amount := integer(),
      description => binary() | null,
      amount := integer()}.
%% payment_method_details_card_wallet_amex_express_checkout
-type payment_method_details_card_wallet_amex_express_checkout() :: #{}.
%% payment_method_options_wechat_pay
-type payment_method_options_wechat_pay() ::
    #{setup_future_usage => none,
      client => android | ios | web | null,
      app_id => binary() | null}.
%% gelato_verified_outputs
-type gelato_verified_outputs() ::
    #{last_name => binary() | null,
      id_number_type => br_cpf | sg_nric | us_ssn | null,
      id_number => binary() | null,
      first_name => binary() | null,
      dob => gelato_data_verified_outputs_date(),
      address => address()}.
%% invoices_resource_invoice_tax_id
-type invoices_resource_invoice_tax_id() ::
    #{value => binary() | null,
      type :=
          ae_trn | au_abn | au_arn | br_cnpj | br_cpf | ca_bn | ca_gst_hst | ca_pst_bc | ca_pst_mb |
          ca_pst_sk | ca_qst | ch_vat | cl_tin | es_cif | eu_vat | gb_vat | ge_vat | hk_br |
          id_npwp | il_vat | in_gst | is_vat | jp_cn | jp_rn | kr_brn | li_uid | mx_rfc | my_frp |
          my_itn | my_sst | no_vat | nz_gst | ru_inn | ru_kpp | sa_vat | sg_gst | sg_uen | th_vat |
          tw_vat | ua_vat | unknown | us_ein | za_vat}.
%% payment_method_details_p24
-type payment_method_details_p24() ::
    #{verified_name => binary() | null,
      reference => binary() | null,
      bank =>
          alior_bank | bank_millennium | bank_nowy_bfg_sa | bank_pekao_sa | banki_spbdzielcze |
          blik | bnp_paribas | boz | citi_handlowy | credit_agricole | envelobank |
          etransfer_pocztowy24 | getin_bank | ideabank | ing | inteligo | mbank_mtransfer |
          nest_przelew | noble_pay | pbac_z_ipko | plus_bank | santander_przelew24 |
          tmobile_usbugi_bankowe | toyota_bank | volkswagen_bank | null}.
%% person_future_requirements
-type person_future_requirements() ::
    #{pending_verification := [binary()],
      past_due := [binary()],
      eventually_due := [binary()],
      errors := [account_requirements_error()],
      currently_due := [binary()],
      alternatives => [account_requirements_alternative()] | null}.
%% login_link
-type login_link() ::
    #{url := binary(),
      object := login_link,
      created := integer()}.
%% source_mandate_notification_sepa_debit_data
-type source_mandate_notification_sepa_debit_data() ::
    #{mandate_reference => binary(),
      last4 => binary(),
      creditor_identifier => binary()}.
%% apple_pay_domain
-type apple_pay_domain() ::
    #{object := apple_pay_domain,
      livemode := boolean(),
      id := binary(),
      domain_name := binary(),
      created := integer()}.
%% invoice_payment_method_options_acss_debit_mandate_options
-type invoice_payment_method_options_acss_debit_mandate_options() ::
    #{transaction_type => business | personal | null}.
%% payment_method_eps
-type payment_method_eps() ::
    #{bank =>
          arzte_und_apotheker_bank | austrian_anadi_bank_ag | bank_austria |
          bankhaus_carl_spangler | bankhaus_schelhammer_und_schattera_ag | bawag_psk_ag |
          bks_bank_ag | brull_kallmus_bank_ag | btv_vier_lander_bank |
          capital_bank_grawe_gruppe_ag | dolomitenbank | easybank_ag | erste_bank_und_sparkassen |
          hypo_alpeadriabank_international_ag | hypo_bank_burgenland_aktiengesellschaft |
          hypo_noe_lb_fur_niederosterreich_u_wien | hypo_oberosterreich_salzburg_steiermark |
          hypo_tirol_bank_ag | hypo_vorarlberg_bank_ag | marchfelder_bank | oberbank_ag |
          raiffeisen_bankengruppe_osterreich | schoellerbank_ag | sparda_bank_wien |
          volksbank_gruppe | volkskreditbank_ag | vr_bank_braunau | null}.
%% transfer_reversal
%%
%% [Stripe Connect](https://stripe.com/docs/connect) platforms can
%% reverse transfers made to a connected account, either entirely or
%% partially, and can also specify whether to refund any related
%% application fees. Transfer reversals add to the platform's
%% balance and subtract from the destination account's balance.
%%
%% Reversing a transfer that was made for a [destination
%% charge](/docs/connect/destination-charges) is allowed only up to
%% the amount of the charge. It is possible to reverse a
%% [transfer_group](https://stripe.com/docs/connect/charges-transfers#transfer-options)
%% transfer only if the destination account has enough balance to
%% cover the reversal.
%%
%% Related guide: [Reversing
%% Transfers](https://stripe.com/docs/connect/charges-transfers#reversing-transfers).
-type transfer_reversal() ::
    #{transfer := binary() | transfer(),
      source_refund => binary() | refund(),
      object := transfer_reversal,
      metadata => json:value() | null,
      id := binary(),
      destination_payment_refund => binary() | refund(),
      currency := binary(),
      created := integer(),
      balance_transaction => binary() | balance_transaction(),
      amount := integer()}.
%% delivery_estimate
-type delivery_estimate() ::
    #{type := binary(),
      latest => binary(),
      earliest => binary(),
      date => binary()}.
%% account_capability_requirements
-type account_capability_requirements() ::
    #{pending_verification := [binary()],
      past_due := [binary()],
      eventually_due := [binary()],
      errors := [account_requirements_error()],
      disabled_reason => binary() | null,
      currently_due := [binary()],
      current_deadline => integer() | null,
      alternatives => [account_requirements_alternative()] | null}.
%% legal_entity_person_verification_document
-type legal_entity_person_verification_document() ::
    #{front => binary() | file(),
      details_code => binary() | null,
      details => binary() | null,
      back => binary() | file()}.
%% issuing_card_wallets
-type issuing_card_wallets() ::
    #{primary_account_identifier => binary() | null,
      google_pay := issuing_card_google_pay(),
      apple_pay := issuing_card_apple_pay()}.
%% payment_method_card_wallet_visa_checkout
-type payment_method_card_wallet_visa_checkout() ::
    #{shipping_address => address(),
      name => binary() | null,
      email => binary() | null,
      billing_address => address()}.
%% payment_method_boleto
-type payment_method_boleto() :: #{tax_id := binary()}.
%% gelato_verification_session_options
-type gelato_verification_session_options() ::
    #{id_number => gelato_session_id_number_options(),
      document => gelato_session_document_options()}.
%% payment_method_details_acss_debit
-type payment_method_details_acss_debit() ::
    #{transit_number => binary() | null,
      mandate => binary(),
      last4 => binary() | null,
      institution_number => binary() | null,
      fingerprint => binary() | null,
      bank_name => binary() | null}.
%% issuing_authorization_request
-type issuing_authorization_request() ::
    #{reason :=
          account_disabled |
          card_active |
          card_inactive |
          cardholder_inactive |
          cardholder_verification_required |
          insufficient_funds |
          not_allowed |
          spending_controls |
          suspected_fraud |
          verification_failed |
          webhook_approved |
          webhook_declined |
          webhook_timeout,
      merchant_currency := binary(),
      merchant_amount := integer(),
      currency := binary(),
      created := integer(),
      approved := boolean(),
      amount_details => issuing_authorization_amount_details(),
      amount := integer()}.
%% connect_collection_transfer
-type connect_collection_transfer() ::
    #{object := connect_collection_transfer,
      livemode := boolean(),
      id := binary(),
      destination := binary() | account(),
      currency := binary(),
      amount := integer()}.
%% payment_intent_payment_method_options_sepa_debit
-type payment_intent_payment_method_options_sepa_debit() ::
    #{setup_future_usage => none | off_session | on_session,
      mandate_options => payment_intent_payment_method_options_mandate_options_sepa_debit()}.
%% deleted_apple_pay_domain
-type deleted_apple_pay_domain() ::
    #{object := apple_pay_domain,
      id := binary(),
      deleted := boolean()}.
%% payment_method_bacs_debit
-type payment_method_bacs_debit() ::
    #{sort_code => binary() | null,
      last4 => binary() | null,
      fingerprint => binary() | null}.
%% setup_attempt
%%
%% A SetupAttempt describes one attempted confirmation of a
%% SetupIntent, whether that confirmation was successful or
%% unsuccessful. You can use SetupAttempts to inspect details of a
%% specific attempt at setting up a payment method using a
%% SetupIntent.
-type setup_attempt() ::
    #{usage := binary(),
      status := binary(),
      setup_intent := binary() | setup_intent(),
      setup_error => api_errors(),
      payment_method_details := setup_attempt_payment_method_details(),
      payment_method := binary() | payment_method(),
      on_behalf_of => binary() | account(),
      object := setup_attempt,
      livemode := boolean(),
      id := binary(),
      customer => binary() | customer() | deleted_customer(),
      created := integer(),
      application => binary() | application()}.
%% payment_intent_next_action_boleto
-type payment_intent_next_action_boleto() ::
    #{pdf => binary() | null,
      number => binary() | null,
      hosted_voucher_url => binary() | null,
      expires_at => integer() | null}.
%% deleted_radar.value_list
-type deleted_radar_value_list() ::
    #{object := 'radar.value_list',
      id := binary(),
      deleted := boolean()}.
%% issuing_cardholder_individual_dob
-type issuing_cardholder_individual_dob() ::
    #{year => integer() | null,
      month => integer() | null,
      day => integer() | null}.
%% issuing_cardholder_company
-type issuing_cardholder_company() :: #{tax_id_provided := boolean()}.
%% token
%%
%% Tokenization is the process Stripe uses to collect sensitive card
%% or bank account details, or personally identifiable information
%% (PII), directly from your customers in a secure manner. A token
%% representing this information is returned to your server to use.
%% You should use our [recommended payments
%% integrations](https://stripe.com/docs/payments) to perform this
%% process client-side. This ensures that no sensitive card data
%% touches your server, and allows your integration to operate in a
%% PCI-compliant way.
%%
%% If you cannot use client-side tokenization, you can also create
%% tokens using the API with either your publishable or secret API
%% key. Keep in mind that if your integration uses this method, you
%% are responsible for any PCI compliance that may be required, and
%% you must keep your secret API key safe. Unlike with client-side
%% tokenization, your customer's information is not sent directly to
%% Stripe, so we cannot determine how it is handled or stored.
%%
%% Tokens cannot be stored or used more than once. To store card or
%% bank account information for later use, you can create
%% [Customer](https://stripe.com/docs/api#customers) objects or
%% [Custom accounts](https://stripe.com/docs/api#external_accounts).
%% Note that [Radar](https://stripe.com/docs/radar), our integrated
%% solution for automatic fraud protection, performs best with
%% integrations that use client-side tokenization.
%%
%% Related guide: [Accept a
%% payment](https://stripe.com/docs/payments/accept-a-payment-charges#web-create-token)
-type token() ::
    #{used := boolean(),
      type := binary(),
      object := token,
      livemode := boolean(),
      id := binary(),
      created := integer(),
      client_ip => binary() | null,
      card => card(),
      bank_account => bank_account()}.
%% order_item
%%
%% A representation of the constituent items of any given order. Can
%% be used to represent [SKUs](https://stripe.com/docs/api#skus),
%% shipping costs, or taxes owed on the order.
%%
%% Related guide: [Orders](https://stripe.com/docs/orders/guide).
-type order_item() ::
    #{type := binary(),
      quantity => integer() | null,
      parent => binary() | sku(),
      object := order_item,
      description := binary(),
      currency := binary(),
      amount := integer()}.
%% account_payments_settings
-type account_payments_settings() ::
    #{statement_descriptor_kanji => binary() | null,
      statement_descriptor_kana => binary() | null,
      statement_descriptor => binary() | null}.
%% payment_method_sofort
-type payment_method_sofort() :: #{country => binary() | null}.
%% payment_link
%%
%% A payment link is a shareable URL that will take your customers
%% to a hosted payment page. A payment link can be shared and used
%% multiple times.
%%
%% When a customer opens a payment link it will open a new [checkout
%% session](https://stripe.com/docs/api/checkout/sessions) to render
%% the payment page. You can use [checkout session
%% events](https://stripe.com/docs/api/events/types#event_types-checkout.session.completed)
%% to track payments through payment links.
%%
%% Related guide: [Payment Links
%% API](https://stripe.com/docs/payments/payment-links/api)
-type payment_link() ::
    #{url := binary(),
      transfer_data => payment_links_resource_transfer_data(),
      subscription_data => payment_links_resource_subscription_data(),
      shipping_address_collection => payment_links_resource_shipping_address_collection(),
      phone_number_collection := payment_links_resource_phone_number_collection(),
      payment_method_types => [card] | null,
      on_behalf_of => binary() | account(),
      object := payment_link,
      metadata := json:value(),
      livemode := boolean(),
      line_items =>
          #{url := binary(),
            object := list,
            has_more := boolean(),
            data := [item()]},
      id := binary(),
      billing_address_collection := auto | required,
      automatic_tax := payment_links_resource_automatic_tax(),
      application_fee_percent => number() | null,
      application_fee_amount => integer() | null,
      allow_promotion_codes := boolean(),
      after_completion := payment_links_resource_after_completion(),
      active := boolean()}.
%% deleted_terminal.location
-type deleted_terminal_location() ::
    #{object := 'terminal.location',
      id := binary(),
      deleted := boolean()}.
%% subscription_schedules_resource_default_settings
-type subscription_schedules_resource_default_settings() ::
    #{transfer_data => subscription_transfer_data(),
      invoice_settings => invoice_setting_subscription_schedule_setting(),
      default_payment_method => binary() | payment_method(),
      collection_method => charge_automatically | send_invoice | null,
      billing_thresholds => subscription_billing_thresholds(),
      billing_cycle_anchor := automatic | phase_start,
      automatic_tax => subscription_schedules_resource_default_settings_automatic_tax(),
      application_fee_percent => number() | null}.
%% payment_pages_checkout_session_total_details
-type payment_pages_checkout_session_total_details() ::
    #{breakdown => payment_pages_checkout_session_total_details_resource_breakdown(),
      amount_tax := integer(),
      amount_shipping => integer() | null,
      amount_discount := integer()}.
%% topup
%%
%% To top up your Stripe balance, you create a top-up object. You
%% can retrieve individual top-ups, as well as list all top-ups.
%% Top-ups are identified by a unique, random ID.
%%
%% Related guide: [Topping Up your Platform
%% Account](https://stripe.com/docs/connect/top-ups).
-type topup() ::
    #{transfer_group => binary() | null,
      status := canceled | failed | pending | reversed | succeeded,
      statement_descriptor => binary() | null,
      source := source(),
      object := topup,
      metadata := json:value(),
      livemode := boolean(),
      id := binary(),
      failure_message => binary() | null,
      failure_code => binary() | null,
      expected_availability_date => integer() | null,
      description => binary() | null,
      currency := binary(),
      created := integer(),
      balance_transaction => binary() | balance_transaction(),
      amount := integer()}.
%% card
%%
%% You can store multiple cards on a customer in order to charge the
%% customer later. You can also store multiple debit cards on a
%% recipient in order to transfer to those cards later.
%%
%% Related guide: [Card Payments with
%% Sources](https://stripe.com/docs/sources/cards).
-type card() ::
    #{tokenization_method => binary() | null,
      recipient => binary() | recipient(),
      object := card,
      name => binary() | null,
      metadata => json:value() | null,
      last4 := binary(),
      id := binary(),
      funding := binary(),
      fingerprint => binary() | null,
      exp_year := integer(),
      exp_month := integer(),
      dynamic_last4 => binary() | null,
      default_for_currency => boolean() | null,
      cvc_check => binary() | null,
      customer => binary() | customer() | deleted_customer(),
      currency => binary() | null,
      country => binary() | null,
      brand := binary(),
      available_payout_methods => [instant | standard] | null,
      address_zip_check => binary() | null,
      address_zip => binary() | null,
      address_state => binary() | null,
      address_line2 => binary() | null,
      address_line1_check => binary() | null,
      address_line1 => binary() | null,
      address_country => binary() | null,
      address_city => binary() | null,
      account => binary() | account()}.
%% alipay_account
-type alipay_account() ::
    #{username := binary(),
      used := boolean(),
      reusable := boolean(),
      payment_currency => binary() | null,
      payment_amount => integer() | null,
      object := alipay_account,
      metadata => json:value(),
      livemode := boolean(),
      id := binary(),
      fingerprint := binary(),
      customer => binary() | customer() | deleted_customer(),
      created := integer()}.
%% account_decline_charge_on
-type account_decline_charge_on() ::
    #{cvc_failure := boolean(), avs_failure := boolean()}.
%% coupon
%%
%% A coupon contains information about a percent-off or amount-off
%% discount you might want to apply to a customer. Coupons may be
%% applied to [invoices](https://stripe.com/docs/api#invoices) or
%% [orders](https://stripe.com/docs/api#create_order_legacy-coupon).
%% Coupons do not work with conventional one-off
%% [charges](https://stripe.com/docs/api#create_charge).
-type coupon() ::
    #{valid := boolean(),
      times_redeemed := integer(),
      redeem_by => integer() | null,
      percent_off => number() | null,
      object := coupon,
      name => binary() | null,
      metadata => json:value() | null,
      max_redemptions => integer() | null,
      livemode := boolean(),
      id := binary(),
      duration_in_months => integer() | null,
      duration := forever | once | repeating,
      currency => binary() | null,
      created := integer(),
      applies_to => coupon_applies_to(),
      amount_off => integer() | null}.
%% payment_intent_card_processing
-type payment_intent_card_processing() :: #{}.
%% payment_method_options_grabpay
-type payment_method_options_grabpay() :: #{setup_future_usage => none}.
%% dispute_evidence
-type dispute_evidence() ::
    #{uncategorized_text => binary() | null,
      uncategorized_file => binary() | file(),
      shipping_tracking_number => binary() | null,
      shipping_documentation => binary() | file(),
      shipping_date => binary() | null,
      shipping_carrier => binary() | null,
      shipping_address => binary() | null,
      service_documentation => binary() | file(),
      service_date => binary() | null,
      refund_refusal_explanation => binary() | null,
      refund_policy_disclosure => binary() | null,
      refund_policy => binary() | file(),
      receipt => binary() | file(),
      product_description => binary() | null,
      duplicate_charge_id => binary() | null,
      duplicate_charge_explanation => binary() | null,
      duplicate_charge_documentation => binary() | file(),
      customer_signature => binary() | file(),
      customer_purchase_ip => binary() | null,
      customer_name => binary() | null,
      customer_email_address => binary() | null,
      customer_communication => binary() | file(),
      cancellation_rebuttal => binary() | null,
      cancellation_policy_disclosure => binary() | null,
      cancellation_policy => binary() | file(),
      billing_address => binary() | null,
      access_activity_log => binary() | null}.
%% gelato_data_id_number_report_date
%%
%% Point in Time
-type gelato_data_id_number_report_date() ::
    #{year => integer() | null,
      month => integer() | null,
      day => integer() | null}.
%% terminal.reader
%%
%% A Reader represents a physical device for accepting payment
%% details.
%%
%% Related guide: [Connecting to a
%% Reader](https://stripe.com/docs/terminal/payments/connect-reader).
-type terminal_reader() ::
    #{status => binary() | null,
      serial_number := binary(),
      object := 'terminal.reader',
      metadata := json:value(),
      location => binary() | terminal_location(),
      livemode := boolean(),
      label := binary(),
      ip_address => binary() | null,
      id := binary(),
      device_type :=
          bbpos_chipper2x | bbpos_wisepad3 | bbpos_wisepos_e | stripe_m2 | verifone_P400,
      device_sw_version => binary() | null}.
%% payment_links_resource_subscription_data
-type payment_links_resource_subscription_data() ::
    #{trial_period_days => integer() | null}.
%% line_items_discount_amount
-type line_items_discount_amount() :: #{discount := discount(), amount := integer()}.
%% gelato_report_id_number_options
-type gelato_report_id_number_options() :: #{}.
%% setup_attempt_payment_method_details
-type setup_attempt_payment_method_details() ::
    #{type := binary(),
      sofort => setup_attempt_payment_method_details_sofort(),
      sepa_debit => setup_attempt_payment_method_details_sepa_debit(),
      ideal => setup_attempt_payment_method_details_ideal(),
      card_present => setup_attempt_payment_method_details_card_present(),
      card => setup_attempt_payment_method_details_card(),
      boleto => setup_attempt_payment_method_details_boleto(),
      bancontact => setup_attempt_payment_method_details_bancontact(),
      bacs_debit => setup_attempt_payment_method_details_bacs_debit(),
      au_becs_debit => setup_attempt_payment_method_details_au_becs_debit(),
      acss_debit => setup_attempt_payment_method_details_acss_debit()}.
%% issuing_dispute_fraudulent_evidence
-type issuing_dispute_fraudulent_evidence() ::
    #{explanation => binary() | null, additional_documentation => binary() | file()}.
%% invoice_setting_subscription_schedule_setting
-type invoice_setting_subscription_schedule_setting() ::
    #{days_until_due => integer() | null}.
%% subscription_item
%%
%% Subscription items allow you to create customer subscriptions
%% with more than one plan, making it easy to represent complex
%% billing relationships.
-type subscription_item() ::
    #{tax_rates => [tax_rate()] | null,
      subscription := binary(),
      quantity => integer(),
      price := price(),
      object := subscription_item,
      metadata := json:value(),
      id := binary(),
      created := integer(),
      billing_thresholds => subscription_item_billing_thresholds()}.
%% line_items_tax_amount
-type line_items_tax_amount() :: #{rate := tax_rate(), amount := integer()}.
%% source_type_eps
-type source_type_eps() ::
    #{statement_descriptor => binary() | null, reference => binary() | null}.
%% terminal.connection_token
%%
%% A Connection Token is used by the Stripe Terminal SDK to connect
%% to a reader.
%%
%% Related guide: [Fleet
%% Management](https://stripe.com/docs/terminal/fleet/locations).
-type terminal_connection_token() ::
    #{secret := binary(),
      object := 'terminal.connection_token',
      location => binary()}.
%% payment_intent_payment_method_options_card
-type payment_intent_payment_method_options_card() ::
    #{setup_future_usage => none | off_session | on_session,
      request_three_d_secure => any | automatic | challenge_only | null,
      network =>
          amex |
          cartes_bancaires |
          diners |
          discover |
          interac |
          jcb |
          mastercard |
          unionpay |
          unknown |
          visa |
          null,
      installments => payment_method_options_card_installments()}.
%% portal_customer_update
-type portal_customer_update() ::
    #{enabled := boolean(), allowed_updates := [address | email | phone | shipping | tax_id]}.
%% setup_attempt_payment_method_details_sepa_debit
-type setup_attempt_payment_method_details_sepa_debit() :: #{}.
%% quotes_resource_subscription_data
-type quotes_resource_subscription_data() ::
    #{trial_period_days => integer() | null, effective_date => integer() | null}.
%% application_fee
-type application_fee() ::
    #{refunds :=
          #{url := binary(),
            object := list,
            has_more := boolean(),
            data := [fee_refund()]},
      refunded := boolean(),
      originating_transaction => binary() | charge(),
      object := application_fee,
      livemode := boolean(),
      id := binary(),
      currency := binary(),
      created := integer(),
      charge := binary() | charge(),
      balance_transaction => binary() | balance_transaction(),
      application := binary() | application(),
      amount_refunded := integer(),
      amount := integer(),
      account := binary() | account()}.
%% deleted_tax_id
-type deleted_tax_id() ::
    #{object := tax_id,
      id := binary(),
      deleted := boolean()}.
%% radar_review_resource_session
-type radar_review_resource_session() ::
    #{version => binary() | null,
      platform => binary() | null,
      device => binary() | null,
      browser => binary() | null}.
%% file
%%
%% This is an object representing a file hosted on Stripe's servers.
%% The file may have been uploaded by yourself using the [create
%% file](https://stripe.com/docs/api#create_file) request (for
%% example, when uploading dispute evidence) or it may have been
%% created by Stripe (for example, the results of a [Sigma scheduled
%% query](#scheduled_queries)).
%%
%% Related guide: [File Upload
%% Guide](https://stripe.com/docs/file-upload).
-type file() ::
    #{url => binary() | null,
      type => binary() | null,
      title => binary() | null,
      size := integer(),
      purpose :=
          account_requirement |
          additional_verification |
          business_icon |
          business_logo |
          customer_signature |
          dispute_evidence |
          document_provider_identity_document |
          finance_report_run |
          identity_document |
          identity_document_downloadable |
          pci_document |
          selfie |
          sigma_scheduled_query |
          tax_document_user_upload,
      object := file,
      links =>
          #{url := binary(),
            object := list,
            has_more := boolean(),
            data := [file_link()]},
      id := binary(),
      filename => binary() | null,
      expires_at => integer() | null,
      created := integer()}.
%% payment_intent_next_action_verify_with_microdeposits
-type payment_intent_next_action_verify_with_microdeposits() ::
    #{hosted_verification_url := binary(), arrival_date := integer()}.
%% payment_method_details_card_wallet_masterpass
-type payment_method_details_card_wallet_masterpass() ::
    #{shipping_address => address(),
      name => binary() | null,
      email => binary() | null,
      billing_address => address()}.
%% issuer_fraud_record
%%
%% This resource has been renamed to [Early Fraud
%% Warning](#early_fraud_warning_object) and will be removed in a
%% future API version.
-type issuer_fraud_record() ::
    #{post_date := integer(),
      object := issuer_fraud_record,
      livemode := boolean(),
      id := binary(),
      has_liability_shift := boolean(),
      fraud_type := binary(),
      created := integer(),
      charge := binary() | charge(),
      actionable := boolean()}.
%% recipient
%%
%% With `Recipient` objects, you can transfer money from your Stripe
%% account to a third-party bank account or debit card. The API
%% allows you to create, delete, and update your recipients. You can
%% retrieve individual recipients as well as a list of all your
%% recipients.
%%
%% **`Recipient` objects have been deprecated in favor of
%% [Connect](https://stripe.com/docs/connect), specifically
%% Connect's much more powerful [Account
%% objects](https://stripe.com/docs/api#account). Stripe accounts
%% that don't already use recipients can no longer begin doing so.
%% Please use `Account` objects instead.**
-type recipient() ::
    #{type := binary(),
      rolled_back_from => binary() | account(),
      object := recipient,
      name => binary() | null,
      migrated_to => binary() | account(),
      metadata := json:value(),
      livemode := boolean(),
      id := binary(),
      email => binary() | null,
      description => binary() | null,
      default_card => binary() | card(),
      created := integer(),
      cards =>
          #{url := binary(),
            object := list,
            has_more := boolean(),
            data := [card()]},
      active_account => bank_account()}.
%% payment_method_details_boleto
-type payment_method_details_boleto() :: #{tax_id := binary()}.
%% payment_method_details_card_wallet_apple_pay
-type payment_method_details_card_wallet_apple_pay() :: #{}.
%% invoices_status_transitions
-type invoices_status_transitions() ::
    #{voided_at => integer() | null,
      paid_at => integer() | null,
      marked_uncollectible_at => integer() | null,
      finalized_at => integer() | null}.
%% source_transaction
%%
%% Some payment methods have no required amount that a customer must
%% send. Customers can be instructed to send any amount, and it can
%% be made up of multiple transactions. As such, sources can have
%% multiple associated transactions.
-type source_transaction() ::
    #{type :=
          ach_credit_transfer |
          ach_debit |
          alipay |
          bancontact |
          card |
          card_present |
          eps |
          giropay |
          ideal |
          klarna |
          multibanco |
          p24 |
          sepa_debit |
          sofort |
          three_d_secure |
          wechat,
      status := binary(),
      source := binary(),
      sepa_credit_transfer => source_transaction_sepa_credit_transfer_data(),
      paper_check => source_transaction_paper_check_data(),
      object := source_transaction,
      livemode := boolean(),
      id := binary(),
      gbp_credit_transfer => source_transaction_gbp_credit_transfer_data(),
      currency := binary(),
      created := integer(),
      chf_credit_transfer => source_transaction_chf_credit_transfer_data(),
      amount := integer(),
      ach_credit_transfer => source_transaction_ach_credit_transfer_data()}.
%% payment_pages_checkout_session_total_details_resource_breakdown
-type payment_pages_checkout_session_total_details_resource_breakdown() ::
    #{taxes := [line_items_tax_amount()], discounts := [line_items_discount_amount()]}.
%% review
%%
%% Reviews can be used to supplement automated fraud detection with
%% human expertise.
%%
%% Learn more about [Radar](/radar) and reviewing payments
%% [here](https://stripe.com/docs/radar/reviews).
-type review() ::
    #{session => radar_review_resource_session(),
      reason := binary(),
      payment_intent => binary() | payment_intent(),
      opened_reason := manual | rule,
      open := boolean(),
      object := review,
      livemode := boolean(),
      ip_address_location => radar_review_resource_location(),
      ip_address => binary() | null,
      id := binary(),
      created := integer(),
      closed_reason => approved | disputed | redacted | refunded | refunded_as_fraud | null,
      charge => binary() | charge(),
      billing_zip => binary() | null}.
%% balance
%%
%% This is an object representing your Stripe balance. You can
%% retrieve it to see the balance currently on your Stripe account.
%%
%% You can also retrieve the balance history, which contains a list
%% of
%% [transactions](https://stripe.com/docs/reporting/balance-transaction-types)
%% that contributed to the balance (charges, payouts, and so forth).
%%
%% The available and pending amounts for each currency are broken
%% down further by payment source types.
%%
%% Related guide: [Understanding Connect Account
%% Balances](https://stripe.com/docs/connect/account-balances).
-type balance() ::
    #{pending := [balance_amount()],
      object := balance,
      livemode := boolean(),
      issuing => balance_detail(),
      instant_available => [balance_amount()],
      connect_reserved => [balance_amount()],
      available := [balance_amount()]}.
%% bitcoin_transaction
-type bitcoin_transaction() ::
    #{receiver := binary(),
      object := bitcoin_transaction,
      id := binary(),
      currency := binary(),
      created := integer(),
      bitcoin_amount := integer(),
      amount := integer()}.
%% subscription_schedule_phase_configuration
%%
%% A phase describes the plans, coupon, and trialing status of a
%% subscription for a predefined time period.
-type subscription_schedule_phase_configuration() ::
    #{trial_end => integer() | null,
      transfer_data => subscription_transfer_data(),
      start_date := integer(),
      proration_behavior := always_invoice | create_prorations | none,
      items := [subscription_schedule_configuration_item()],
      invoice_settings => invoice_setting_subscription_schedule_setting(),
      end_date := integer(),
      default_tax_rates => [tax_rate()] | null,
      default_payment_method => binary() | payment_method(),
      coupon => binary() | coupon() | deleted_coupon(),
      collection_method => charge_automatically | send_invoice | null,
      billing_thresholds => subscription_billing_thresholds(),
      billing_cycle_anchor => automatic | phase_start | null,
      automatic_tax => schedules_phase_automatic_tax(),
      application_fee_percent => number() | null,
      add_invoice_items := [subscription_schedule_add_invoice_item()]}.
%% mandate_multi_use
-type mandate_multi_use() :: #{}.
%% card_issuing_account_terms_of_service
-type card_issuing_account_terms_of_service() ::
    #{user_agent => binary(),
      ip => binary() | null,
      date => integer() | null}.
%% deleted_payment_source
-type deleted_payment_source() ::
    deleted_alipay_account() |
    deleted_bank_account() |
    deleted_bitcoin_receiver() |
    deleted_card().
%% issuing_authorization_amount_details
-type issuing_authorization_amount_details() :: #{atm_fee => integer() | null}.
%% payment_method_bancontact
-type payment_method_bancontact() :: #{}.
%% gelato_data_verified_outputs_date
%%
%% Point in Time
-type gelato_data_verified_outputs_date() ::
    #{year => integer() | null,
      month => integer() | null,
      day => integer() | null}.
%% setup_attempt_payment_method_details_card
-type setup_attempt_payment_method_details_card() ::
    #{three_d_secure => three_d_secure_details()}.
%% invoices_payment_settings
-type invoices_payment_settings() ::
    #{payment_method_types =>
          [ach_credit_transfer |
           ach_debit |
           acss_debit |
           au_becs_debit |
           bacs_debit |
           bancontact |
           boleto |
           card |
           fpx |
           giropay |
           grabpay |
           ideal |
           sepa_debit |
           sofort |
           wechat_pay] |
          null,
      payment_method_options => invoices_payment_method_options()}.
%% issuing_dispute_merchandise_not_as_described_evidence
-type issuing_dispute_merchandise_not_as_described_evidence() ::
    #{returned_at => integer() | null,
      return_status => merchant_rejected | successful | null,
      return_description => binary() | null,
      received_at => integer() | null,
      explanation => binary() | null,
      additional_documentation => binary() | file()}.
%% payment_intent
%%
%% A PaymentIntent guides you through the process of collecting a
%% payment from your customer. We recommend that you create exactly
%% one PaymentIntent for each order or customer session in your
%% system. You can reference the PaymentIntent later to see the
%% history of payment attempts for a particular session.
%%
%% A PaymentIntent transitions through [multiple
%% statuses](https://stripe.com/docs/payments/intents#intent-statuses)
%% throughout its lifetime as it interfaces with Stripe.js to
%% perform authentication flows and ultimately creates at most one
%% successful charge.
%%
%% Related guide: [Payment Intents
%% API](https://stripe.com/docs/payments/payment-intents).
-type payment_intent() ::
    #{shipping => shipping(),
      id := binary(),
      transfer_data => transfer_data(),
      statement_descriptor_suffix => binary() | null,
      application_fee_amount => integer() | null,
      transfer_group => binary() | null,
      status :=
          canceled |
          processing |
          requires_action |
          requires_capture |
          requires_confirmation |
          requires_payment_method |
          succeeded,
      cancellation_reason =>
          abandoned |
          automatic |
          duplicate |
          failed_invoice |
          fraudulent |
          requested_by_customer |
          void_invoice |
          null,
      created := integer(),
      currency := binary(),
      canceled_at => integer() | null,
      last_payment_error => api_errors(),
      object := payment_intent,
      receipt_email => binary() | null,
      client_secret => binary() | null,
      application => binary() | application(),
      statement_descriptor => binary() | null,
      automatic_payment_methods => payment_flows_automatic_payment_methods_payment_intent(),
      invoice => binary() | invoice(),
      amount := integer(),
      customer => binary() | customer() | deleted_customer(),
      on_behalf_of => binary() | account(),
      next_action => payment_intent_next_action(),
      confirmation_method := automatic | manual,
      review => binary() | review(),
      amount_capturable => integer(),
      payment_method_types := [binary()],
      description => binary() | null,
      metadata => json:value(),
      amount_received => integer(),
      charges =>
          #{url := binary(),
            object := list,
            has_more := boolean(),
            data := [charge()]},
      payment_method_options => payment_intent_payment_method_options(),
      capture_method := automatic | manual,
      processing => payment_intent_processing(),
      livemode := boolean(),
      payment_method => binary() | payment_method(),
      setup_future_usage => off_session | on_session | null}.
%% setup_attempt_payment_method_details_acss_debit
-type setup_attempt_payment_method_details_acss_debit() :: #{}.
%% capability
%%
%% This is an object representing a capability for a Stripe account.
%%
%% Related guide: [Account
%% capabilities](https://stripe.com/docs/connect/account-capabilities).
-type capability() ::
    #{status := active | disabled | inactive | pending | unrequested,
      requirements => account_capability_requirements(),
      requested_at => integer() | null,
      requested := boolean(),
      object := capability,
      id := binary(),
      future_requirements => account_capability_future_requirements(),
      account := binary() | account()}.
%% subscription_schedule
%%
%% A subscription schedule allows you to create and manage the
%% lifecycle of a subscription by predefining expected changes.
%%
%% Related guide: [Subscription
%% Schedules](https://stripe.com/docs/billing/subscriptions/subscription-schedules).
-type subscription_schedule() ::
    #{subscription => binary() | subscription(),
      status := active | canceled | completed | not_started | released,
      released_subscription => binary() | null,
      released_at => integer() | null,
      phases := [subscription_schedule_phase_configuration()],
      object := subscription_schedule,
      metadata => json:value() | null,
      livemode := boolean(),
      id := binary(),
      end_behavior := cancel | none | release | renew,
      default_settings := subscription_schedules_resource_default_settings(),
      customer := binary() | customer() | deleted_customer(),
      current_phase => subscription_schedule_current_phase(),
      created := integer(),
      completed_at => integer() | null,
      canceled_at => integer() | null}.
%% schedules_phase_automatic_tax
-type schedules_phase_automatic_tax() :: #{enabled := boolean()}.
%% discount
%%
%% A discount represents the actual application of a coupon to a
%% particular customer. It contains information about when the
%% discount began and when it will end.
%%
%% Related guide: [Applying Discounts to
%% Subscriptions](https://stripe.com/docs/billing/subscriptions/discounts).
-type discount() ::
    #{subscription => binary() | null,
      start := integer(),
      promotion_code => binary() | promotion_code(),
      object := discount,
      invoice_item => binary() | null,
      invoice => binary() | null,
      id := binary(),
      'end' => integer() | null,
      customer => binary() | customer() | deleted_customer(),
      coupon := coupon(),
      checkout_session => binary() | null}.
%% account_card_payments_settings
-type account_card_payments_settings() ::
    #{statement_descriptor_prefix => binary() | null,
      decline_on => account_decline_charge_on()}.
%% deleted_plan
-type deleted_plan() ::
    #{object := plan,
      id := binary(),
      deleted := boolean()}.
%% gelato_data_document_report_issued_date
%%
%% Point in Time
-type gelato_data_document_report_issued_date() ::
    #{year => integer() | null,
      month => integer() | null,
      day => integer() | null}.
%% invoice_mandate_options_card
-type invoice_mandate_options_card() ::
    #{description => binary() | null,
      amount_type => fixed | maximum | null,
      amount => integer() | null}.
%% setup_attempt_payment_method_details_ideal
-type setup_attempt_payment_method_details_ideal() ::
    #{verified_name => binary() | null,
      iban_last4 => binary() | null,
      generated_sepa_debit_mandate => binary() | mandate(),
      generated_sepa_debit => binary() | payment_method(),
      bic =>
          'ABNANL2A' |
          'ASNBNL21' |
          'BUNQNL2A' |
          'FVLBNL22' |
          'HANDNL2A' |
          'INGBNL2A' |
          'KNABNL2H' |
          'MOYONL21' |
          'RABONL2U' |
          'RBRBNL21' |
          'REVOLT21' |
          'SNSBNL2A' |
          'TRIONL2U' |
          null,
      bank =>
          abn_amro |
          asn_bank |
          bunq |
          handelsbanken |
          ing |
          knab |
          moneyou |
          rabobank |
          regiobank |
          revolut |
          sns_bank |
          triodos_bank |
          van_lanschot |
          null}.
%% issuing_card_spending_limit
-type issuing_card_spending_limit() ::
    #{interval := all_time | daily | monthly | per_authorization | weekly | yearly,
      categories =>
          [ac_refrigeration_repair | accounting_bookkeeping_services | advertising_services |
           agricultural_cooperative | airlines_air_carriers | airports_flying_fields |
           ambulance_services | amusement_parks_carnivals | antique_reproductions | antique_shops |
           aquariums | architectural_surveying_services | art_dealers_and_galleries |
           artists_supply_and_craft_shops | auto_and_home_supply_stores | auto_body_repair_shops |
           auto_paint_shops | auto_service_shops | automated_cash_disburse |
           automated_fuel_dispensers | automobile_associations |
           automotive_parts_and_accessories_stores | automotive_tire_stores |
           bail_and_bond_payments | bakeries | bands_orchestras | barber_and_beauty_shops |
           betting_casino_gambling | bicycle_shops | billiard_pool_establishments | boat_dealers |
           boat_rentals_and_leases | book_stores | books_periodicals_and_newspapers |
           bowling_alleys | bus_lines | business_secretarial_schools | buying_shopping_services |
           cable_satellite_and_other_pay_television_and_radio |
           camera_and_photographic_supply_stores | candy_nut_and_confectionery_stores |
           car_and_truck_dealers_new_used | car_and_truck_dealers_used_only | car_rental_agencies |
           car_washes | carpentry_services | carpet_upholstery_cleaning | caterers |
           charitable_and_social_service_organizations_fundraising | chemicals_and_allied_products |
           child_care_services | childrens_and_infants_wear_stores | chiropodists_podiatrists |
           chiropractors | cigar_stores_and_stands | civic_social_fraternal_associations |
           cleaning_and_maintenance | clothing_rental | colleges_universities |
           commercial_equipment | commercial_footwear | commercial_photography_art_and_graphics |
           commuter_transport_and_ferries | computer_network_services | computer_programming |
           computer_repair | computer_software_stores | computers_peripherals_and_software |
           concrete_work_services | construction_materials | consulting_public_relations |
           correspondence_schools | cosmetic_stores | counseling_services | country_clubs |
           courier_services | court_costs | credit_reporting_agencies | cruise_lines |
           dairy_products_stores | dance_hall_studios_schools | dating_escort_services |
           dentists_orthodontists | department_stores | detective_agencies |
           digital_goods_applications | digital_goods_games | digital_goods_large_volume |
           digital_goods_media | direct_marketing_catalog_merchant |
           direct_marketing_combination_catalog_and_retail_merchant |
           direct_marketing_inbound_telemarketing | direct_marketing_insurance_services |
           direct_marketing_other | direct_marketing_outbound_telemarketing |
           direct_marketing_subscription | direct_marketing_travel | discount_stores | doctors |
           door_to_door_sales | drapery_window_covering_and_upholstery_stores | drinking_places |
           drug_stores_and_pharmacies | drugs_drug_proprietaries_and_druggist_sundries |
           dry_cleaners | durable_goods | duty_free_stores | eating_places_restaurants |
           educational_services | electric_razor_stores | electrical_parts_and_equipment |
           electrical_services | electronics_repair_shops | electronics_stores |
           elementary_secondary_schools | employment_temp_agencies | equipment_rental |
           exterminating_services | family_clothing_stores | fast_food_restaurants |
           financial_institutions | fines_government_administrative_entities |
           fireplace_fireplace_screens_and_accessories_stores | floor_covering_stores | florists |
           florists_supplies_nursery_stock_and_flowers | freezer_and_locker_meat_provisioners |
           fuel_dealers_non_automotive | funeral_services_crematories |
           furniture_home_furnishings_and_equipment_stores_except_appliances |
           furniture_repair_refinishing | furriers_and_fur_shops | general_services |
           gift_card_novelty_and_souvenir_shops | glass_paint_and_wallpaper_stores |
           glassware_crystal_stores | golf_courses_public | government_services |
           grocery_stores_supermarkets | hardware_equipment_and_supplies | hardware_stores |
           health_and_beauty_spas | hearing_aids_sales_and_supplies | heating_plumbing_a_c |
           hobby_toy_and_game_shops | home_supply_warehouse_stores | hospitals |
           hotels_motels_and_resorts | household_appliance_stores | industrial_supplies |
           information_retrieval_services | insurance_default | insurance_underwriting_premiums |
           intra_company_purchases | jewelry_stores_watches_clocks_and_silverware_stores |
           landscaping_services | laundries | laundry_cleaning_services | legal_services_attorneys |
           luggage_and_leather_goods_stores | lumber_building_materials_stores |
           manual_cash_disburse | marinas_service_and_supplies | masonry_stonework_and_plaster |
           massage_parlors | medical_and_dental_labs |
           medical_dental_ophthalmic_and_hospital_equipment_and_supplies | medical_services |
           membership_organizations | mens_and_boys_clothing_and_accessories_stores |
           mens_womens_clothing_stores | metal_service_centers | miscellaneous |
           miscellaneous_apparel_and_accessory_shops | miscellaneous_auto_dealers |
           miscellaneous_business_services | miscellaneous_food_stores |
           miscellaneous_general_merchandise | miscellaneous_general_services |
           miscellaneous_home_furnishing_specialty_stores | miscellaneous_publishing_and_printing |
           miscellaneous_recreation_services | miscellaneous_repair_shops |
           miscellaneous_specialty_retail | mobile_home_dealers | motion_picture_theaters |
           motor_freight_carriers_and_trucking | motor_homes_dealers |
           motor_vehicle_supplies_and_new_parts | motorcycle_shops_and_dealers |
           motorcycle_shops_dealers | music_stores_musical_instruments_pianos_and_sheet_music |
           news_dealers_and_newsstands | non_fi_money_orders |
           non_fi_stored_value_card_purchase_load | nondurable_goods |
           nurseries_lawn_and_garden_supply_stores | nursing_personal_care |
           office_and_commercial_furniture | opticians_eyeglasses | optometrists_ophthalmologist |
           orthopedic_goods_prosthetic_devices | osteopaths | package_stores_beer_wine_and_liquor |
           paints_varnishes_and_supplies | parking_lots_garages | passenger_railways | pawn_shops |
           pet_shops_pet_food_and_supplies | petroleum_and_petroleum_products | photo_developing |
           photographic_photocopy_microfilm_equipment_and_supplies | photographic_studios |
           picture_video_production | piece_goods_notions_and_other_dry_goods |
           plumbing_heating_equipment_and_supplies | political_organizations |
           postal_services_government_only | precious_stones_and_metals_watches_and_jewelry |
           professional_services | public_warehousing_and_storage | quick_copy_repro_and_blueprint |
           railroads | real_estate_agents_and_managers_rentals | record_stores |
           recreational_vehicle_rentals | religious_goods_stores | religious_organizations |
           roofing_siding_sheet_metal | secretarial_support_services | security_brokers_dealers |
           service_stations | sewing_needlework_fabric_and_piece_goods_stores |
           shoe_repair_hat_cleaning | shoe_stores | small_appliance_repair | snowmobile_dealers |
           special_trade_services | specialty_cleaning | sporting_goods_stores |
           sporting_recreation_camps | sports_and_riding_apparel_stores | sports_clubs_fields |
           stamp_and_coin_stores | stationary_office_supplies_printing_and_writing_paper |
           stationery_stores_office_and_school_supply_stores | swimming_pools_sales |
           t_ui_travel_germany | tailors_alterations | tax_payments_government_agencies |
           tax_preparation_services | taxicabs_limousines |
           telecommunication_equipment_and_telephone_sales | telecommunication_services |
           telegraph_services | tent_and_awning_shops | testing_laboratories |
           theatrical_ticket_agencies | timeshares | tire_retreading_and_repair |
           tolls_bridge_fees | tourist_attractions_and_exhibits | towing_services |
           trailer_parks_campgrounds | transportation_services | travel_agencies_tour_operators |
           truck_stop_iteration | truck_utility_trailer_rentals |
           typesetting_plate_making_and_related_services | typewriter_stores |
           u_s_federal_government_agencies_or_departments | uniforms_commercial_clothing |
           used_merchandise_and_secondhand_stores | utilities | variety_stores |
           veterinary_services | video_amusement_game_supplies | video_game_arcades |
           video_tape_rental_stores | vocational_trade_schools | watch_jewelry_repair |
           welding_repair | wholesale_clubs | wig_and_toupee_stores | wires_money_orders |
           womens_accessory_and_specialty_shops | womens_ready_to_wear_stores |
           wrecking_and_salvage_yards] |
          null,
      amount := integer()}.
%% portal_subscription_cancel
-type portal_subscription_cancel() ::
    #{proration_behavior := always_invoice | create_prorations | none,
      mode := at_period_end | immediately,
      enabled := boolean(),
      cancellation_reason := portal_subscription_cancellation_reason()}.
%% portal_subscription_update_product
-type portal_subscription_update_product() ::
    #{product := binary(), prices := [binary()]}.
%% payment_method_details_ach_debit
-type payment_method_details_ach_debit() ::
    #{routing_number => binary() | null,
      last4 => binary() | null,
      fingerprint => binary() | null,
      country => binary() | null,
      bank_name => binary() | null,
      account_holder_type => company | individual | null}.
%% shipping_method
-type shipping_method() ::
    #{id := binary(),
      description := binary(),
      delivery_estimate => delivery_estimate(),
      currency := binary(),
      amount := integer()}.
%% payment_method_details_ach_credit_transfer
-type payment_method_details_ach_credit_transfer() ::
    #{swift_code => binary() | null,
      routing_number => binary() | null,
      bank_name => binary() | null,
      account_number => binary() | null}.
%% customer_tax
-type customer_tax() ::
    #{location => customer_tax_location(),
      ip_address => binary() | null,
      automatic_tax := failed | not_collecting | supported | unrecognized_location}.
%% portal_subscription_cancellation_reason
-type portal_subscription_cancellation_reason() ::
    #{options :=
          [customer_service |
           low_quality |
           missing_features |
           other |
           switched_service |
           too_complex |
           too_expensive |
           unused],
      enabled := boolean()}.
%% payment_method_options_boleto
-type payment_method_options_boleto() ::
    #{setup_future_usage => none | off_session | on_session, expires_after_days := integer()}.
%% platform_tax_fee
-type platform_tax_fee() ::
    #{type := binary(),
      source_transaction := binary(),
      object := platform_tax_fee,
      id := binary(),
      account := binary()}.
%% payment_pages_checkout_session_tax_id_collection
-type payment_pages_checkout_session_tax_id_collection() :: #{enabled := boolean()}.
%% invoice_payment_method_options_card
-type invoice_payment_method_options_card() ::
    #{request_three_d_secure => any | automatic | null}.
%% setup_attempt_payment_method_details_sofort
-type setup_attempt_payment_method_details_sofort() ::
    #{verified_name => binary() | null,
      preferred_language => de | en | fr | nl | null,
      iban_last4 => binary() | null,
      generated_sepa_debit_mandate => binary() | mandate(),
      generated_sepa_debit => binary() | payment_method(),
      bic => binary() | null,
      bank_name => binary() | null,
      bank_code => binary() | null}.
%% payment_intent_payment_method_options_mandate_options_sepa_debit
-type payment_intent_payment_method_options_mandate_options_sepa_debit() :: #{}.
%% payment_intent_payment_method_options_au_becs_debit
-type payment_intent_payment_method_options_au_becs_debit() ::
    #{setup_future_usage => none | off_session | on_session}.
%% invoice_transfer_data
-type invoice_transfer_data() ::
    #{destination := binary() | account(), amount => integer() | null}.
%% subscription_pending_invoice_item_interval
-type subscription_pending_invoice_item_interval() ::
    #{interval_count := integer(), interval := day | month | week | year}.
%% issuing_card_apple_pay
-type issuing_card_apple_pay() ::
    #{ineligible_reason =>
          missing_agreement | missing_cardholder_contact | unsupported_region | null,
      eligible := boolean()}.
%% charge
%%
%% To charge a credit or a debit card, you create a `Charge` object.
%% You can retrieve and refund individual charges as well as list
%% all charges. Charges are identified by a unique, random ID.
%%
%% Related guide: [Accept a payment with the Charges
%% API](https://stripe.com/docs/payments/accept-a-payment-charges).
-type charge() ::
    #{shipping => shipping(),
      id := binary(),
      transfer_data => charge_transfer_data(),
      statement_descriptor_suffix => binary() | null,
      application_fee_amount => integer() | null,
      disputed := boolean(),
      transfer_group => binary() | null,
      status := failed | pending | succeeded,
      source_transfer => binary() | transfer(),
      transfer => binary() | transfer(),
      created := integer(),
      currency := binary(),
      refunded := boolean(),
      amount_refunded := integer(),
      captured := boolean(),
      billing_details := billing_details(),
      order => binary() | order(),
      amount_captured := integer(),
      object := charge,
      failure_code => binary() | null,
      receipt_number => binary() | null,
      receipt_email => binary() | null,
      application => binary() | application(),
      balance_transaction => binary() | balance_transaction(),
      statement_descriptor => binary() | null,
      payment_method_details => payment_method_details(),
      invoice => binary() | invoice(),
      outcome => charge_outcome(),
      amount := integer(),
      fraud_details => charge_fraud_details(),
      customer => binary() | customer() | deleted_customer(),
      on_behalf_of => binary() | account(),
      refunds :=
          #{url := binary(),
            object := list,
            has_more := boolean(),
            data := [refund()]},
      payment_intent => binary() | payment_intent(),
      review => binary() | review(),
      failure_message => binary() | null,
      application_fee => binary() | application_fee(),
      paid := boolean(),
      description => binary() | null,
      metadata := json:value(),
      calculated_statement_descriptor => binary() | null,
      livemode := boolean(),
      payment_method => binary() | null,
      receipt_url => binary() | null}.
%% issuing_cardholder_id_document
-type issuing_cardholder_id_document() ::
    #{front => binary() | file(), back => binary() | file()}.
%% person_relationship
-type person_relationship() ::
    #{title => binary() | null,
      representative => boolean() | null,
      percent_ownership => number() | null,
      owner => boolean() | null,
      executive => boolean() | null,
      director => boolean() | null}.
%% source_type_three_d_secure
-type source_type_three_d_secure() ::
    #{tokenization_method => binary() | null,
      three_d_secure => binary(),
      name => binary() | null,
      last4 => binary() | null,
      funding => binary() | null,
      fingerprint => binary(),
      exp_year => integer() | null,
      exp_month => integer() | null,
      dynamic_last4 => binary() | null,
      cvc_check => binary() | null,
      customer => binary() | null,
      country => binary() | null,
      card => binary() | null,
      brand => binary() | null,
      authenticated => boolean() | null,
      address_zip_check => binary() | null,
      address_line1_check => binary() | null}.
%% payment_pages_checkout_session_phone_number_collection
-type payment_pages_checkout_session_phone_number_collection() :: #{enabled := boolean()}.
%% payment_method_card
-type payment_method_card() ::
    #{wallet => payment_method_card_wallet(),
      three_d_secure_usage => three_d_secure_usage(),
      networks => networks(),
      last4 := binary(),
      generated_from => payment_method_card_generated_card(),
      funding := binary(),
      fingerprint => binary() | null,
      exp_year := integer(),
      exp_month := integer(),
      country => binary() | null,
      checks => payment_method_card_checks(),
      brand := binary()}.
%% setup_intent_payment_method_options
-type setup_intent_payment_method_options() ::
    #{sepa_debit => setup_intent_payment_method_options_sepa_debit(),
      card => setup_intent_payment_method_options_card(),
      acss_debit => setup_intent_payment_method_options_acss_debit()}.
%% source_type_ideal
-type source_type_ideal() ::
    #{statement_descriptor => binary() | null,
      iban_last4 => binary() | null,
      bic => binary() | null,
      bank => binary() | null}.
%% payment_source
-type payment_source() ::
    account() | alipay_account() | bank_account() | bitcoin_receiver() | card() | source().
%% item
%%
%% A line item.
-type item() ::
    #{taxes => [line_items_tax_amount()],
      quantity => integer() | null,
      price => price(),
      object := item,
      id := binary(),
      discounts => [line_items_discount_amount()],
      description := binary(),
      currency := binary(),
      amount_total := integer(),
      amount_subtotal := integer()}.
%% subscriptions_resource_pause_collection
%%
%% The Pause Collection settings determine how we will pause
%% collection for this subscription and for how long the
%% subscription should be paused.
-type subscriptions_resource_pause_collection() ::
    #{resumes_at => integer() | null, behavior := keep_as_draft | mark_uncollectible | void}.
%% tax_id_verification
-type tax_id_verification() ::
    #{verified_name => binary() | null,
      verified_address => binary() | null,
      status := pending | unavailable | unverified | verified}.
%% gelato_document_report_error
-type gelato_document_report_error() ::
    #{reason => binary() | null,
      code =>
          document_expired | document_type_not_supported | document_unverified_other | null}.
%% customer
%%
%% This object represents a customer of your business. It lets you
%% create recurring charges and track payments that belong to the
%% same customer.
%%
%% Related guide: [Save a card during
%% payment](https://stripe.com/docs/payments/save-during-payment).
-type customer() ::
    #{tax_ids =>
          #{url := binary(),
            object := list,
            has_more := boolean(),
            data := [tax_id()]},
      tax_exempt => exempt | none | reverse | null,
      tax => customer_tax(),
      subscriptions =>
          #{url := binary(),
            object := list,
            has_more := boolean(),
            data := [subscription()]},
      sources =>
          #{url := binary(),
            object := list,
            has_more := boolean(),
            data := [alipay_account() | bank_account() | bitcoin_receiver() | card() | source()]},
      shipping => shipping(),
      preferred_locales => [binary()] | null,
      phone => binary() | null,
      object := customer,
      next_invoice_sequence => integer(),
      name => binary() | null,
      metadata => json:value(),
      livemode := boolean(),
      invoice_settings => invoice_setting_customer_setting(),
      invoice_prefix => binary() | null,
      id := binary(),
      email => binary() | null,
      discount => discount(),
      description => binary() | null,
      delinquent => boolean() | null,
      default_source =>
          binary() | alipay_account() | bank_account() | bitcoin_receiver() | card() | source(),
      currency => binary() | null,
      created := integer(),
      balance => integer(),
      address => address()}.
%% deleted_bitcoin_receiver
-type deleted_bitcoin_receiver() ::
    #{object := bitcoin_receiver,
      id := binary(),
      deleted := boolean()}.
%% issuing_dispute_canceled_evidence
-type issuing_dispute_canceled_evidence() ::
    #{returned_at => integer() | null,
      return_status => merchant_rejected | successful | null,
      product_type => merchandise | service | null,
      product_description => binary() | null,
      explanation => binary() | null,
      expected_at => integer() | null,
      cancellation_reason => binary() | null,
      cancellation_policy_provided => boolean() | null,
      canceled_at => integer() | null,
      additional_documentation => binary() | file()}.
%% tax_deducted_at_source
-type tax_deducted_at_source() ::
    #{tax_deduction_account_number := binary(),
      period_start := integer(),
      period_end := integer(),
      object := tax_deducted_at_source,
      id := binary()}.
%% issuing_cardholder_address
-type issuing_cardholder_address() :: #{address := address()}.
%% issuing_cardholder_requirements
-type issuing_cardholder_requirements() ::
    #{past_due =>
          ['company.tax_id' |
           'individual.dob.day' |
           'individual.dob.month' |
           'individual.dob.year' |
           'individual.first_name' |
           'individual.last_name' |
           'individual.verification.document'] |
          null,
      disabled_reason => listed | 'rejected.listed' | under_review | null}.
%% payment_intent_payment_method_options_acss_debit
-type payment_intent_payment_method_options_acss_debit() ::
    #{verification_method => automatic | instant | microdeposits,
      setup_future_usage => none | off_session | on_session,
      mandate_options => payment_intent_payment_method_options_mandate_options_acss_debit()}.
%% payment_method_card_present
-type payment_method_card_present() :: #{}.
%% setup_attempt_payment_method_details_boleto
-type setup_attempt_payment_method_details_boleto() :: #{}.
%% reporting.report_type
%%
%% The Report Type resource corresponds to a particular type of
%% report, such as the "Activity summary" or "Itemized payouts"
%% reports. These objects are identified by an ID belonging to a set
%% of enumerated values. See [API Access to Reports
%% documentation](https://stripe.com/docs/reporting/statements/api)
%% for those Report Type IDs, along with required and optional
%% parameters.
%%
%% Note that certain report types can only be run based on your
%% live-mode data (not test-mode data), and will error when queried
%% without a [live-mode API
%% key](https://stripe.com/docs/keys#test-live-modes).
-type reporting_report_type() ::
    #{version := integer(),
      updated := integer(),
      object := 'reporting.report_type',
      name := binary(),
      livemode := boolean(),
      id := binary(),
      default_columns => [binary()] | null,
      data_available_start := integer(),
      data_available_end := integer()}.
%% external_account
-type external_account() :: bank_account() | card().
%% quotes_resource_total_details_resource_breakdown
-type quotes_resource_total_details_resource_breakdown() ::
    #{taxes := [line_items_tax_amount()], discounts := [line_items_discount_amount()]}.
%% invoice_line_item_period
-type invoice_line_item_period() :: #{start := integer(), 'end' := integer()}.
%% source_mandate_notification
%%
%% Source mandate notifications should be created when a
%% notification related to a source mandate must be sent to the
%% payer. They will trigger a webhook or deliver an email to the
%% customer.
-type source_mandate_notification() ::
    #{type := binary(),
      status := binary(),
      source := source(),
      sepa_debit => source_mandate_notification_sepa_debit_data(),
      reason := binary(),
      object := source_mandate_notification,
      livemode := boolean(),
      id := binary(),
      created := integer(),
      bacs_debit => source_mandate_notification_bacs_debit_data(),
      amount => integer() | null,
      acss_debit => source_mandate_notification_acss_debit_data()}.
%% deleted_customer
-type deleted_customer() ::
    #{object := customer,
      id := binary(),
      deleted := boolean()}.
%% gelato_document_report
%%
%% Result from a document check
-type gelato_document_report() ::
    #{type => driving_license | id_card | passport | null,
      status := unverified | verified,
      number => binary() | null,
      last_name => binary() | null,
      issuing_country => binary() | null,
      issued_date => gelato_data_document_report_issued_date(),
      first_name => binary() | null,
      files => [binary()] | null,
      expiration_date => gelato_data_document_report_expiration_date(),
      error => gelato_document_report_error(),
      dob => gelato_data_document_report_date_of_birth(),
      address => address()}.
%% payment_method_options_fpx
-type payment_method_options_fpx() :: #{setup_future_usage => none}.
%% checkout_session_payment_method_options
-type checkout_session_payment_method_options() ::
    #{oxxo => checkout_oxxo_payment_method_options(),
      boleto => checkout_boleto_payment_method_options(),
      acss_debit => checkout_acss_debit_payment_method_options()}.
%% payment_intent_next_action_wechat_pay_display_qr_code
-type payment_intent_next_action_wechat_pay_display_qr_code() ::
    #{image_url_svg := binary(),
      image_url_png := binary(),
      image_data_url := binary(),
      data := binary()}.
%% payment_method_card_wallet_samsung_pay
-type payment_method_card_wallet_samsung_pay() :: #{}.
%% offline_acceptance
-type offline_acceptance() :: #{}.
%% plan_tier
-type plan_tier() ::
    #{up_to => integer() | null,
      unit_amount_decimal => binary() | null,
      unit_amount => integer() | null,
      flat_amount_decimal => binary() | null,
      flat_amount => integer() | null}.
%% webhook_endpoint
%%
%% You can configure [webhook
%% endpoints](https://stripe.com/docs/webhooks/) via the API to be
%% notified about events that happen in your Stripe account or
%% connected accounts.
%%
%% Most users configure webhooks from [the
%% dashboard](https://dashboard.stripe.com/webhooks), which provides
%% a user interface for registering and testing your webhook
%% endpoints.
%%
%% Related guide: [Setting up
%% Webhooks](https://stripe.com/docs/webhooks/configure).
-type webhook_endpoint() ::
    #{url := binary(),
      status := binary(),
      secret => binary(),
      object := webhook_endpoint,
      metadata := json:value(),
      livemode := boolean(),
      id := binary(),
      enabled_events := [binary()],
      description => binary() | null,
      created := integer(),
      application => binary() | null,
      api_version => binary() | null}.
%% price
%%
%% Prices define the unit cost, currency, and (optional) billing
%% cycle for both recurring and one-time purchases of products.
%% [Products](https://stripe.com/docs/api#products) help you track
%% inventory or provisioning, and prices help you track payment
%% terms. Different physical goods or levels of service should be
%% represented by products, and pricing options should be
%% represented by prices. This approach lets you change prices
%% without having to change your provisioning scheme.
%%
%% For example, you might have a single "gold" product that has
%% prices for $10/month, $100/year, and â¬9 once.
%%
%% Related guides: [Set up a
%% subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription),
%% [create an
%% invoice](https://stripe.com/docs/billing/invoices/create), and
%% more about [products and
%% prices](https://stripe.com/docs/products-prices/overview).
-type price() ::
    #{unit_amount_decimal => binary() | null,
      unit_amount => integer() | null,
      type := one_time | recurring,
      transform_quantity => transform_quantity(),
      tiers_mode => graduated | volume | null,
      tiers => [price_tier()],
      tax_behavior => exclusive | inclusive | unspecified | null,
      recurring => recurring(),
      product := binary() | product() | deleted_product(),
      object := price,
      nickname => binary() | null,
      metadata := json:value(),
      lookup_key => binary() | null,
      livemode := boolean(),
      id := binary(),
      currency := binary(),
      created := integer(),
      billing_scheme := per_unit | tiered,
      active := boolean()}.
%% payment_flows_automatic_payment_methods_payment_intent
-type payment_flows_automatic_payment_methods_payment_intent() :: #{enabled := boolean()}.
%% bank_account
%%
%% These bank accounts are payment methods on `Customer` objects.
%%
%% On the other hand [External
%% Accounts](https://stripe.com/docs/api#external_accounts) are
%% transfer destinations on `Account` objects for [Custom
%% accounts](https://stripe.com/docs/connect/custom-accounts). They
%% can be bank accounts or debit cards as well, and are documented
%% in the links above.
%%
%% Related guide: [Bank Debits and
%% Transfers](https://stripe.com/docs/payments/bank-debits-transfers).
-type bank_account() ::
    #{status := binary(),
      routing_number => binary() | null,
      object := bank_account,
      metadata => json:value() | null,
      last4 := binary(),
      id := binary(),
      fingerprint => binary() | null,
      default_for_currency => boolean() | null,
      customer => binary() | customer() | deleted_customer(),
      currency := binary(),
      country := binary(),
      bank_name => binary() | null,
      available_payout_methods => [instant | standard] | null,
      account_type => binary() | null,
      account_holder_type => binary() | null,
      account_holder_name => binary() | null,
      account => binary() | account()}.
%% invoice
%%
%% Invoices are statements of amounts owed by a customer, and are
%% either generated one-off, or generated periodically from a
%% subscription.
%%
%% They contain [invoice
%% items](https://stripe.com/docs/api#invoiceitems), and proration
%% adjustments that may be caused by subscription
%% upgrades/downgrades (if necessary).
%%
%% If your invoice is configured to be billed through automatic
%% charges, Stripe automatically finalizes your invoice and attempts
%% payment. Note that finalizing the invoice, [when
%% automatic](https://stripe.com/docs/billing/invoices/workflow/#auto_advance),
%% does not happen immediately as the invoice is created. Stripe
%% waits until one hour after the last webhook was successfully sent
%% (or the last webhook timed out after failing). If you (and the
%% platforms you may have connected to) have no webhooks configured,
%% Stripe waits one hour after creation to finalize the invoice.
%%
%% If your invoice is configured to be billed by sending an email,
%% then based on your [email
%% settings](https://dashboard.stripe.com/account/billing/automatic),
%% Stripe will email the invoice to your customer and await payment.
%% These emails can contain a link to a hosted page to pay the
%% invoice.
%%
%% Stripe applies any customer credit on the account before
%% determining the amount due for the invoice (i.e., the amount that
%% will be actually charged). If the amount due for the invoice is
%% less than Stripe's [minimum allowed charge per
%% currency](/docs/currencies#minimum-and-maximum-charge-amounts),
%% the invoice is automatically marked paid, and we add the amount
%% due to the customer's credit balance which is applied to the next
%% invoice.
%%
%% More details on the customer's credit balance are
%% [here](https://stripe.com/docs/billing/customer/balance).
%%
%% Related guide: [Send Invoices to
%% Customers](https://stripe.com/docs/billing/invoices/sending).
-type invoice() ::
    #{lines :=
          #{url := binary(),
            object := list,
            has_more := boolean(),
            data := [line_item()]},
      default_tax_rates := [tax_rate()],
      id => binary(),
      attempted := boolean(),
      transfer_data => invoice_transfer_data(),
      period_start := integer(),
      tax => integer() | null,
      application_fee_amount => integer() | null,
      number => binary() | null,
      customer_address => address(),
      ending_balance => integer() | null,
      status => deleted | draft | open | paid | uncollectible | void | null,
      total_tax_amounts := [invoice_tax_amount()],
      webhooks_delivered_at => integer() | null,
      subscription => binary() | subscription(),
      next_payment_attempt => integer() | null,
      period_end := integer(),
      amount_remaining := integer(),
      quote => binary() | quote(),
      discounts => [binary() | discount() | deleted_discount()] | null,
      created := integer(),
      total_discount_amounts => [discounts_resource_discount_amount()] | null,
      currency := binary(),
      automatic_tax := automatic_tax(),
      post_payment_credit_notes_amount := integer(),
      status_transitions := invoices_status_transitions(),
      object := invoice,
      billing_reason =>
          automatic_pending_invoice_item_invoice |
          manual |
          quote_accept |
          subscription |
          subscription_create |
          subscription_cycle |
          subscription_threshold |
          subscription_update |
          upcoming |
          null,
      receipt_number => binary() | null,
      default_source =>
          binary() | alipay_account() | bank_account() | bitcoin_receiver() | card() | source(),
      due_date => integer() | null,
      payment_settings := invoices_payment_settings(),
      statement_descriptor => binary() | null,
      hosted_invoice_url => binary() | null,
      account_tax_ids => [binary() | tax_id() | deleted_tax_id()] | null,
      amount_paid := integer(),
      customer => binary() | customer() | deleted_customer(),
      account_name => binary() | null,
      charge => binary() | charge(),
      on_behalf_of => binary() | account(),
      customer_email => binary() | null,
      discount => discount(),
      threshold_reason => invoice_threshold_reason(),
      paid_out_of_band := boolean(),
      payment_intent => binary() | payment_intent(),
      total := integer(),
      customer_shipping => shipping(),
      footer => binary() | null,
      subscription_proration_date => integer(),
      pre_payment_credit_notes_amount := integer(),
      paid := boolean(),
      description => binary() | null,
      metadata => json:value() | null,
      account_country => binary() | null,
      subtotal := integer(),
      custom_fields => [invoice_setting_custom_field()] | null,
      customer_name => binary() | null,
      attempt_count := integer(),
      last_finalization_error => api_errors(),
      amount_due := integer(),
      default_payment_method => binary() | payment_method(),
      collection_method := charge_automatically | send_invoice,
      customer_tax_ids => [invoices_resource_invoice_tax_id()] | null,
      livemode := boolean(),
      starting_balance := integer(),
      invoice_pdf => binary() | null,
      customer_phone => binary() | null,
      auto_advance => boolean(),
      customer_tax_exempt => exempt | none | reverse | null}.
%% card_mandate_payment_method_details
-type card_mandate_payment_method_details() :: #{}.
%% payment_method_sepa_debit
-type payment_method_sepa_debit() ::
    #{last4 => binary() | null,
      generated_from => sepa_debit_generated_from(),
      fingerprint => binary() | null,
      country => binary() | null,
      branch_code => binary() | null,
      bank_code => binary() | null}.
%% payment_intent_processing
-type payment_intent_processing() ::
    #{type := card, card => payment_intent_card_processing()}.
%% issuing_authorization_verification_data
-type issuing_authorization_verification_data() ::
    #{expiry_check := match | mismatch | not_provided,
      cvc_check := match | mismatch | not_provided,
      address_postal_code_check := match | mismatch | not_provided,
      address_line1_check := match | mismatch | not_provided}.
%% payment_method_options_card_present
-type payment_method_options_card_present() :: #{}.
%% subscription_payment_method_options_card
-type subscription_payment_method_options_card() ::
    #{request_three_d_secure => any | automatic | null,
      mandate_options => invoice_mandate_options_card()}.
%% charge_transfer_data
-type charge_transfer_data() ::
    #{destination := binary() | account(), amount => integer() | null}.
%% invoice_setting_custom_field
-type invoice_setting_custom_field() :: #{value := binary(), name := binary()}.
%% payment_method_details
-type payment_method_details() ::
    #{wechat_pay => payment_method_details_wechat_pay(),
      wechat => payment_method_details_wechat(),
      type := binary(),
      stripe_account => payment_method_details_stripe_account(),
      sofort => payment_method_details_sofort(),
      sepa_debit => payment_method_details_sepa_debit(),
      p24 => payment_method_details_p24(),
      oxxo => payment_method_details_oxxo(),
      multibanco => payment_method_details_multibanco(),
      klarna => payment_method_details_klarna(),
      interac_present => payment_method_details_interac_present(),
      ideal => payment_method_details_ideal(),
      grabpay => payment_method_details_grabpay(),
      giropay => payment_method_details_giropay(),
      fpx => payment_method_details_fpx(),
      eps => payment_method_details_eps(),
      card_present => payment_method_details_card_present(),
      card => payment_method_details_card(),
      boleto => payment_method_details_boleto(),
      bancontact => payment_method_details_bancontact(),
      bacs_debit => payment_method_details_bacs_debit(),
      au_becs_debit => payment_method_details_au_becs_debit(),
      alipay => payment_flows_private_payment_methods_alipay_details(),
      afterpay_clearpay => payment_method_details_afterpay_clearpay(),
      acss_debit => payment_method_details_acss_debit(),
      ach_debit => payment_method_details_ach_debit(),
      ach_credit_transfer => payment_method_details_ach_credit_transfer()}.
%% package_dimensions
-type package_dimensions() ::
    #{width := number(),
      weight := number(),
      length := number(),
      height := number()}.
%% issuing.card
%%
%% You can [create physical or virtual
%% cards](https://stripe.com/docs/issuing/cards) that are issued to
%% cardholders.
-type issuing_card() ::
    #{wallets => issuing_card_wallets(),
      type := physical | virtual,
      status := active | canceled | inactive,
      spending_controls := issuing_card_authorization_controls(),
      shipping => issuing_card_shipping(),
      replacement_reason => damaged | expired | lost | stolen | null,
      replacement_for => binary() | issuing_card(),
      replaced_by => binary() | issuing_card(),
      object := 'issuing.card',
      number => binary(),
      metadata := json:value(),
      livemode := boolean(),
      last4 := binary(),
      id := binary(),
      exp_year := integer(),
      exp_month := integer(),
      cvc => binary(),
      currency := binary(),
      created := integer(),
      cardholder := issuing_cardholder(),
      cancellation_reason => lost | stolen | null,
      brand := binary()}.
%% deleted_webhook_endpoint
-type deleted_webhook_endpoint() ::
    #{object := webhook_endpoint,
      id := binary(),
      deleted := boolean()}.
%% recurring
-type recurring() ::
    #{usage_type := licensed | metered,
      interval_count := integer(),
      interval := day | month | week | year,
      aggregate_usage => last_during_period | last_ever | max | sum | null}.
%% account_dashboard_settings
-type account_dashboard_settings() ::
    #{timezone => binary() | null, display_name => binary() | null}.
%% promotion_codes_resource_restrictions
-type promotion_codes_resource_restrictions() ::
    #{minimum_amount_currency => binary() | null,
      minimum_amount => integer() | null,
      first_time_transaction := boolean()}.
%% issuing_authorization_pending_request
-type issuing_authorization_pending_request() ::
    #{merchant_currency := binary(),
      merchant_amount := integer(),
      is_amount_controllable := boolean(),
      currency := binary(),
      amount_details => issuing_authorization_amount_details(),
      amount := integer()}.
%% setup_intent_payment_method_options_mandate_options_sepa_debit
-type setup_intent_payment_method_options_mandate_options_sepa_debit() :: #{}.
%% mandate_sepa_debit
-type mandate_sepa_debit() :: #{url := binary(), reference := binary()}.
%% invoice_threshold_reason
-type invoice_threshold_reason() ::
    #{item_reasons := [invoice_item_threshold_reason()], amount_gte => integer() | null}.
%% payment_method_details_interac_present
-type payment_method_details_interac_present() ::
    #{receipt => payment_method_details_interac_present_receipt(),
      read_method =>
          contact_emv |
          contactless_emv |
          contactless_magstripe_mode |
          magnetic_stripe_fallback |
          magnetic_stripe_track2 |
          null,
      preferred_locales => [binary()] | null,
      network => binary() | null,
      last4 => binary() | null,
      generated_card => binary() | null,
      funding => binary() | null,
      fingerprint => binary() | null,
      exp_year := integer(),
      exp_month := integer(),
      emv_auth_data => binary() | null,
      country => binary() | null,
      cardholder_name => binary() | null,
      brand => binary() | null}.
%% refund
%%
%% `Refund` objects allow you to refund a charge that has previously
%% been created but not yet refunded. Funds will be refunded to the
%% credit or debit card that was originally charged.
%%
%% Related guide: [Refunds](https://stripe.com/docs/refunds).
-type refund() ::
    #{transfer_reversal => binary() | transfer_reversal(),
      status => binary() | null,
      source_transfer_reversal => binary() | transfer_reversal(),
      receipt_number => binary() | null,
      reason =>
          duplicate | expired_uncaptured_charge | fraudulent | requested_by_customer | null,
      payment_intent => binary() | payment_intent(),
      object := refund,
      metadata => json:value() | null,
      id := binary(),
      failure_reason => binary(),
      failure_balance_transaction => binary() | balance_transaction(),
      description => binary(),
      currency := binary(),
      created := integer(),
      charge => binary() | charge(),
      balance_transaction => binary() | balance_transaction(),
      amount := integer()}.
%% transform_usage
-type transform_usage() :: #{round := down | up, divide_by := integer()}.
%% setup_attempt_payment_method_details_card_present
-type setup_attempt_payment_method_details_card_present() ::
    #{generated_card => binary() | payment_method()}.
%% price_tier
-type price_tier() ::
    #{up_to => integer() | null,
      unit_amount_decimal => binary() | null,
      unit_amount => integer() | null,
      flat_amount_decimal => binary() | null,
      flat_amount => integer() | null}.
%% checkout_boleto_payment_method_options
-type checkout_boleto_payment_method_options() :: #{expires_after_days := integer()}.
%% balance_transaction
%%
%% Balance transactions represent funds moving through your Stripe
%% account. They're created for every type of transaction that comes
%% into or flows out of your Stripe account balance.
%%
%% Related guide: [Balance Transaction
%% Types](https://stripe.com/docs/reports/balance-transaction-types).
-type balance_transaction() ::
    #{type :=
          adjustment | advance | advance_funding | anticipation_repayment | application_fee |
          application_fee_refund | charge | connect_collection_transfer | contribution |
          issuing_authorization_hold | issuing_authorization_release | issuing_dispute |
          issuing_transaction | payment | payment_failure_refund | payment_refund | payout |
          payout_cancel | payout_failure | refund | refund_failure | reserve_transaction |
          reserved_funds | stripe_fee | stripe_fx_fee | tax_fee | topup | topup_reversal |
          transfer | transfer_cancel | transfer_failure | transfer_refund,
      status := binary(),
      source =>
          binary() |
          application_fee() |
          charge() |
          connect_collection_transfer() |
          dispute() |
          fee_refund() |
          issuing_authorization() |
          issuing_dispute() |
          issuing_transaction() |
          payout() |
          platform_tax_fee() |
          refund() |
          reserve_transaction() |
          tax_deducted_at_source() |
          topup() |
          transfer() |
          transfer_reversal(),
      reporting_category := binary(),
      object := balance_transaction,
      net := integer(),
      id := binary(),
      fee_details := [fee()],
      fee := integer(),
      exchange_rate => number() | null,
      description => binary() | null,
      currency := binary(),
      created := integer(),
      available_on := integer(),
      amount := integer()}.
%% account_link
%%
%% Account Links are the means by which a Connect platform grants a
%% connected account permission to access Stripe-hosted
%% applications, such as Connect Onboarding.
%%
%% Related guide: [Connect
%% Onboarding](https://stripe.com/docs/connect/connect-onboarding).
-type account_link() ::
    #{url := binary(),
      object := account_link,
      expires_at := integer(),
      created := integer()}.
%% payment_flows_private_payment_methods_alipay
-type payment_flows_private_payment_methods_alipay() :: #{}.
%% quotes_resource_computed
-type quotes_resource_computed() ::
    #{upfront := quotes_resource_upfront(), recurring => quotes_resource_recurring()}.
%% payment_method_details_card_wallet_visa_checkout
-type payment_method_details_card_wallet_visa_checkout() ::
    #{shipping_address => address(),
      name => binary() | null,
      email => binary() | null,
      billing_address => address()}.
%% payment_intent_payment_method_options_eps
-type payment_intent_payment_method_options_eps() :: #{setup_future_usage => none}.
%% promotion_code
%%
%% A Promotion Code represents a customer-redeemable code for a
%% coupon. It can be used to create multiple codes for a single
%% coupon.
-type promotion_code() ::
    #{times_redeemed := integer(),
      restrictions := promotion_codes_resource_restrictions(),
      object := promotion_code,
      metadata => json:value() | null,
      max_redemptions => integer() | null,
      livemode := boolean(),
      id := binary(),
      expires_at => integer() | null,
      customer => binary() | customer() | deleted_customer(),
      created := integer(),
      coupon := coupon(),
      code := binary(),
      active := boolean()}.
%% identity.verification_session
%%
%% A VerificationSession guides you through the process of
%% collecting and verifying the identities of your users. It
%% contains details about the type of verification, such as what
%% [verification check](/docs/identity/verification-checks) to
%% perform. Only create one VerificationSession for each
%% verification in your system.
%%
%% A VerificationSession transitions through [multiple
%% statuses](/docs/identity/how-sessions-work) throughout its
%% lifetime as it progresses through the verification flow. The
%% VerificationSession contains the userâs verified data after
%% verification checks are complete.
%%
%% Related guide: [The Verification Sessions
%% API](https://stripe.com/docs/identity/verification-sessions)
-type identity_verification_session() ::
    #{verified_outputs => gelato_verified_outputs(),
      url => binary() | null,
      type := document | id_number,
      status := canceled | processing | requires_input | verified,
      redaction => verification_session_redaction(),
      options := gelato_verification_session_options(),
      object := 'identity.verification_session',
      metadata := json:value(),
      livemode := boolean(),
      last_verification_report => binary() | identity_verification_report(),
      last_error => gelato_session_last_error(),
      id := binary(),
      created := integer(),
      client_secret => binary() | null}.
%% payment_method_card_wallet
-type payment_method_card_wallet() ::
    #{visa_checkout => payment_method_card_wallet_visa_checkout(),
      type :=
          amex_express_checkout | apple_pay | google_pay | masterpass | samsung_pay | visa_checkout,
      samsung_pay => payment_method_card_wallet_samsung_pay(),
      masterpass => payment_method_card_wallet_masterpass(),
      google_pay => payment_method_card_wallet_google_pay(),
      dynamic_last4 => binary() | null,
      apple_pay => payment_method_card_wallet_apple_pay(),
      amex_express_checkout => payment_method_card_wallet_amex_express_checkout()}.
%% application
-type application() ::
    #{object := application,
      name => binary() | null,
      id := binary()}.
%% terminal.location
%%
%% A Location represents a grouping of readers.
%%
%% Related guide: [Fleet
%% Management](https://stripe.com/docs/terminal/fleet/locations).
-type terminal_location() ::
    #{object := 'terminal.location',
      metadata := json:value(),
      livemode := boolean(),
      id := binary(),
      display_name := binary(),
      address := address()}.
%% setup_intent_payment_method_options_acss_debit
-type setup_intent_payment_method_options_acss_debit() ::
    #{verification_method => automatic | instant | microdeposits,
      mandate_options => setup_intent_payment_method_options_mandate_options_acss_debit(),
      currency => cad | usd | null}.
%% payment_method_options_interac_present
-type payment_method_options_interac_present() :: #{}.
%% payment_method_giropay
-type payment_method_giropay() :: #{}.
%% payment_pages_checkout_session_after_expiration
-type payment_pages_checkout_session_after_expiration() ::
    #{recovery => payment_pages_checkout_session_after_expiration_recovery()}.
%% account
%%
%% This is an object representing a Stripe account. You can retrieve
%% it to see properties on the account like its current e-mail
%% address or if the account is enabled yet to make live charges.
%%
%% Some properties, marked below, are available only to platforms
%% that want to [create and manage Express or Custom
%% accounts](https://stripe.com/docs/connect/accounts).
-type account() ::
    #{type => custom | express | standard,
      tos_acceptance => account_tos_acceptance(),
      settings => account_settings(),
      requirements => account_requirements(),
      payouts_enabled => boolean(),
      object := account,
      metadata => json:value(),
      individual => person(),
      id := binary(),
      future_requirements => account_future_requirements(),
      external_accounts =>
          #{url := binary(),
            object := list,
            has_more := boolean(),
            data := [bank_account() | card()]},
      email => binary() | null,
      details_submitted => boolean(),
      default_currency => binary(),
      created => integer(),
      country => binary(),
      controller => account_unification_account_controller(),
      company => legal_entity_company(),
      charges_enabled => boolean(),
      capabilities => account_capabilities(),
      business_type => company | government_entity | individual | non_profit | null,
      business_profile => account_business_profile()}.
%% payment_method_card_checks
-type payment_method_card_checks() ::
    #{cvc_check => binary() | null,
      address_postal_code_check => binary() | null,
      address_line1_check => binary() | null}.
%% payment_method_options_bacs_debit
-type payment_method_options_bacs_debit() ::
    #{setup_future_usage => none | off_session | on_session}.
%% account_requirements
-type account_requirements() ::
    #{pending_verification => [binary()] | null,
      past_due => [binary()] | null,
      eventually_due => [binary()] | null,
      errors => [account_requirements_error()] | null,
      disabled_reason => binary() | null,
      currently_due => [binary()] | null,
      current_deadline => integer() | null,
      alternatives => [account_requirements_alternative()] | null}.
%% issuing_transaction_amount_details
-type issuing_transaction_amount_details() :: #{atm_fee => integer() | null}.
%% issuing_transaction_purchase_details
-type issuing_transaction_purchase_details() ::
    #{reference => binary() | null,
      receipt => [issuing_transaction_receipt_data()] | null,
      lodging => issuing_transaction_lodging_data(),
      fuel => issuing_transaction_fuel_data(),
      flight => issuing_transaction_flight_data()}.
%% payment_method_acss_debit
-type payment_method_acss_debit() ::
    #{transit_number => binary() | null,
      last4 => binary() | null,
      institution_number => binary() | null,
      fingerprint => binary() | null,
      bank_name => binary() | null}.
%% deleted_subscription_item
-type deleted_subscription_item() ::
    #{object := subscription_item,
      id := binary(),
      deleted := boolean()}.
%% product
%%
%% Products describe the specific goods or services you offer to
%% your customers. For example, you might offer a Standard and
%% Premium version of your goods or service; each version would be a
%% separate Product. They can be used in conjunction with
%% [Prices](https://stripe.com/docs/api#prices) to configure pricing
%% in Payment Links, Checkout, and Subscriptions.
%%
%% Related guides: [Set up a
%% subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription),
%% [share a Payment
%% Link](https://stripe.com/docs/payments/payment-links/overview),
%% [accept payments with
%% Checkout](https://stripe.com/docs/payments/accept-a-payment#create-product-prices-upfront),
%% and more about [Products and
%% Prices](https://stripe.com/docs/products-prices/overview)
-type product() ::
    #{url => binary() | null,
      updated := integer(),
      unit_label => binary() | null,
      tax_code => binary() | tax_code(),
      statement_descriptor => binary() | null,
      shippable => boolean() | null,
      package_dimensions => package_dimensions(),
      object := product,
      name := binary(),
      metadata := json:value(),
      livemode := boolean(),
      images := [binary()],
      id := binary(),
      description => binary() | null,
      created := integer(),
      active := boolean()}.
%% deleted_bank_account
-type deleted_bank_account() ::
    #{object := bank_account,
      id := binary(),
      deleted := boolean(),
      currency => binary() | null}.
%% legal_entity_company
-type legal_entity_company() ::
    #{verification => legal_entity_company_verification(),
      vat_id_provided => boolean(),
      tax_id_registrar => binary(),
      tax_id_provided => boolean(),
      structure =>
          free_zone_establishment |
          free_zone_llc |
          government_instrumentality |
          governmental_unit |
          incorporated_non_profit |
          limited_liability_partnership |
          llc |
          multi_member_llc |
          private_company |
          private_corporation |
          private_partnership |
          public_company |
          public_corporation |
          public_partnership |
          single_member_llc |
          sole_establishment |
          sole_proprietorship |
          tax_exempt_government_instrumentality |
          unincorporated_association |
          unincorporated_non_profit,
      phone => binary() | null,
      ownership_declaration => legal_entity_ubo_declaration(),
      owners_provided => boolean(),
      name_kanji => binary() | null,
      name_kana => binary() | null,
      name => binary() | null,
      executives_provided => boolean(),
      directors_provided => boolean(),
      address_kanji => legal_entity_japan_address(),
      address_kana => legal_entity_japan_address(),
      address => address()}.
%% sigma_scheduled_query_run_error
-type sigma_scheduled_query_run_error() :: #{message := binary()}.
%% account_future_requirements
-type account_future_requirements() ::
    #{pending_verification => [binary()] | null,
      past_due => [binary()] | null,
      eventually_due => [binary()] | null,
      errors => [account_requirements_error()] | null,
      disabled_reason => binary() | null,
      currently_due => [binary()] | null,
      current_deadline => integer() | null,
      alternatives => [account_requirements_alternative()] | null}.
%% issuing_dispute_not_received_evidence
-type issuing_dispute_not_received_evidence() ::
    #{product_type => merchandise | service | null,
      product_description => binary() | null,
      explanation => binary() | null,
      expected_at => integer() | null,
      additional_documentation => binary() | file()}.
%% issuing_dispute_service_not_as_described_evidence
-type issuing_dispute_service_not_as_described_evidence() ::
    #{received_at => integer() | null,
      explanation => binary() | null,
      cancellation_reason => binary() | null,
      canceled_at => integer() | null,
      additional_documentation => binary() | file()}.
%% card_generated_from_payment_method_details
-type card_generated_from_payment_method_details() ::
    #{type := binary(), card_present => payment_method_details_card_present()}.
%% issuing_transaction_fuel_data
-type issuing_transaction_fuel_data() ::
    #{volume_decimal => binary() | null,
      unit_cost_decimal := binary(),
      unit := binary(),
      type := binary()}.
%% payment_pages_checkout_session_automatic_tax
-type payment_pages_checkout_session_automatic_tax() ::
    #{status => complete | failed | requires_location_inputs | null, enabled := boolean()}.
%% shipping_rate_delivery_estimate
-type shipping_rate_delivery_estimate() ::
    #{minimum => shipping_rate_delivery_estimate_bound(),
      maximum => shipping_rate_delivery_estimate_bound()}.
%% payment_method_details_eps
-type payment_method_details_eps() ::
    #{verified_name => binary() | null,
      bank =>
          arzte_und_apotheker_bank | austrian_anadi_bank_ag | bank_austria |
          bankhaus_carl_spangler | bankhaus_schelhammer_und_schattera_ag | bawag_psk_ag |
          bks_bank_ag | brull_kallmus_bank_ag | btv_vier_lander_bank |
          capital_bank_grawe_gruppe_ag | dolomitenbank | easybank_ag | erste_bank_und_sparkassen |
          hypo_alpeadriabank_international_ag | hypo_bank_burgenland_aktiengesellschaft |
          hypo_noe_lb_fur_niederosterreich_u_wien | hypo_oberosterreich_salzburg_steiermark |
          hypo_tirol_bank_ag | hypo_vorarlberg_bank_ag | marchfelder_bank | oberbank_ag |
          raiffeisen_bankengruppe_osterreich | schoellerbank_ag | sparda_bank_wien |
          volksbank_gruppe | volkskreditbank_ag | vr_bank_braunau | null}.
%% charge_fraud_details
-type charge_fraud_details() :: #{user_report => binary(), stripe_report => binary()}.
%% setup_intent_next_action
-type setup_intent_next_action() ::
    #{verify_with_microdeposits => setup_intent_next_action_verify_with_microdeposits(),
      use_stripe_sdk => json:value(),
      type := binary(),
      redirect_to_url => setup_intent_next_action_redirect_to_url()}.
%% legal_entity_japan_address
-type legal_entity_japan_address() ::
    #{town => binary() | null,
      state => binary() | null,
      postal_code => binary() | null,
      line2 => binary() | null,
      line1 => binary() | null,
      country => binary() | null,
      city => binary() | null}.
%% deleted_external_account
-type deleted_external_account() :: deleted_bank_account() | deleted_card().
%% reserve_transaction
-type reserve_transaction() ::
    #{object := reserve_transaction,
      id := binary(),
      description => binary() | null,
      currency := binary(),
      amount := integer()}.
%% payment_intent_next_action_redirect_to_url
-type payment_intent_next_action_redirect_to_url() ::
    #{url => binary() | null, return_url => binary() | null}.
%% invoiceitem
%%
%% Sometimes you want to add a charge or credit to a customer, but
%% actually charge or credit the customer's card only at the end of
%% a regular billing cycle. This is useful for combining several
%% charges (to minimize per-transaction fees), or for having Stripe
%% tabulate your usage-based billing totals.
%%
%% Related guide: [Subscription
%% Invoices](https://stripe.com/docs/billing/invoices/subscription#adding-upcoming-invoice-items).
-type invoiceitem() ::
    #{unit_amount_decimal => binary() | null,
      unit_amount => integer() | null,
      tax_rates => [tax_rate()] | null,
      subscription_item => binary(),
      subscription => binary() | subscription(),
      quantity := integer(),
      proration := boolean(),
      price => price(),
      period := invoice_line_item_period(),
      object := invoiceitem,
      metadata => json:value() | null,
      livemode := boolean(),
      invoice => binary() | invoice(),
      id := binary(),
      discounts => [binary() | discount()] | null,
      discountable := boolean(),
      description => binary() | null,
      date := integer(),
      customer := binary() | customer() | deleted_customer(),
      currency := binary(),
      amount := integer()}.
%% setup_intent_next_action_verify_with_microdeposits
-type setup_intent_next_action_verify_with_microdeposits() ::
    #{hosted_verification_url := binary(), arrival_date := integer()}.
%% radar_review_resource_location
-type radar_review_resource_location() ::
    #{region => binary() | null,
      longitude => number() | null,
      latitude => number() | null,
      country => binary() | null,
      city => binary() | null}.
%% legal_entity_company_verification
-type legal_entity_company_verification() ::
    #{document := legal_entity_company_verification_document()}.
%% payment_method_card_generated_card
-type payment_method_card_generated_card() ::
    #{setup_attempt => binary() | setup_attempt(),
      payment_method_details => card_generated_from_payment_method_details(),
      charge => binary() | null}.
%% identity.verification_report
%%
%% A VerificationReport is the result of an attempt to collect and
%% verify data from a user. The collection of verification checks
%% performed is determined from the `type` and `options` parameters
%% used. You can find the result of each verification check
%% performed in the appropriate sub-resource: `document`,
%% `id_number`, `selfie`.
%%
%% Each VerificationReport contains a copy of any data collected by
%% the user as well as reference IDs which can be used to access
%% collected images through the
%% [FileUpload](https://stripe.com/docs/api/files) API. To configure
%% and create VerificationReports, use the
%% [VerificationSession](https://stripe.com/docs/api/identity/verification_sessions)
%% API.
%%
%% Related guides: [Accessing verification
%% results](https://stripe.com/docs/identity/verification-sessions#results).
-type identity_verification_report() ::
    #{verification_session => binary() | null,
      type := document | id_number,
      selfie => gelato_selfie_report(),
      options := gelato_verification_report_options(),
      object := 'identity.verification_report',
      livemode := boolean(),
      id_number => gelato_id_number_report(),
      id := binary(),
      document => gelato_document_report(),
      created := integer()}.
%% reporting.report_run
%%
%% The Report Run object represents an instance of a report type
%% generated with specific run parameters. Once the object is
%% created, Stripe begins processing the report. When the report has
%% finished running, it will give you a reference to a file where
%% you can retrieve your results. For an overview, see [API Access
%% to Reports](https://stripe.com/docs/reporting/statements/api).
%%
%% Note that certain report types can only be run based on your
%% live-mode data (not test-mode data), and will error when queried
%% without a [live-mode API
%% key](https://stripe.com/docs/keys#test-live-modes).
-type reporting_report_run() ::
    #{succeeded_at => integer() | null,
      status := binary(),
      result => file(),
      report_type := binary(),
      parameters := financial_reporting_finance_report_run_run_parameters(),
      object := 'reporting.report_run',
      livemode := boolean(),
      id := binary(),
      error => binary() | null,
      created := integer()}.
%% sepa_debit_generated_from
-type sepa_debit_generated_from() ::
    #{setup_attempt => binary() | setup_attempt(), charge => binary() | charge()}.
%% account_bacs_debit_payments_settings
-type account_bacs_debit_payments_settings() :: #{display_name => binary()}.
%% payment_intent_next_action_alipay_handle_redirect
-type payment_intent_next_action_alipay_handle_redirect() ::
    #{url => binary() | null,
      return_url => binary() | null,
      native_url => binary() | null,
      native_data => binary() | null}.
%% financial_reporting_finance_report_run_run_parameters
-type financial_reporting_finance_report_run_run_parameters() ::
    #{timezone => binary(),
      reporting_category => binary(),
      payout => binary(),
      interval_start => integer(),
      interval_end => integer(),
      currency => binary(),
      connected_account => binary(),
      columns => [binary()]}.
%% payment_links_resource_completion_behavior_confirmation_page
-type payment_links_resource_completion_behavior_confirmation_page() ::
    #{custom_message => binary() | null}.
%% subscription_schedule_add_invoice_item
%%
%% An Add Invoice Item describes the prices and quantities that will
%% be added as pending invoice items when entering a phase.
-type subscription_schedule_add_invoice_item() ::
    #{tax_rates => [tax_rate()] | null,
      quantity => integer() | null,
      price := binary() | price() | deleted_price()}.
%% three_d_secure_usage
-type three_d_secure_usage() :: #{supported := boolean()}.
%% source_type_sepa_debit
-type source_type_sepa_debit() ::
    #{mandate_url => binary() | null,
      mandate_reference => binary() | null,
      last4 => binary() | null,
      fingerprint => binary() | null,
      country => binary() | null,
      branch_code => binary() | null,
      bank_code => binary() | null}.
%% payment_method_details_card_wallet_samsung_pay
-type payment_method_details_card_wallet_samsung_pay() :: #{}.
%% gelato_verification_report_options
-type gelato_verification_report_options() ::
    #{id_number => gelato_report_id_number_options(),
      document => gelato_report_document_options()}.
%% subscriptions_resource_payment_settings
-type subscriptions_resource_payment_settings() ::
    #{payment_method_types =>
          [ach_credit_transfer |
           ach_debit |
           acss_debit |
           au_becs_debit |
           bacs_debit |
           bancontact |
           boleto |
           card |
           fpx |
           giropay |
           grabpay |
           ideal |
           sepa_debit |
           sofort |
           wechat_pay] |
          null,
      payment_method_options => subscriptions_resource_payment_method_options()}.
%% customer_balance_transaction
%%
%% Each customer has a
%% [`balance`](https://stripe.com/docs/api/customers/object#customer_object-balance)
%% value, which denotes a debit or credit that's automatically
%% applied to their next invoice upon finalization. You may modify
%% the value directly by using the [update customer
%% API](https://stripe.com/docs/api/customers/update), or by
%% creating a Customer Balance Transaction, which increments or
%% decrements the customer's `balance` by the specified `amount`.
%%
%% Related guide: [Customer
%% Balance](https://stripe.com/docs/billing/customer/balance) to
%% learn more.
-type customer_balance_transaction() ::
    #{type :=
          adjustment |
          applied_to_invoice |
          credit_note |
          initial |
          invoice_too_large |
          invoice_too_small |
          migration |
          unapplied_from_invoice |
          unspent_receiver_credit,
      object := customer_balance_transaction,
      metadata => json:value() | null,
      livemode := boolean(),
      invoice => binary() | invoice(),
      id := binary(),
      ending_balance := integer(),
      description => binary() | null,
      customer := binary() | customer(),
      currency := binary(),
      credit_note => binary() | credit_note(),
      created := integer(),
      amount := integer()}.
%% rule
-type rule() ::
    #{predicate := binary(),
      id := binary(),
      action := binary()}.
%% payment_method_details_card
-type payment_method_details_card() ::
    #{wallet => payment_method_details_card_wallet(),
      three_d_secure => three_d_secure_details(),
      network => binary() | null,
      last4 => binary() | null,
      installments => payment_method_details_card_installments(),
      funding => binary() | null,
      fingerprint => binary() | null,
      exp_year := integer(),
      exp_month := integer(),
      country => binary() | null,
      checks => payment_method_details_card_checks(),
      brand => binary() | null}.
%% issuing_card_google_pay
-type issuing_card_google_pay() ::
    #{ineligible_reason =>
          missing_agreement | missing_cardholder_contact | unsupported_region | null,
      eligible := boolean()}.
%% payment_intent_payment_method_options_mandate_options_acss_debit
-type payment_intent_payment_method_options_mandate_options_acss_debit() ::
    #{transaction_type => business | personal | null,
      payment_schedule => combined | interval | sporadic | null,
      interval_description => binary() | null,
      custom_mandate_url => binary()}.
%% mandate_single_use
-type mandate_single_use() :: #{currency := binary(), amount := integer()}.
%% payment_method_options_giropay
-type payment_method_options_giropay() :: #{setup_future_usage => none}.
%% coupon_applies_to
-type coupon_applies_to() :: #{products := [binary()]}.
%% invoice_payment_method_options_acss_debit
-type invoice_payment_method_options_acss_debit() ::
    #{verification_method => automatic | instant | microdeposits,
      mandate_options => invoice_payment_method_options_acss_debit_mandate_options()}.
%% deleted_alipay_account
-type deleted_alipay_account() ::
    #{object := alipay_account,
      id := binary(),
      deleted := boolean()}.
%% issuing_cardholder_spending_limit
-type issuing_cardholder_spending_limit() ::
    #{interval := all_time | daily | monthly | per_authorization | weekly | yearly,
      categories =>
          [ac_refrigeration_repair | accounting_bookkeeping_services | advertising_services |
           agricultural_cooperative | airlines_air_carriers | airports_flying_fields |
           ambulance_services | amusement_parks_carnivals | antique_reproductions | antique_shops |
           aquariums | architectural_surveying_services | art_dealers_and_galleries |
           artists_supply_and_craft_shops | auto_and_home_supply_stores | auto_body_repair_shops |
           auto_paint_shops | auto_service_shops | automated_cash_disburse |
           automated_fuel_dispensers | automobile_associations |
           automotive_parts_and_accessories_stores | automotive_tire_stores |
           bail_and_bond_payments | bakeries | bands_orchestras | barber_and_beauty_shops |
           betting_casino_gambling | bicycle_shops | billiard_pool_establishments | boat_dealers |
           boat_rentals_and_leases | book_stores | books_periodicals_and_newspapers |
           bowling_alleys | bus_lines | business_secretarial_schools | buying_shopping_services |
           cable_satellite_and_other_pay_television_and_radio |
           camera_and_photographic_supply_stores | candy_nut_and_confectionery_stores |
           car_and_truck_dealers_new_used | car_and_truck_dealers_used_only | car_rental_agencies |
           car_washes | carpentry_services | carpet_upholstery_cleaning | caterers |
           charitable_and_social_service_organizations_fundraising | chemicals_and_allied_products |
           child_care_services | childrens_and_infants_wear_stores | chiropodists_podiatrists |
           chiropractors | cigar_stores_and_stands | civic_social_fraternal_associations |
           cleaning_and_maintenance | clothing_rental | colleges_universities |
           commercial_equipment | commercial_footwear | commercial_photography_art_and_graphics |
           commuter_transport_and_ferries | computer_network_services | computer_programming |
           computer_repair | computer_software_stores | computers_peripherals_and_software |
           concrete_work_services | construction_materials | consulting_public_relations |
           correspondence_schools | cosmetic_stores | counseling_services | country_clubs |
           courier_services | court_costs | credit_reporting_agencies | cruise_lines |
           dairy_products_stores | dance_hall_studios_schools | dating_escort_services |
           dentists_orthodontists | department_stores | detective_agencies |
           digital_goods_applications | digital_goods_games | digital_goods_large_volume |
           digital_goods_media | direct_marketing_catalog_merchant |
           direct_marketing_combination_catalog_and_retail_merchant |
           direct_marketing_inbound_telemarketing | direct_marketing_insurance_services |
           direct_marketing_other | direct_marketing_outbound_telemarketing |
           direct_marketing_subscription | direct_marketing_travel | discount_stores | doctors |
           door_to_door_sales | drapery_window_covering_and_upholstery_stores | drinking_places |
           drug_stores_and_pharmacies | drugs_drug_proprietaries_and_druggist_sundries |
           dry_cleaners | durable_goods | duty_free_stores | eating_places_restaurants |
           educational_services | electric_razor_stores | electrical_parts_and_equipment |
           electrical_services | electronics_repair_shops | electronics_stores |
           elementary_secondary_schools | employment_temp_agencies | equipment_rental |
           exterminating_services | family_clothing_stores | fast_food_restaurants |
           financial_institutions | fines_government_administrative_entities |
           fireplace_fireplace_screens_and_accessories_stores | floor_covering_stores | florists |
           florists_supplies_nursery_stock_and_flowers | freezer_and_locker_meat_provisioners |
           fuel_dealers_non_automotive | funeral_services_crematories |
           furniture_home_furnishings_and_equipment_stores_except_appliances |
           furniture_repair_refinishing | furriers_and_fur_shops | general_services |
           gift_card_novelty_and_souvenir_shops | glass_paint_and_wallpaper_stores |
           glassware_crystal_stores | golf_courses_public | government_services |
           grocery_stores_supermarkets | hardware_equipment_and_supplies | hardware_stores |
           health_and_beauty_spas | hearing_aids_sales_and_supplies | heating_plumbing_a_c |
           hobby_toy_and_game_shops | home_supply_warehouse_stores | hospitals |
           hotels_motels_and_resorts | household_appliance_stores | industrial_supplies |
           information_retrieval_services | insurance_default | insurance_underwriting_premiums |
           intra_company_purchases | jewelry_stores_watches_clocks_and_silverware_stores |
           landscaping_services | laundries | laundry_cleaning_services | legal_services_attorneys |
           luggage_and_leather_goods_stores | lumber_building_materials_stores |
           manual_cash_disburse | marinas_service_and_supplies | masonry_stonework_and_plaster |
           massage_parlors | medical_and_dental_labs |
           medical_dental_ophthalmic_and_hospital_equipment_and_supplies | medical_services |
           membership_organizations | mens_and_boys_clothing_and_accessories_stores |
           mens_womens_clothing_stores | metal_service_centers | miscellaneous |
           miscellaneous_apparel_and_accessory_shops | miscellaneous_auto_dealers |
           miscellaneous_business_services | miscellaneous_food_stores |
           miscellaneous_general_merchandise | miscellaneous_general_services |
           miscellaneous_home_furnishing_specialty_stores | miscellaneous_publishing_and_printing |
           miscellaneous_recreation_services | miscellaneous_repair_shops |
           miscellaneous_specialty_retail | mobile_home_dealers | motion_picture_theaters |
           motor_freight_carriers_and_trucking | motor_homes_dealers |
           motor_vehicle_supplies_and_new_parts | motorcycle_shops_and_dealers |
           motorcycle_shops_dealers | music_stores_musical_instruments_pianos_and_sheet_music |
           news_dealers_and_newsstands | non_fi_money_orders |
           non_fi_stored_value_card_purchase_load | nondurable_goods |
           nurseries_lawn_and_garden_supply_stores | nursing_personal_care |
           office_and_commercial_furniture | opticians_eyeglasses | optometrists_ophthalmologist |
           orthopedic_goods_prosthetic_devices | osteopaths | package_stores_beer_wine_and_liquor |
           paints_varnishes_and_supplies | parking_lots_garages | passenger_railways | pawn_shops |
           pet_shops_pet_food_and_supplies | petroleum_and_petroleum_products | photo_developing |
           photographic_photocopy_microfilm_equipment_and_supplies | photographic_studios |
           picture_video_production | piece_goods_notions_and_other_dry_goods |
           plumbing_heating_equipment_and_supplies | political_organizations |
           postal_services_government_only | precious_stones_and_metals_watches_and_jewelry |
           professional_services | public_warehousing_and_storage | quick_copy_repro_and_blueprint |
           railroads | real_estate_agents_and_managers_rentals | record_stores |
           recreational_vehicle_rentals | religious_goods_stores | religious_organizations |
           roofing_siding_sheet_metal | secretarial_support_services | security_brokers_dealers |
           service_stations | sewing_needlework_fabric_and_piece_goods_stores |
           shoe_repair_hat_cleaning | shoe_stores | small_appliance_repair | snowmobile_dealers |
           special_trade_services | specialty_cleaning | sporting_goods_stores |
           sporting_recreation_camps | sports_and_riding_apparel_stores | sports_clubs_fields |
           stamp_and_coin_stores | stationary_office_supplies_printing_and_writing_paper |
           stationery_stores_office_and_school_supply_stores | swimming_pools_sales |
           t_ui_travel_germany | tailors_alterations | tax_payments_government_agencies |
           tax_preparation_services | taxicabs_limousines |
           telecommunication_equipment_and_telephone_sales | telecommunication_services |
           telegraph_services | tent_and_awning_shops | testing_laboratories |
           theatrical_ticket_agencies | timeshares | tire_retreading_and_repair |
           tolls_bridge_fees | tourist_attractions_and_exhibits | towing_services |
           trailer_parks_campgrounds | transportation_services | travel_agencies_tour_operators |
           truck_stop_iteration | truck_utility_trailer_rentals |
           typesetting_plate_making_and_related_services | typewriter_stores |
           u_s_federal_government_agencies_or_departments | uniforms_commercial_clothing |
           used_merchandise_and_secondhand_stores | utilities | variety_stores |
           veterinary_services | video_amusement_game_supplies | video_game_arcades |
           video_tape_rental_stores | vocational_trade_schools | watch_jewelry_repair |
           welding_repair | wholesale_clubs | wig_and_toupee_stores | wires_money_orders |
           womens_accessory_and_specialty_shops | womens_ready_to_wear_stores |
           wrecking_and_salvage_yards] |
          null,
      amount := integer()}.
%% bitcoin_receiver
-type bitcoin_receiver() ::
    #{used_for_payment => boolean() | null,
      uncaptured_funds := boolean(),
      transactions =>
          #{url := binary(),
            object := list,
            has_more := boolean(),
            data := [bitcoin_transaction()]},
      refund_address => binary() | null,
      payment => binary() | null,
      object := bitcoin_receiver,
      metadata => json:value() | null,
      livemode := boolean(),
      inbound_address := binary(),
      id := binary(),
      filled := boolean(),
      email => binary() | null,
      description => binary() | null,
      customer => binary() | null,
      currency := binary(),
      created := integer(),
      bitcoin_uri := binary(),
      bitcoin_amount_received := integer(),
      bitcoin_amount := integer(),
      amount_received := integer(),
      amount := integer(),
      active := boolean()}.
%% issuing_cardholder_individual
-type issuing_cardholder_individual() ::
    #{verification => issuing_cardholder_verification(),
      last_name := binary(),
      first_name := binary(),
      dob => issuing_cardholder_individual_dob()}.
%% status_transitions
-type status_transitions() ::
    #{returned => integer() | null,
      paid => integer() | null,
      fulfiled => integer() | null,
      canceled => integer() | null}.
%% payment_intent_next_action
-type payment_intent_next_action() ::
    #{wechat_pay_redirect_to_ios_app =>
          payment_intent_next_action_wechat_pay_redirect_to_ios_app(),
      wechat_pay_redirect_to_android_app =>
          payment_intent_next_action_wechat_pay_redirect_to_android_app(),
      wechat_pay_display_qr_code => payment_intent_next_action_wechat_pay_display_qr_code(),
      verify_with_microdeposits => payment_intent_next_action_verify_with_microdeposits(),
      use_stripe_sdk => json:value(),
      type := binary(),
      redirect_to_url => payment_intent_next_action_redirect_to_url(),
      oxxo_display_details => payment_intent_next_action_display_oxxo_details(),
      boleto_display_details => payment_intent_next_action_boleto(),
      alipay_handle_redirect => payment_intent_next_action_alipay_handle_redirect()}.
%% payment_method_options_card_installments
-type payment_method_options_card_installments() ::
    #{plan => payment_method_details_card_installments_plan(),
      enabled := boolean(),
      available_plans => [payment_method_details_card_installments_plan()] | null}.
%% setup_intent_payment_method_options_mandate_options_acss_debit
-type setup_intent_payment_method_options_mandate_options_acss_debit() ::
    #{transaction_type => business | personal | null,
      payment_schedule => combined | interval | sporadic | null,
      interval_description => binary() | null,
      default_for => [invoice | subscription],
      custom_mandate_url => binary()}.
%% order
%%
%% Order objects are created to handle end customers' purchases of
%% previously defined
%% [products](https://stripe.com/docs/api#products). You can create,
%% retrieve, and pay individual orders, as well as list all orders.
%% Orders are identified by a unique, random ID.
%%
%% Related guide: [Tax, Shipping, and
%% Inventory](https://stripe.com/docs/orders).
-type order() ::
    #{upstream_id => binary(),
      updated => integer() | null,
      status_transitions => status_transitions(),
      status := binary(),
      shipping_methods => [shipping_method()] | null,
      shipping => shipping(),
      selected_shipping_method => binary() | null,
      returns =>
          #{url := binary(),
            object := list,
            has_more := boolean(),
            data := [order_return()]},
      object := order,
      metadata => json:value() | null,
      livemode := boolean(),
      items := [order_item()],
      id := binary(),
      external_coupon_code => binary(),
      email => binary() | null,
      customer => binary() | customer() | deleted_customer(),
      currency := binary(),
      created := integer(),
      charge => binary() | charge(),
      application_fee => integer() | null,
      application => binary() | null,
      amount_returned => integer() | null,
      amount := integer()}.
%% billing_details
-type billing_details() ::
    #{phone => binary() | null,
      name => binary() | null,
      email => binary() | null,
      address => address()}.
%% payment_method_details_sepa_debit
-type payment_method_details_sepa_debit() ::
    #{mandate => binary() | null,
      last4 => binary() | null,
      fingerprint => binary() | null,
      country => binary() | null,
      branch_code => binary() | null,
      bank_code => binary() | null}.
%% source_type_bancontact
-type source_type_bancontact() ::
    #{statement_descriptor => binary() | null,
      preferred_language => binary() | null,
      iban_last4 => binary() | null,
      bic => binary() | null,
      bank_name => binary() | null,
      bank_code => binary() | null}.
%% deleted_price
-type deleted_price() ::
    #{object := price,
      id := binary(),
      deleted := boolean()}.
%% source_type_au_becs_debit
-type source_type_au_becs_debit() ::
    #{last4 => binary() | null,
      fingerprint => binary() | null,
      bsb_number => binary() | null}.
%% source_receiver_flow
-type source_receiver_flow() ::
    #{refund_attributes_status := binary(),
      refund_attributes_method := binary(),
      amount_returned := integer(),
      amount_received := integer(),
      amount_charged := integer(),
      address => binary() | null}.
%% quotes_resource_automatic_tax
-type quotes_resource_automatic_tax() ::
    #{status => complete | failed | requires_location_inputs | null, enabled := boolean()}.
%% payment_method_options_sofort
-type payment_method_options_sofort() ::
    #{setup_future_usage => none | off_session,
      preferred_language => de | en | es | fr | it | nl | pl | null}.
%% gelato_data_document_report_expiration_date
%%
%% Point in Time
-type gelato_data_document_report_expiration_date() ::
    #{year => integer() | null,
      month => integer() | null,
      day => integer() | null}.
%% account_business_profile
-type account_business_profile() ::
    #{url => binary() | null,
      support_url => binary() | null,
      support_phone => binary() | null,
      support_email => binary() | null,
      support_address => address(),
      product_description => binary() | null,
      name => binary() | null,
      mcc => binary() | null}.
%% exchange_rate
%%
%% `Exchange Rate` objects allow you to determine the rates that
%% Stripe is currently using to convert from one currency to
%% another. Since this number is variable throughout the day, there
%% are various reasons why you might want to know the current rate
%% (for example, to dynamically price an item for a user with a
%% default payment in a foreign currency).
%%
%% If you want a guarantee that the charge is made with a certain
%% exchange rate you expect is current, you can pass in
%% `exchange_rate` to charges endpoints. If the value is no longer
%% up to date, the charge won't go through. Please refer to our
%% [Exchange Rates API](https://stripe.com/docs/exchange-rates)
%% guide for more details.
-type exchange_rate() ::
    #{rates := json:value(),
      object := exchange_rate,
      id := binary()}.
%% payment_method_wechat_pay
-type payment_method_wechat_pay() :: #{}.
%% payment_intent_payment_method_options
-type payment_intent_payment_method_options() ::
    #{wechat_pay =>
          payment_method_options_wechat_pay() |
          payment_intent_type_specific_payment_method_options_client(),
      sofort =>
          payment_method_options_sofort() |
          payment_intent_type_specific_payment_method_options_client(),
      sepa_debit =>
          payment_intent_payment_method_options_sepa_debit() |
          payment_intent_type_specific_payment_method_options_client(),
      p24 =>
          payment_method_options_p24() |
          payment_intent_type_specific_payment_method_options_client(),
      oxxo =>
          payment_method_options_oxxo() |
          payment_intent_type_specific_payment_method_options_client(),
      klarna =>
          payment_method_options_klarna() |
          payment_intent_type_specific_payment_method_options_client(),
      interac_present =>
          payment_method_options_interac_present() |
          payment_intent_type_specific_payment_method_options_client(),
      ideal =>
          payment_method_options_ideal() |
          payment_intent_type_specific_payment_method_options_client(),
      grabpay =>
          payment_method_options_grabpay() |
          payment_intent_type_specific_payment_method_options_client(),
      giropay =>
          payment_method_options_giropay() |
          payment_intent_type_specific_payment_method_options_client(),
      fpx =>
          payment_method_options_fpx() |
          payment_intent_type_specific_payment_method_options_client(),
      eps =>
          payment_intent_payment_method_options_eps() |
          payment_intent_type_specific_payment_method_options_client(),
      card_present =>
          payment_method_options_card_present() |
          payment_intent_type_specific_payment_method_options_client(),
      card =>
          payment_intent_payment_method_options_card() |
          payment_intent_type_specific_payment_method_options_client(),
      boleto =>
          payment_method_options_boleto() |
          payment_intent_type_specific_payment_method_options_client(),
      bancontact =>
          payment_method_options_bancontact() |
          payment_intent_type_specific_payment_method_options_client(),
      bacs_debit =>
          payment_method_options_bacs_debit() |
          payment_intent_type_specific_payment_method_options_client(),
      au_becs_debit =>
          payment_intent_payment_method_options_au_becs_debit() |
          payment_intent_type_specific_payment_method_options_client(),
      alipay =>
          payment_method_options_alipay() |
          payment_intent_type_specific_payment_method_options_client(),
      afterpay_clearpay =>
          payment_method_options_afterpay_clearpay() |
          payment_intent_type_specific_payment_method_options_client(),
      acss_debit =>
          payment_intent_payment_method_options_acss_debit() |
          payment_intent_type_specific_payment_method_options_client()}.
%% invoice_item_threshold_reason
-type invoice_item_threshold_reason() ::
    #{usage_gte := integer(), line_item_ids := [binary()]}.
%% source_redirect_flow
-type source_redirect_flow() ::
    #{url := binary(),
      status := binary(),
      return_url := binary(),
      failure_reason => binary() | null}.
%% setup_intent_next_action_redirect_to_url
-type setup_intent_next_action_redirect_to_url() ::
    #{url => binary() | null, return_url => binary() | null}.
%% automatic_tax
-type automatic_tax() ::
    #{status => complete | failed | requires_location_inputs | null, enabled := boolean()}.
%% source
%%
%% `Source` objects allow you to accept a variety of payment
%% methods. They represent a customer's payment instrument, and can
%% be used with the Stripe API just like a `Card` object: once
%% chargeable, they can be charged, or can be attached to customers.
%%
%% Related guides: [Sources API](https://stripe.com/docs/sources)
%% and [Sources &
%% Customers](https://stripe.com/docs/sources/customers).
-type source() ::
    #{eps => source_type_eps(),
      owner => source_owner(),
      id := binary(),
      source_order => source_order(),
      klarna => source_type_klarna(),
      sepa_debit => source_type_sepa_debit(),
      flow := binary(),
      card_present => source_type_card_present(),
      au_becs_debit => source_type_au_becs_debit(),
      three_d_secure => source_type_three_d_secure(),
      bancontact => source_type_bancontact(),
      status := binary(),
      type :=
          ach_credit_transfer |
          ach_debit |
          acss_debit |
          alipay |
          au_becs_debit |
          bancontact |
          card |
          card_present |
          eps |
          giropay |
          ideal |
          klarna |
          multibanco |
          p24 |
          sepa_debit |
          sofort |
          three_d_secure |
          wechat,
      created := integer(),
      currency => binary() | null,
      p24 => source_type_p24(),
      sofort => source_type_sofort(),
      object := source,
      client_secret := binary(),
      wechat => source_type_wechat(),
      statement_descriptor => binary() | null,
      amount => integer() | null,
      ach_credit_transfer => source_type_ach_credit_transfer(),
      customer => binary(),
      receiver => source_receiver_flow(),
      usage => binary() | null,
      multibanco => source_type_multibanco(),
      metadata => json:value() | null,
      card => source_type_card(),
      code_verification => source_code_verification_flow(),
      ideal => source_type_ideal(),
      redirect => source_redirect_flow(),
      giropay => source_type_giropay(),
      alipay => source_type_alipay(),
      ach_debit => source_type_ach_debit(),
      acss_debit => source_type_acss_debit(),
      livemode := boolean()}.
%% payment_links_resource_completion_behavior_redirect
-type payment_links_resource_completion_behavior_redirect() :: #{url := binary()}.
%% setup_intent
%%
%% A SetupIntent guides you through the process of setting up and
%% saving a customer's payment credentials for future payments. For
%% example, you could use a SetupIntent to set up and save your
%% customer's card without immediately collecting a payment. Later,
%% you can use
%% [PaymentIntents](https://stripe.com/docs/api#payment_intents) to
%% drive the payment flow.
%%
%% Create a SetupIntent as soon as you're ready to collect your
%% customer's payment credentials. Do not maintain long-lived,
%% unconfirmed SetupIntents as they may no longer be valid. The
%% SetupIntent then transitions through multiple
%% [statuses](https://stripe.com/docs/payments/intents#intent-statuses)
%% as it guides you through the setup process.
%%
%% Successful SetupIntents result in payment credentials that are
%% optimized for future payments. For example, cardholders in
%% [certain regions](/guides/strong-customer-authentication) may
%% need to be run through [Strong Customer
%% Authentication](https://stripe.com/docs/strong-customer-authentication)
%% at the time of payment method collection in order to streamline
%% later [off-session
%% payments](https://stripe.com/docs/payments/setup-intents). If the
%% SetupIntent is used with a
%% [Customer](https://stripe.com/docs/api#setup_intent_object-customer),
%% upon success, it will automatically attach the resulting payment
%% method to that Customer. We recommend using SetupIntents or
%% [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage)
%% on PaymentIntents to save payment methods in order to prevent
%% saving invalid or unoptimized payment methods.
%%
%% By using SetupIntents, you ensure that your customers experience
%% the minimum set of required friction, even as regulations change
%% over time.
%%
%% Related guide: [Setup Intents
%% API](https://stripe.com/docs/payments/setup-intents).
-type setup_intent() ::
    #{usage := binary(),
      status :=
          canceled |
          processing |
          requires_action |
          requires_confirmation |
          requires_payment_method |
          succeeded,
      single_use_mandate => binary() | mandate(),
      payment_method_types := [binary()],
      payment_method_options => setup_intent_payment_method_options(),
      payment_method => binary() | payment_method(),
      on_behalf_of => binary() | account(),
      object := setup_intent,
      next_action => setup_intent_next_action(),
      metadata => json:value() | null,
      mandate => binary() | mandate(),
      livemode := boolean(),
      latest_attempt => binary() | setup_attempt(),
      last_setup_error => api_errors(),
      id := binary(),
      description => binary() | null,
      customer => binary() | customer() | deleted_customer(),
      created := integer(),
      client_secret => binary() | null,
      cancellation_reason => abandoned | duplicate | requested_by_customer | null,
      application => binary() | application()}.
%% issuing.dispute
%%
%% As a [card issuer](https://stripe.com/docs/issuing), you can
%% dispute transactions that the cardholder does not recognize,
%% suspects to be fraudulent, or has other issues with.
%%
%% Related guide: [Disputing
%% Transactions](https://stripe.com/docs/issuing/purchases/disputes)
-type issuing_dispute() ::
    #{transaction := binary() | issuing_transaction(),
      status := expired | lost | submitted | unsubmitted | won,
      object := 'issuing.dispute',
      metadata := json:value(),
      livemode := boolean(),
      id := binary(),
      evidence := issuing_dispute_evidence(),
      currency := binary(),
      created := integer(),
      balance_transactions => [balance_transaction()] | null,
      amount := integer()}.
%% payment_method_fpx
-type payment_method_fpx() ::
    #{bank :=
          affin_bank |
          agrobank |
          alliance_bank |
          ambank |
          bank_islam |
          bank_muamalat |
          bank_rakyat |
          bsn |
          cimb |
          deutsche_bank |
          hong_leong_bank |
          hsbc |
          kfh |
          maybank2e |
          maybank2u |
          ocbc |
          pb_enterprise |
          public_bank |
          rhb |
          standard_chartered |
          uob}.
%% subscription_schedule_configuration_item
%%
%% A phase item describes the price and quantity of a phase.
-type subscription_schedule_configuration_item() ::
    #{tax_rates => [tax_rate()] | null,
      quantity => integer(),
      price := binary() | price() | deleted_price(),
      billing_thresholds => subscription_item_billing_thresholds()}.
%% gelato_session_id_number_options
-type gelato_session_id_number_options() :: #{}.
%% payment_method_options_p24
-type payment_method_options_p24() :: #{setup_future_usage => none}.
%% mandate_acss_debit
-type mandate_acss_debit() ::
    #{transaction_type := business | personal,
      payment_schedule := combined | interval | sporadic,
      interval_description => binary() | null,
      default_for => [invoice | subscription]}.
%% file_link
%%
%% To share the contents of a `File` object with non-Stripe users,
%% you can create a `FileLink`. `FileLink`s contain a URL that can
%% be used to retrieve the contents of the file without
%% authentication.
-type file_link() ::
    #{url => binary() | null,
      object := file_link,
      metadata := json:value(),
      livemode := boolean(),
      id := binary(),
      file := binary() | file(),
      expires_at => integer() | null,
      expired := boolean(),
      created := integer()}.
%% legal_entity_ubo_declaration
-type legal_entity_ubo_declaration() ::
    #{user_agent => binary() | null,
      ip => binary() | null,
      date => integer() | null}.
%% payment_method_klarna
-type payment_method_klarna() ::
    #{dob => payment_flows_private_payment_methods_klarna_dob()}.
%% ephemeral_key
-type ephemeral_key() ::
    #{secret => binary(),
      object := ephemeral_key,
      livemode := boolean(),
      id := binary(),
      expires := integer(),
      created := integer()}.
%% fee_refund
%%
%% `Application Fee Refund` objects allow you to refund an
%% application fee that has previously been created but not yet
%% refunded. Funds will be refunded to the Stripe account from which
%% the fee was originally collected.
%%
%% Related guide: [Refunding Application
%% Fees](https://stripe.com/docs/connect/destination-charges#refunding-app-fee).
-type fee_refund() ::
    #{object := fee_refund,
      metadata => json:value() | null,
      id := binary(),
      fee := binary() | application_fee(),
      currency := binary(),
      created := integer(),
      balance_transaction => binary() | balance_transaction(),
      amount := integer()}.
%% billing_portal.configuration
%%
%% A portal configuration describes the functionality and behavior
%% of a portal session.
-type billing_portal_configuration() ::
    #{updated := integer(),
      object := 'billing_portal.configuration',
      metadata => json:value() | null,
      livemode := boolean(),
      is_default := boolean(),
      id := binary(),
      features := portal_features(),
      default_return_url => binary() | null,
      created := integer(),
      business_profile := portal_business_profile(),
      application => binary() | null,
      active := boolean()}.
%% source_transaction_ach_credit_transfer_data
-type source_transaction_ach_credit_transfer_data() ::
    #{routing_number => binary(),
      last4 => binary(),
      fingerprint => binary(),
      customer_data => binary()}.
%% deleted_sku
-type deleted_sku() ::
    #{object := sku,
      id := binary(),
      deleted := boolean()}.
%% payment_method_details_grabpay
-type payment_method_details_grabpay() :: #{transaction_id => binary() | null}.
%% payment_method_details_au_becs_debit
-type payment_method_details_au_becs_debit() ::
    #{mandate => binary(),
      last4 => binary() | null,
      fingerprint => binary() | null,
      bsb_number => binary() | null}.
%% event
%%
%% Events are our way of letting you know when something interesting
%% happens in your account. When an interesting event occurs, we
%% create a new `Event` object. For example, when a charge succeeds,
%% we create a `charge.succeeded` event; and when an invoice payment
%% attempt fails, we create an `invoice.payment_failed` event. Note
%% that many API requests may cause multiple events to be created.
%% For example, if you create a new subscription for a customer, you
%% will receive both a `customer.subscription.created` event and a
%% `charge.succeeded` event.
%%
%% Events occur when the state of another API resource changes. The
%% state of that resource at the time of the change is embedded in
%% the event's data field. For example, a `charge.succeeded` event
%% will contain a charge, and an `invoice.payment_failed` event will
%% contain an invoice.
%%
%% As with other API resources, you can use endpoints to retrieve an
%% [individual event](https://stripe.com/docs/api#retrieve_event) or
%% a [list of events](https://stripe.com/docs/api#list_events) from
%% the API. We also have a separate
%% [webhooks](http://en.wikipedia.org/wiki/Webhook) system for
%% sending the `Event` objects directly to an endpoint on your
%% server. Webhooks are managed in your [account
%% settings](https://dashboard.stripe.com/account/webhooks), and our
%% [Using Webhooks](https://stripe.com/docs/webhooks) guide will
%% help you get set up.
%%
%% When using [Connect](https://stripe.com/docs/connect), you can
%% also receive notifications of events that occur in connected
%% accounts. For these events, there will be an additional `account`
%% attribute in the received `Event` object.
%%
%% **NOTE:** Right now, access to events through the [Retrieve Event
%% API](https://stripe.com/docs/api#retrieve_event) is guaranteed
%% only for 30 days.
-type event() ::
    #{type := binary(),
      request => notification_event_request(),
      pending_webhooks := integer(),
      object := event,
      livemode := boolean(),
      id := binary(),
      data := notification_event_data(),
      created := integer(),
      api_version => binary() | null,
      account => binary()}.
%% payment_method_interac_present
-type payment_method_interac_present() :: #{}.
%% deleted_discount
-type deleted_discount() ::
    #{subscription => binary() | null,
      start := integer(),
      promotion_code => binary() | promotion_code(),
      object := discount,
      invoice_item => binary() | null,
      invoice => binary() | null,
      id := binary(),
      deleted := boolean(),
      customer => binary() | customer() | deleted_customer(),
      coupon := coupon(),
      checkout_session => binary() | null}.
%% source_transaction_sepa_credit_transfer_data
-type source_transaction_sepa_credit_transfer_data() ::
    #{sender_name => binary(),
      sender_iban => binary(),
      reference => binary()}.
%% issuing.cardholder
%%
%% An Issuing `Cardholder` object represents an individual or
%% business entity who is [issued](https://stripe.com/docs/issuing)
%% cards.
%%
%% Related guide: [How to create a
%% Cardholder](https://stripe.com/docs/issuing/cards#create-cardholder)
-type issuing_cardholder() ::
    #{type := company | individual,
      status := active | blocked | inactive,
      spending_controls => issuing_cardholder_authorization_controls(),
      requirements := issuing_cardholder_requirements(),
      phone_number => binary() | null,
      object := 'issuing.cardholder',
      name := binary(),
      metadata := json:value(),
      livemode := boolean(),
      individual => issuing_cardholder_individual(),
      id := binary(),
      email => binary() | null,
      created := integer(),
      company => issuing_cardholder_company(),
      billing := issuing_cardholder_address()}.
%% issuing_transaction_flight_data_leg
-type issuing_transaction_flight_data_leg() ::
    #{stopover_allowed => boolean() | null,
      service_class => binary() | null,
      flight_number => binary() | null,
      departure_airport_code => binary() | null,
      carrier => binary() | null,
      arrival_airport_code => binary() | null}.
%% gelato_report_document_options
-type gelato_report_document_options() ::
    #{require_matching_selfie => boolean(),
      require_live_capture => boolean(),
      require_id_number => boolean(),
      allowed_types => [driving_license | id_card | passport]}.
%% payment_method_card_wallet_amex_express_checkout
-type payment_method_card_wallet_amex_express_checkout() :: #{}.
%% account_sepa_debit_payments_settings
-type account_sepa_debit_payments_settings() :: #{creditor_id => binary()}.
%% portal_invoice_list
-type portal_invoice_list() :: #{enabled := boolean()}.
%% account_payout_settings
-type account_payout_settings() ::
    #{statement_descriptor => binary() | null,
      schedule := transfer_schedule(),
      debit_negative_balances := boolean()}.
%% sku
%%
%% Stores representations of [stock keeping
%% units](http://en.wikipedia.org/wiki/Stock_keeping_unit). SKUs
%% describe specific product variations, taking into account any
%% combination of: attributes, currency, and cost. For example, a
%% product may be a T-shirt, whereas a specific SKU represents the
%% `size: large`, `color: red` version of that shirt.
%%
%% Can also be used to manage inventory.
%%
%% Related guide: [Tax, Shipping, and
%% Inventory](https://stripe.com/docs/orders).
-type sku() ::
    #{updated := integer(),
      product := binary() | product(),
      price := integer(),
      package_dimensions => package_dimensions(),
      object := sku,
      metadata := json:value(),
      livemode := boolean(),
      inventory := sku_inventory(),
      image => binary() | null,
      id := binary(),
      currency := binary(),
      created := integer(),
      attributes := json:value(),
      active := boolean()}.
%% checkout.session
%%
%% A Checkout Session represents your customer's session as they pay
%% for one-time purchases or subscriptions through
%% [Checkout](https://stripe.com/docs/payments/checkout) or [Payment
%% Links](https://stripe.com/docs/payments/payment-links). We
%% recommend creating a new Session each time your customer attempts
%% to pay.
%%
%% Once payment is successful, the Checkout Session will contain a
%% reference to the
%% [Customer](https://stripe.com/docs/api/customers), and either the
%% successful
%% [PaymentIntent](https://stripe.com/docs/api/payment_intents) or
%% an active
%% [Subscription](https://stripe.com/docs/api/subscriptions).
%%
%% You can create a Checkout Session on your server and pass its ID
%% to the client to begin Checkout.
%%
%% Related guide: [Checkout Server
%% Quickstart](https://stripe.com/docs/payments/checkout/api).
-type checkout_session() ::
    #{shipping => shipping(),
      shipping_options := [payment_pages_checkout_session_shipping_option()],
      id := binary(),
      consent => payment_pages_checkout_session_consent(),
      status => complete | expired | open | null,
      cancel_url := binary(),
      billing_address_collection => auto | required | null,
      shipping_rate => binary() | shipping_rate(),
      allow_promotion_codes => boolean() | null,
      subscription => binary() | subscription(),
      url => binary() | null,
      amount_total => integer() | null,
      amount_subtotal => integer() | null,
      currency => binary() | null,
      tax_id_collection => payment_pages_checkout_session_tax_id_collection(),
      after_expiration => payment_pages_checkout_session_after_expiration(),
      client_reference_id => binary() | null,
      setup_intent => binary() | setup_intent(),
      automatic_tax := payment_pages_checkout_session_automatic_tax(),
      expires_at := integer(),
      total_details => payment_pages_checkout_session_total_details(),
      object := 'checkout.session',
      recovered_from => binary() | null,
      success_url := binary(),
      mode := payment | setup | subscription,
      submit_type => auto | book | donate | pay | null,
      customer => binary() | customer() | deleted_customer(),
      phone_number_collection => payment_pages_checkout_session_phone_number_collection(),
      customer_details => payment_pages_checkout_session_customer_details(),
      customer_email => binary() | null,
      payment_intent => binary() | payment_intent(),
      consent_collection => payment_pages_checkout_session_consent_collection(),
      shipping_address_collection =>
          payment_pages_checkout_session_shipping_address_collection(),
      locale =>
          auto | bg | cs | da | de | el | en | 'en-GB' | es | 'es-419' | et | fi | fil | fr |
          'fr-CA' | hr | hu | id | it | ja | ko | lt | lv | ms | mt | nb | nl | pl | pt | 'pt-BR' |
          ro | ru | sk | sl | sv | th | tr | vi | zh | 'zh-HK' | 'zh-TW' | null,
      payment_method_types := [binary()],
      metadata => json:value() | null,
      payment_link => binary() | payment_link(),
      customer_creation => always | if_required | null,
      line_items =>
          #{url := binary(),
            object := list,
            has_more := boolean(),
            data := [item()]},
      payment_method_options => checkout_session_payment_method_options(),
      livemode := boolean(),
      payment_status := no_payment_required | paid | unpaid}.
%% scheduled_query_run
%%
%% If you have [scheduled a Sigma
%% query](https://stripe.com/docs/sigma/scheduled-queries), you'll
%% receive a `sigma.scheduled_query_run.created` webhook each time
%% the query runs. The webhook contains a `ScheduledQueryRun`
%% object, which you can use to retrieve the query results.
-type scheduled_query_run() ::
    #{title := binary(),
      status := binary(),
      sql := binary(),
      result_available_until := integer(),
      object := scheduled_query_run,
      livemode := boolean(),
      id := binary(),
      file => file(),
      error => sigma_scheduled_query_run_error(),
      data_load_time := integer(),
      created := integer()}.
%% credit_note_tax_amount
-type credit_note_tax_amount() ::
    #{tax_rate := binary() | tax_rate(),
      inclusive := boolean(),
      amount := integer()}.
%% account_card_issuing_settings
-type account_card_issuing_settings() ::
    #{tos_acceptance => card_issuing_account_terms_of_service()}.
%% deleted_person
-type deleted_person() ::
    #{object := person,
      id := binary(),
      deleted := boolean()}.
%% payment_method_details_oxxo
-type payment_method_details_oxxo() :: #{number => binary() | null}.
%% payment_method_details_giropay
-type payment_method_details_giropay() ::
    #{verified_name => binary() | null,
      bic => binary() | null,
      bank_name => binary() | null,
      bank_code => binary() | null}.
%% payment_method_p24
-type payment_method_p24() ::
    #{bank =>
          alior_bank | bank_millennium | bank_nowy_bfg_sa | bank_pekao_sa | banki_spbdzielcze |
          blik | bnp_paribas | boz | citi_handlowy | credit_agricole | envelobank |
          etransfer_pocztowy24 | getin_bank | ideabank | ing | inteligo | mbank_mtransfer |
          nest_przelew | noble_pay | pbac_z_ipko | plus_bank | santander_przelew24 |
          tmobile_usbugi_bankowe | toyota_bank | volkswagen_bank | null}.
%% payment_method_grabpay
-type payment_method_grabpay() :: #{}.
%% source_type_alipay
-type source_type_alipay() ::
    #{statement_descriptor => binary() | null,
      native_url => binary() | null,
      data_string => binary() | null}.
%% networks
-type networks() :: #{preferred => binary() | null, available := [binary()]}.
%% source_order_item
-type source_order_item() ::
    #{type => binary() | null,
      quantity => integer(),
      parent => binary() | null,
      description => binary() | null,
      currency => binary() | null,
      amount => integer() | null}.
%% source_type_card_present
-type source_type_card_present() ::
    #{transaction_status_information => binary(),
      terminal_verification_results => binary(),
      reader => binary() | null,
      read_method => binary() | null,
      pos_entry_mode => binary(),
      pos_device_id => binary() | null,
      last4 => binary() | null,
      funding => binary() | null,
      fingerprint => binary(),
      exp_year => integer() | null,
      exp_month => integer() | null,
      evidence_transaction_certificate => binary() | null,
      evidence_customer_signature => binary() | null,
      emv_auth_data => binary(),
      dedicated_file_name => binary(),
      data_type => binary() | null,
      cvm_type => binary(),
      country => binary() | null,
      brand => binary() | null,
      authorization_response_code => binary(),
      authorization_code => binary() | null,
      application_preferred_name => binary(),
      application_cryptogram => binary()}.
%% transfer
%%
%% A `Transfer` object is created when you move funds between Stripe
%% accounts as part of Connect.
%%
%% Before April 6, 2017, transfers also represented movement of
%% funds from a Stripe account to a card or bank account. This
%% behavior has since been split out into a
%% [Payout](https://stripe.com/docs/api#payout_object) object, with
%% corresponding payout endpoints. For more information, read about
%% the [transfer/payout
%% split](https://stripe.com/docs/transfer-payout-split).
%%
%% Related guide: [Creating Separate Charges and
%% Transfers](https://stripe.com/docs/connect/charges-transfers).
-type transfer() ::
    #{transfer_group => binary() | null,
      source_type => binary() | null,
      source_transaction => binary() | charge(),
      reversed := boolean(),
      reversals :=
          #{url := binary(),
            object := list,
            has_more := boolean(),
            data := [transfer_reversal()]},
      object := transfer,
      metadata := json:value(),
      livemode := boolean(),
      id := binary(),
      destination_payment => binary() | charge(),
      destination => binary() | account(),
      description => binary() | null,
      currency := binary(),
      created := integer(),
      balance_transaction => binary() | balance_transaction(),
      amount_reversed := integer(),
      amount := integer()}.
%% mandate_payment_method_details
-type mandate_payment_method_details() ::
    #{type := binary(),
      sepa_debit => mandate_sepa_debit(),
      card => card_mandate_payment_method_details(),
      bacs_debit => mandate_bacs_debit(),
      au_becs_debit => mandate_au_becs_debit(),
      acss_debit => mandate_acss_debit()}.
%% quote
%%
%% A Quote is a way to model prices that you'd like to provide to a
%% customer. Once accepted, it will automatically create an invoice,
%% subscription or subscription schedule.
-type quote() ::
    #{default_tax_rates => [binary() | tax_rate()],
      id := binary(),
      transfer_data => quotes_resource_transfer_data(),
      application_fee_amount => integer() | null,
      number => binary() | null,
      from_quote => quotes_resource_from_quote(),
      status := accepted | canceled | draft | open,
      subscription => binary() | subscription(),
      amount_total := integer(),
      amount_subtotal := integer(),
      discounts := [binary() | discount()],
      created := integer(),
      currency => binary() | null,
      automatic_tax := quotes_resource_automatic_tax(),
      status_transitions := quotes_resource_status_transitions(),
      expires_at := integer(),
      total_details := quotes_resource_total_details(),
      invoice_settings => invoice_setting_quote_setting(),
      object := quote,
      invoice => binary() | invoice() | deleted_invoice(),
      customer => binary() | customer() | deleted_customer(),
      on_behalf_of => binary() | account(),
      subscription_schedule => binary() | subscription_schedule(),
      header => binary() | null,
      footer => binary() | null,
      description => binary() | null,
      subscription_data := quotes_resource_subscription_data(),
      metadata := json:value(),
      line_items =>
          #{url := binary(),
            object := list,
            has_more := boolean(),
            data := [item()]},
      collection_method := charge_automatically | send_invoice,
      livemode := boolean(),
      computed := quotes_resource_computed(),
      application_fee_percent => number() | null}.
%% payment_method_details_card_checks
-type payment_method_details_card_checks() ::
    #{cvc_check => binary() | null,
      address_postal_code_check => binary() | null,
      address_line1_check => binary() | null}.
%% subscription_schedules_resource_default_settings_automatic_tax
-type subscription_schedules_resource_default_settings_automatic_tax() ::
    #{enabled := boolean()}.
%% gelato_selfie_report_error
-type gelato_selfie_report_error() ::
    #{reason => binary() | null,
      code =>
          selfie_document_missing_photo |
          selfie_face_mismatch |
          selfie_manipulated |
          selfie_unverified_other |
          null}.
%% payment_intent_next_action_wechat_pay_redirect_to_ios_app
-type payment_intent_next_action_wechat_pay_redirect_to_ios_app() ::
    #{native_url := binary()}.
%% charge_outcome
-type charge_outcome() ::
    #{type := binary(),
      seller_message => binary() | null,
      rule => binary() | rule(),
      risk_score => integer(),
      risk_level => binary(),
      reason => binary() | null,
      network_status => binary() | null}.
%% radar.early_fraud_warning
%%
%% An early fraud warning indicates that the card issuer has
%% notified us that a charge may be fraudulent.
%%
%% Related guide: [Early Fraud
%% Warnings](https://stripe.com/docs/disputes/measuring#early-fraud-warnings).
-type radar_early_fraud_warning() ::
    #{payment_intent => binary() | payment_intent(),
      object := 'radar.early_fraud_warning',
      livemode := boolean(),
      id := binary(),
      fraud_type := binary(),
      created := integer(),
      charge := binary() | charge(),
      actionable := boolean()}.
%% portal_payment_method_update
-type portal_payment_method_update() :: #{enabled := boolean()}.
%% payment_method_ideal
-type payment_method_ideal() ::
    #{bic =>
          'ABNANL2A' |
          'ASNBNL21' |
          'BUNQNL2A' |
          'FVLBNL22' |
          'HANDNL2A' |
          'INGBNL2A' |
          'KNABNL2H' |
          'MOYONL21' |
          'RABONL2U' |
          'RBRBNL21' |
          'REVOLT21' |
          'SNSBNL2A' |
          'TRIONL2U' |
          null,
      bank =>
          abn_amro |
          asn_bank |
          bunq |
          handelsbanken |
          ing |
          knab |
          moneyou |
          rabobank |
          regiobank |
          revolut |
          sns_bank |
          triodos_bank |
          van_lanschot |
          null}.
%% source_type_wechat
-type source_type_wechat() ::
    #{statement_descriptor => binary(),
      qr_code_url => binary() | null,
      prepay_id => binary()}.
%% account_settings
-type account_settings() ::
    #{sepa_debit_payments => account_sepa_debit_payments_settings(),
      payouts => account_payout_settings(),
      payments := account_payments_settings(),
      dashboard := account_dashboard_settings(),
      card_payments := account_card_payments_settings(),
      card_issuing => account_card_issuing_settings(),
      branding := account_branding_settings(),
      bacs_debit_payments => account_bacs_debit_payments_settings()}.
%% tax_rate
%%
%% Tax rates can be applied to
%% [invoices](https://stripe.com/docs/billing/invoices/tax-rates),
%% [subscriptions](https://stripe.com/docs/billing/subscriptions/taxes)
%% and [Checkout
%% Sessions](https://stripe.com/docs/payments/checkout/set-up-a-subscription#tax-rates)
%% to collect tax.
%%
%% Related guide: [Tax
%% Rates](https://stripe.com/docs/billing/taxes/tax-rates).
-type tax_rate() ::
    #{tax_type => gst | hst | jct | pst | qst | rst | sales_tax | vat | null,
      state => binary() | null,
      percentage := number(),
      object := tax_rate,
      metadata => json:value() | null,
      livemode := boolean(),
      jurisdiction => binary() | null,
      inclusive := boolean(),
      id := binary(),
      display_name := binary(),
      description => binary() | null,
      created := integer(),
      country => binary() | null,
      active := boolean()}.
%% verification_session_redaction
-type verification_session_redaction() :: #{status := processing | redacted}.
%% issuing_cardholder_authorization_controls
-type issuing_cardholder_authorization_controls() ::
    #{spending_limits_currency => binary() | null,
      spending_limits => [issuing_cardholder_spending_limit()] | null,
      blocked_categories =>
          [ac_refrigeration_repair | accounting_bookkeeping_services | advertising_services |
           agricultural_cooperative | airlines_air_carriers | airports_flying_fields |
           ambulance_services | amusement_parks_carnivals | antique_reproductions | antique_shops |
           aquariums | architectural_surveying_services | art_dealers_and_galleries |
           artists_supply_and_craft_shops | auto_and_home_supply_stores | auto_body_repair_shops |
           auto_paint_shops | auto_service_shops | automated_cash_disburse |
           automated_fuel_dispensers | automobile_associations |
           automotive_parts_and_accessories_stores | automotive_tire_stores |
           bail_and_bond_payments | bakeries | bands_orchestras | barber_and_beauty_shops |
           betting_casino_gambling | bicycle_shops | billiard_pool_establishments | boat_dealers |
           boat_rentals_and_leases | book_stores | books_periodicals_and_newspapers |
           bowling_alleys | bus_lines | business_secretarial_schools | buying_shopping_services |
           cable_satellite_and_other_pay_television_and_radio |
           camera_and_photographic_supply_stores | candy_nut_and_confectionery_stores |
           car_and_truck_dealers_new_used | car_and_truck_dealers_used_only | car_rental_agencies |
           car_washes | carpentry_services | carpet_upholstery_cleaning | caterers |
           charitable_and_social_service_organizations_fundraising | chemicals_and_allied_products |
           child_care_services | childrens_and_infants_wear_stores | chiropodists_podiatrists |
           chiropractors | cigar_stores_and_stands | civic_social_fraternal_associations |
           cleaning_and_maintenance | clothing_rental | colleges_universities |
           commercial_equipment | commercial_footwear | commercial_photography_art_and_graphics |
           commuter_transport_and_ferries | computer_network_services | computer_programming |
           computer_repair | computer_software_stores | computers_peripherals_and_software |
           concrete_work_services | construction_materials | consulting_public_relations |
           correspondence_schools | cosmetic_stores | counseling_services | country_clubs |
           courier_services | court_costs | credit_reporting_agencies | cruise_lines |
           dairy_products_stores | dance_hall_studios_schools | dating_escort_services |
           dentists_orthodontists | department_stores | detective_agencies |
           digital_goods_applications | digital_goods_games | digital_goods_large_volume |
           digital_goods_media | direct_marketing_catalog_merchant |
           direct_marketing_combination_catalog_and_retail_merchant |
           direct_marketing_inbound_telemarketing | direct_marketing_insurance_services |
           direct_marketing_other | direct_marketing_outbound_telemarketing |
           direct_marketing_subscription | direct_marketing_travel | discount_stores | doctors |
           door_to_door_sales | drapery_window_covering_and_upholstery_stores | drinking_places |
           drug_stores_and_pharmacies | drugs_drug_proprietaries_and_druggist_sundries |
           dry_cleaners | durable_goods | duty_free_stores | eating_places_restaurants |
           educational_services | electric_razor_stores | electrical_parts_and_equipment |
           electrical_services | electronics_repair_shops | electronics_stores |
           elementary_secondary_schools | employment_temp_agencies | equipment_rental |
           exterminating_services | family_clothing_stores | fast_food_restaurants |
           financial_institutions | fines_government_administrative_entities |
           fireplace_fireplace_screens_and_accessories_stores | floor_covering_stores | florists |
           florists_supplies_nursery_stock_and_flowers | freezer_and_locker_meat_provisioners |
           fuel_dealers_non_automotive | funeral_services_crematories |
           furniture_home_furnishings_and_equipment_stores_except_appliances |
           furniture_repair_refinishing | furriers_and_fur_shops | general_services |
           gift_card_novelty_and_souvenir_shops | glass_paint_and_wallpaper_stores |
           glassware_crystal_stores | golf_courses_public | government_services |
           grocery_stores_supermarkets | hardware_equipment_and_supplies | hardware_stores |
           health_and_beauty_spas | hearing_aids_sales_and_supplies | heating_plumbing_a_c |
           hobby_toy_and_game_shops | home_supply_warehouse_stores | hospitals |
           hotels_motels_and_resorts | household_appliance_stores | industrial_supplies |
           information_retrieval_services | insurance_default | insurance_underwriting_premiums |
           intra_company_purchases | jewelry_stores_watches_clocks_and_silverware_stores |
           landscaping_services | laundries | laundry_cleaning_services | legal_services_attorneys |
           luggage_and_leather_goods_stores | lumber_building_materials_stores |
           manual_cash_disburse | marinas_service_and_supplies | masonry_stonework_and_plaster |
           massage_parlors | medical_and_dental_labs |
           medical_dental_ophthalmic_and_hospital_equipment_and_supplies | medical_services |
           membership_organizations | mens_and_boys_clothing_and_accessories_stores |
           mens_womens_clothing_stores | metal_service_centers | miscellaneous |
           miscellaneous_apparel_and_accessory_shops | miscellaneous_auto_dealers |
           miscellaneous_business_services | miscellaneous_food_stores |
           miscellaneous_general_merchandise | miscellaneous_general_services |
           miscellaneous_home_furnishing_specialty_stores | miscellaneous_publishing_and_printing |
           miscellaneous_recreation_services | miscellaneous_repair_shops |
           miscellaneous_specialty_retail | mobile_home_dealers | motion_picture_theaters |
           motor_freight_carriers_and_trucking | motor_homes_dealers |
           motor_vehicle_supplies_and_new_parts | motorcycle_shops_and_dealers |
           motorcycle_shops_dealers | music_stores_musical_instruments_pianos_and_sheet_music |
           news_dealers_and_newsstands | non_fi_money_orders |
           non_fi_stored_value_card_purchase_load | nondurable_goods |
           nurseries_lawn_and_garden_supply_stores | nursing_personal_care |
           office_and_commercial_furniture | opticians_eyeglasses | optometrists_ophthalmologist |
           orthopedic_goods_prosthetic_devices | osteopaths | package_stores_beer_wine_and_liquor |
           paints_varnishes_and_supplies | parking_lots_garages | passenger_railways | pawn_shops |
           pet_shops_pet_food_and_supplies | petroleum_and_petroleum_products | photo_developing |
           photographic_photocopy_microfilm_equipment_and_supplies | photographic_studios |
           picture_video_production | piece_goods_notions_and_other_dry_goods |
           plumbing_heating_equipment_and_supplies | political_organizations |
           postal_services_government_only | precious_stones_and_metals_watches_and_jewelry |
           professional_services | public_warehousing_and_storage | quick_copy_repro_and_blueprint |
           railroads | real_estate_agents_and_managers_rentals | record_stores |
           recreational_vehicle_rentals | religious_goods_stores | religious_organizations |
           roofing_siding_sheet_metal | secretarial_support_services | security_brokers_dealers |
           service_stations | sewing_needlework_fabric_and_piece_goods_stores |
           shoe_repair_hat_cleaning | shoe_stores | small_appliance_repair | snowmobile_dealers |
           special_trade_services | specialty_cleaning | sporting_goods_stores |
           sporting_recreation_camps | sports_and_riding_apparel_stores | sports_clubs_fields |
           stamp_and_coin_stores | stationary_office_supplies_printing_and_writing_paper |
           stationery_stores_office_and_school_supply_stores | swimming_pools_sales |
           t_ui_travel_germany | tailors_alterations | tax_payments_government_agencies |
           tax_preparation_services | taxicabs_limousines |
           telecommunication_equipment_and_telephone_sales | telecommunication_services |
           telegraph_services | tent_and_awning_shops | testing_laboratories |
           theatrical_ticket_agencies | timeshares | tire_retreading_and_repair |
           tolls_bridge_fees | tourist_attractions_and_exhibits | towing_services |
           trailer_parks_campgrounds | transportation_services | travel_agencies_tour_operators |
           truck_stop_iteration | truck_utility_trailer_rentals |
           typesetting_plate_making_and_related_services | typewriter_stores |
           u_s_federal_government_agencies_or_departments | uniforms_commercial_clothing |
           used_merchandise_and_secondhand_stores | utilities | variety_stores |
           veterinary_services | video_amusement_game_supplies | video_game_arcades |
           video_tape_rental_stores | vocational_trade_schools | watch_jewelry_repair |
           welding_repair | wholesale_clubs | wig_and_toupee_stores | wires_money_orders |
           womens_accessory_and_specialty_shops | womens_ready_to_wear_stores |
           wrecking_and_salvage_yards] |
          null,
      allowed_categories =>
          [ac_refrigeration_repair | accounting_bookkeeping_services | advertising_services |
           agricultural_cooperative | airlines_air_carriers | airports_flying_fields |
           ambulance_services | amusement_parks_carnivals | antique_reproductions | antique_shops |
           aquariums | architectural_surveying_services | art_dealers_and_galleries |
           artists_supply_and_craft_shops | auto_and_home_supply_stores | auto_body_repair_shops |
           auto_paint_shops | auto_service_shops | automated_cash_disburse |
           automated_fuel_dispensers | automobile_associations |
           automotive_parts_and_accessories_stores | automotive_tire_stores |
           bail_and_bond_payments | bakeries | bands_orchestras | barber_and_beauty_shops |
           betting_casino_gambling | bicycle_shops | billiard_pool_establishments | boat_dealers |
           boat_rentals_and_leases | book_stores | books_periodicals_and_newspapers |
           bowling_alleys | bus_lines | business_secretarial_schools | buying_shopping_services |
           cable_satellite_and_other_pay_television_and_radio |
           camera_and_photographic_supply_stores | candy_nut_and_confectionery_stores |
           car_and_truck_dealers_new_used | car_and_truck_dealers_used_only | car_rental_agencies |
           car_washes | carpentry_services | carpet_upholstery_cleaning | caterers |
           charitable_and_social_service_organizations_fundraising | chemicals_and_allied_products |
           child_care_services | childrens_and_infants_wear_stores | chiropodists_podiatrists |
           chiropractors | cigar_stores_and_stands | civic_social_fraternal_associations |
           cleaning_and_maintenance | clothing_rental | colleges_universities |
           commercial_equipment | commercial_footwear | commercial_photography_art_and_graphics |
           commuter_transport_and_ferries | computer_network_services | computer_programming |
           computer_repair | computer_software_stores | computers_peripherals_and_software |
           concrete_work_services | construction_materials | consulting_public_relations |
           correspondence_schools | cosmetic_stores | counseling_services | country_clubs |
           courier_services | court_costs | credit_reporting_agencies | cruise_lines |
           dairy_products_stores | dance_hall_studios_schools | dating_escort_services |
           dentists_orthodontists | department_stores | detective_agencies |
           digital_goods_applications | digital_goods_games | digital_goods_large_volume |
           digital_goods_media | direct_marketing_catalog_merchant |
           direct_marketing_combination_catalog_and_retail_merchant |
           direct_marketing_inbound_telemarketing | direct_marketing_insurance_services |
           direct_marketing_other | direct_marketing_outbound_telemarketing |
           direct_marketing_subscription | direct_marketing_travel | discount_stores | doctors |
           door_to_door_sales | drapery_window_covering_and_upholstery_stores | drinking_places |
           drug_stores_and_pharmacies | drugs_drug_proprietaries_and_druggist_sundries |
           dry_cleaners | durable_goods | duty_free_stores | eating_places_restaurants |
           educational_services | electric_razor_stores | electrical_parts_and_equipment |
           electrical_services | electronics_repair_shops | electronics_stores |
           elementary_secondary_schools | employment_temp_agencies | equipment_rental |
           exterminating_services | family_clothing_stores | fast_food_restaurants |
           financial_institutions | fines_government_administrative_entities |
           fireplace_fireplace_screens_and_accessories_stores | floor_covering_stores | florists |
           florists_supplies_nursery_stock_and_flowers | freezer_and_locker_meat_provisioners |
           fuel_dealers_non_automotive | funeral_services_crematories |
           furniture_home_furnishings_and_equipment_stores_except_appliances |
           furniture_repair_refinishing | furriers_and_fur_shops | general_services |
           gift_card_novelty_and_souvenir_shops | glass_paint_and_wallpaper_stores |
           glassware_crystal_stores | golf_courses_public | government_services |
           grocery_stores_supermarkets | hardware_equipment_and_supplies | hardware_stores |
           health_and_beauty_spas | hearing_aids_sales_and_supplies | heating_plumbing_a_c |
           hobby_toy_and_game_shops | home_supply_warehouse_stores | hospitals |
           hotels_motels_and_resorts | household_appliance_stores | industrial_supplies |
           information_retrieval_services | insurance_default | insurance_underwriting_premiums |
           intra_company_purchases | jewelry_stores_watches_clocks_and_silverware_stores |
           landscaping_services | laundries | laundry_cleaning_services | legal_services_attorneys |
           luggage_and_leather_goods_stores | lumber_building_materials_stores |
           manual_cash_disburse | marinas_service_and_supplies | masonry_stonework_and_plaster |
           massage_parlors | medical_and_dental_labs |
           medical_dental_ophthalmic_and_hospital_equipment_and_supplies | medical_services |
           membership_organizations | mens_and_boys_clothing_and_accessories_stores |
           mens_womens_clothing_stores | metal_service_centers | miscellaneous |
           miscellaneous_apparel_and_accessory_shops | miscellaneous_auto_dealers |
           miscellaneous_business_services | miscellaneous_food_stores |
           miscellaneous_general_merchandise | miscellaneous_general_services |
           miscellaneous_home_furnishing_specialty_stores | miscellaneous_publishing_and_printing |
           miscellaneous_recreation_services | miscellaneous_repair_shops |
           miscellaneous_specialty_retail | mobile_home_dealers | motion_picture_theaters |
           motor_freight_carriers_and_trucking | motor_homes_dealers |
           motor_vehicle_supplies_and_new_parts | motorcycle_shops_and_dealers |
           motorcycle_shops_dealers | music_stores_musical_instruments_pianos_and_sheet_music |
           news_dealers_and_newsstands | non_fi_money_orders |
           non_fi_stored_value_card_purchase_load | nondurable_goods |
           nurseries_lawn_and_garden_supply_stores | nursing_personal_care |
           office_and_commercial_furniture | opticians_eyeglasses | optometrists_ophthalmologist |
           orthopedic_goods_prosthetic_devices | osteopaths | package_stores_beer_wine_and_liquor |
           paints_varnishes_and_supplies | parking_lots_garages | passenger_railways | pawn_shops |
           pet_shops_pet_food_and_supplies | petroleum_and_petroleum_products | photo_developing |
           photographic_photocopy_microfilm_equipment_and_supplies | photographic_studios |
           picture_video_production | piece_goods_notions_and_other_dry_goods |
           plumbing_heating_equipment_and_supplies | political_organizations |
           postal_services_government_only | precious_stones_and_metals_watches_and_jewelry |
           professional_services | public_warehousing_and_storage | quick_copy_repro_and_blueprint |
           railroads | real_estate_agents_and_managers_rentals | record_stores |
           recreational_vehicle_rentals | religious_goods_stores | religious_organizations |
           roofing_siding_sheet_metal | secretarial_support_services | security_brokers_dealers |
           service_stations | sewing_needlework_fabric_and_piece_goods_stores |
           shoe_repair_hat_cleaning | shoe_stores | small_appliance_repair | snowmobile_dealers |
           special_trade_services | specialty_cleaning | sporting_goods_stores |
           sporting_recreation_camps | sports_and_riding_apparel_stores | sports_clubs_fields |
           stamp_and_coin_stores | stationary_office_supplies_printing_and_writing_paper |
           stationery_stores_office_and_school_supply_stores | swimming_pools_sales |
           t_ui_travel_germany | tailors_alterations | tax_payments_government_agencies |
           tax_preparation_services | taxicabs_limousines |
           telecommunication_equipment_and_telephone_sales | telecommunication_services |
           telegraph_services | tent_and_awning_shops | testing_laboratories |
           theatrical_ticket_agencies | timeshares | tire_retreading_and_repair |
           tolls_bridge_fees | tourist_attractions_and_exhibits | towing_services |
           trailer_parks_campgrounds | transportation_services | travel_agencies_tour_operators |
           truck_stop_iteration | truck_utility_trailer_rentals |
           typesetting_plate_making_and_related_services | typewriter_stores |
           u_s_federal_government_agencies_or_departments | uniforms_commercial_clothing |
           used_merchandise_and_secondhand_stores | utilities | variety_stores |
           veterinary_services | video_amusement_game_supplies | video_game_arcades |
           video_tape_rental_stores | vocational_trade_schools | watch_jewelry_repair |
           welding_repair | wholesale_clubs | wig_and_toupee_stores | wires_money_orders |
           womens_accessory_and_specialty_shops | womens_ready_to_wear_stores |
           wrecking_and_salvage_yards] |
          null}.
%% payment_links_resource_automatic_tax
-type payment_links_resource_automatic_tax() :: #{enabled := boolean()}.
%% dispute
%%
%% A dispute occurs when a customer questions your charge with their
%% card issuer. When this happens, you're given the opportunity to
%% respond to the dispute with evidence that shows that the charge
%% is legitimate. You can find more information about the dispute
%% process in our [Disputes and Fraud](/docs/disputes)
%% documentation.
%%
%% Related guide: [Disputes and
%% Fraud](https://stripe.com/docs/disputes).
-type dispute() ::
    #{status :=
          charge_refunded |
          lost |
          needs_response |
          under_review |
          warning_closed |
          warning_needs_response |
          warning_under_review |
          won,
      reason := binary(),
      payment_intent => binary() | payment_intent(),
      object := dispute,
      metadata := json:value(),
      livemode := boolean(),
      is_charge_refundable := boolean(),
      id := binary(),
      evidence_details := dispute_evidence_details(),
      evidence := dispute_evidence(),
      currency := binary(),
      created := integer(),
      charge := binary() | charge(),
      balance_transactions := [balance_transaction()],
      amount := integer()}.
%% payment_method_details_bancontact
-type payment_method_details_bancontact() ::
    #{verified_name => binary() | null,
      preferred_language => de | en | fr | nl | null,
      iban_last4 => binary() | null,
      generated_sepa_debit_mandate => binary() | mandate(),
      generated_sepa_debit => binary() | payment_method(),
      bic => binary() | null,
      bank_name => binary() | null,
      bank_code => binary() | null}.
%% payment_method_card_wallet_apple_pay
-type payment_method_card_wallet_apple_pay() :: #{}.
%% legal_entity_dob
-type legal_entity_dob() ::
    #{year => integer() | null,
      month => integer() | null,
      day => integer() | null}.
%% source_owner
-type source_owner() ::
    #{verified_phone => binary() | null,
      verified_name => binary() | null,
      verified_email => binary() | null,
      verified_address => address(),
      phone => binary() | null,
      name => binary() | null,
      email => binary() | null,
      address => address()}.
%% balance_amount
-type balance_amount() ::
    #{source_types => balance_amount_by_source_type(),
      currency := binary(),
      amount := integer()}.
%% payment_method_details_ideal
-type payment_method_details_ideal() ::
    #{verified_name => binary() | null,
      iban_last4 => binary() | null,
      generated_sepa_debit_mandate => binary() | mandate(),
      generated_sepa_debit => binary() | payment_method(),
      bic =>
          'ABNANL2A' |
          'ASNBNL21' |
          'BUNQNL2A' |
          'FVLBNL22' |
          'HANDNL2A' |
          'INGBNL2A' |
          'KNABNL2H' |
          'MOYONL21' |
          'RABONL2U' |
          'RBRBNL21' |
          'REVOLT21' |
          'SNSBNL2A' |
          'TRIONL2U' |
          null,
      bank =>
          abn_amro |
          asn_bank |
          bunq |
          handelsbanken |
          ing |
          knab |
          moneyou |
          rabobank |
          regiobank |
          revolut |
          sns_bank |
          triodos_bank |
          van_lanschot |
          null}.
%% deleted_invoiceitem
-type deleted_invoiceitem() ::
    #{object := invoiceitem,
      id := binary(),
      deleted := boolean()}.
%% shipping_rate_fixed_amount
-type shipping_rate_fixed_amount() :: #{currency := binary(), amount := integer()}.
%% account_branding_settings
-type account_branding_settings() ::
    #{secondary_color => binary() | null,
      primary_color => binary() | null,
      logo => binary() | file(),
      icon => binary() | file()}.
%% payment_method_details_card_installments
-type payment_method_details_card_installments() ::
    #{plan => payment_method_details_card_installments_plan()}.
%% tax_code
%%
%% [Tax codes](https://stripe.com/docs/tax/tax-codes) classify goods
%% and services for tax purposes.
-type tax_code() ::
    #{object := tax_code,
      name := binary(),
      id := binary(),
      description := binary()}.
%% payment_method_details_stripe_account
-type payment_method_details_stripe_account() :: #{}.
%% quotes_resource_recurring
-type quotes_resource_recurring() ::
    #{total_details := quotes_resource_total_details(),
      interval_count := integer(),
      interval := day | month | week | year,
      amount_total := integer(),
      amount_subtotal := integer()}.
%% subscriptions_resource_pending_update
%%
%% Pending Updates store the changes pending from a previous update
%% that will be applied to the Subscription upon successful payment.
-type subscriptions_resource_pending_update() ::
    #{trial_from_plan => boolean() | null,
      trial_end => integer() | null,
      subscription_items => [subscription_item()] | null,
      expires_at := integer(),
      billing_cycle_anchor => integer() | null}.
%% subscription
%%
%% Subscriptions allow you to charge a customer on a recurring
%% basis.
%%
%% Related guide: [Creating
%% Subscriptions](https://stripe.com/docs/billing/subscriptions/creating).
-type subscription() ::
    #{default_tax_rates => [tax_rate()] | null,
      pending_update => subscriptions_resource_pending_update(),
      id := binary(),
      transfer_data => subscription_transfer_data(),
      items :=
          #{url := binary(),
            object := list,
            has_more := boolean(),
            data := [subscription_item()]},
      status :=
          active | canceled | incomplete | incomplete_expired | past_due | trialing | unpaid,
      current_period_start := integer(),
      trial_start => integer() | null,
      cancel_at => integer() | null,
      trial_end => integer() | null,
      created := integer(),
      latest_invoice => binary() | invoice(),
      current_period_end := integer(),
      canceled_at => integer() | null,
      schedule => binary() | subscription_schedule(),
      automatic_tax := subscription_automatic_tax(),
      billing_cycle_anchor := integer(),
      object := subscription,
      cancel_at_period_end := boolean(),
      default_source =>
          binary() | alipay_account() | bank_account() | bitcoin_receiver() | card() | source(),
      next_pending_invoice_item_invoice => integer() | null,
      billing_thresholds => subscription_billing_thresholds(),
      pending_invoice_item_interval => subscription_pending_invoice_item_interval(),
      payment_settings => subscriptions_resource_payment_settings(),
      days_until_due => integer() | null,
      ended_at => integer() | null,
      customer := binary() | customer() | deleted_customer(),
      pause_collection => subscriptions_resource_pause_collection(),
      start_date := integer(),
      discount => discount(),
      pending_setup_intent => binary() | setup_intent(),
      metadata := json:value(),
      default_payment_method => binary() | payment_method(),
      collection_method := charge_automatically | send_invoice,
      livemode := boolean(),
      application_fee_percent => number() | null}.
%% shipping_rate
%%
%% Shipping rates describe the price of shipping presented to your
%% customers and can be applied to [Checkout
%% Sessions](https://stripe.com/docs/payments/checkout/shipping) to
%% collect shipping costs.
-type shipping_rate() ::
    #{type := fixed_amount,
      tax_code => binary() | tax_code(),
      tax_behavior => exclusive | inclusive | unspecified | null,
      object := shipping_rate,
      metadata := json:value(),
      livemode := boolean(),
      id := binary(),
      fixed_amount => shipping_rate_fixed_amount(),
      display_name => binary() | null,
      delivery_estimate => shipping_rate_delivery_estimate(),
      created := integer(),
      active := boolean()}.
%% invoice_setting_customer_setting
-type invoice_setting_customer_setting() ::
    #{footer => binary() | null,
      default_payment_method => binary() | payment_method(),
      custom_fields => [invoice_setting_custom_field()] | null}.
%% transfer_schedule
-type transfer_schedule() ::
    #{weekly_anchor => binary(),
      monthly_anchor => integer(),
      interval := binary(),
      delay_days := integer()}.
%% payment_method_options_alipay
-type payment_method_options_alipay() :: #{setup_future_usage => none | off_session}.
%% issuing_dispute_evidence
-type issuing_dispute_evidence() ::
    #{service_not_as_described => issuing_dispute_service_not_as_described_evidence(),
      reason :=
          canceled |
          duplicate |
          fraudulent |
          merchandise_not_as_described |
          not_received |
          other |
          service_not_as_described,
      other => issuing_dispute_other_evidence(),
      not_received => issuing_dispute_not_received_evidence(),
      merchandise_not_as_described => issuing_dispute_merchandise_not_as_described_evidence(),
      fraudulent => issuing_dispute_fraudulent_evidence(),
      duplicate => issuing_dispute_duplicate_evidence(),
      canceled => issuing_dispute_canceled_evidence()}.
%% source_type_multibanco
-type source_type_multibanco() ::
    #{refund_iban => binary() | null,
      refund_account_holder_name => binary() | null,
      refund_account_holder_address_state => binary() | null,
      refund_account_holder_address_postal_code => binary() | null,
      refund_account_holder_address_line2 => binary() | null,
      refund_account_holder_address_line1 => binary() | null,
      refund_account_holder_address_country => binary() | null,
      refund_account_holder_address_city => binary() | null,
      reference => binary() | null,
      entity => binary() | null}.
%% portal_subscription_pause
-type portal_subscription_pause() :: #{enabled := boolean()}.
%% deleted_coupon
-type deleted_coupon() ::
    #{object := coupon,
      id := binary(),
      deleted := boolean()}.
%% payment_links_resource_after_completion
-type payment_links_resource_after_completion() ::
    #{type := hosted_confirmation | redirect,
      redirect => payment_links_resource_completion_behavior_redirect(),
      hosted_confirmation => payment_links_resource_completion_behavior_confirmation_page()}.
%% deleted_radar.value_list_item
-type deleted_radar_value_list_item() ::
    #{object := 'radar.value_list_item',
      id := binary(),
      deleted := boolean()}.
%% source_type_sofort
-type source_type_sofort() ::
    #{statement_descriptor => binary() | null,
      preferred_language => binary() | null,
      iban_last4 => binary() | null,
      country => binary() | null,
      bic => binary() | null,
      bank_name => binary() | null,
      bank_code => binary() | null}.
%% payment_method_options_afterpay_clearpay
-type payment_method_options_afterpay_clearpay() ::
    #{setup_future_usage => none, reference => binary() | null}.
%% issuing_cardholder_verification
-type issuing_cardholder_verification() ::
    #{document => issuing_cardholder_id_document()}.
%% setup_attempt_payment_method_details_au_becs_debit
-type setup_attempt_payment_method_details_au_becs_debit() :: #{}.
%% portal_features
-type portal_features() ::
    #{subscription_update := portal_subscription_update(),
      subscription_pause := portal_subscription_pause(),
      subscription_cancel := portal_subscription_cancel(),
      payment_method_update := portal_payment_method_update(),
      invoice_history := portal_invoice_list(),
      customer_update := portal_customer_update()}.
%% order_return
%%
%% A return represents the full or partial return of a number of
%% [order items](https://stripe.com/docs/api#order_items). Returns
%% always belong to an order, and may optionally contain a refund.
%%
%% Related guide: [Handling
%% Returns](https://stripe.com/docs/orders/guide#handling-returns).
-type order_return() ::
    #{refund => binary() | refund(),
      order => binary() | order(),
      object := order_return,
      livemode := boolean(),
      items := [order_item()],
      id := binary(),
      currency := binary(),
      created := integer(),
      amount := integer()}.
%% three_d_secure_details
-type three_d_secure_details() ::
    #{version => '1.0.2' | '2.1.0' | '2.2.0' | null,
      result_reason =>
          abandoned |
          bypassed |
          canceled |
          card_not_enrolled |
          network_not_supported |
          protocol_error |
          rejected |
          null,
      result =>
          attempt_acknowledged | authenticated | failed | not_supported | processing_error | null,
      authentication_flow => challenge | frictionless | null}.
%% deleted_account
-type deleted_account() ::
    #{object := account,
      id := binary(),
      deleted := boolean()}.
%% payment_pages_checkout_session_customer_details
-type payment_pages_checkout_session_customer_details() ::
    #{tax_ids => [payment_pages_checkout_session_tax_id()] | null,
      tax_exempt => exempt | none | reverse | null,
      phone => binary() | null,
      email => binary() | null}.
%% invoice_setting_quote_setting
-type invoice_setting_quote_setting() :: #{days_until_due => integer() | null}.
%% country_spec_verification_field_details
-type country_spec_verification_field_details() ::
    #{minimum := [binary()], additional := [binary()]}.
%% subscriptions_resource_payment_method_options
-type subscriptions_resource_payment_method_options() ::
    #{card => subscription_payment_method_options_card(),
      bancontact => invoice_payment_method_options_bancontact(),
      acss_debit => invoice_payment_method_options_acss_debit()}.
%% deleted_invoice
-type deleted_invoice() ::
    #{object := invoice,
      id := binary(),
      deleted := boolean()}.
%% source_type_acss_debit
-type source_type_acss_debit() ::
    #{routing_number => binary() | null,
      last4 => binary() | null,
      fingerprint => binary() | null,
      country => binary() | null,
      category => binary() | null,
      bank_name => binary() | null,
      bank_address_postal_code => binary() | null,
      bank_address_line_2 => binary() | null,
      bank_address_line_1 => binary() | null,
      bank_address_city => binary() | null}.
%% transform_quantity
-type transform_quantity() :: #{round := down | up, divide_by := integer()}.
%% api_errors
-type api_errors() ::
    #{type := api_error | card_error | idempotency_error | invalid_request_error,
      source => bank_account() | card() | source(),
      setup_intent => setup_intent(),
      payment_method_type => binary(),
      payment_method => payment_method(),
      payment_intent => payment_intent(),
      param => binary(),
      message => binary(),
      doc_url => binary(),
      decline_code => binary(),
      code => binary(),
      charge => binary()}.
%% gelato_data_document_report_date_of_birth
%%
%% Point in Time
-type gelato_data_document_report_date_of_birth() ::
    #{year => integer() | null,
      month => integer() | null,
      day => integer() | null}.
%% legal_entity_company_verification_document
-type legal_entity_company_verification_document() ::
    #{front => binary() | file(),
      details_code => binary() | null,
      details => binary() | null,
      back => binary() | file()}.
%% payment_method_oxxo
-type payment_method_oxxo() :: #{}.
%% setup_intent_payment_method_options_card
-type setup_intent_payment_method_options_card() ::
    #{request_three_d_secure => any | automatic | challenge_only | null}.
%% shipping_rate_delivery_estimate_bound
-type shipping_rate_delivery_estimate_bound() ::
    #{value := integer(), unit := business_day | day | hour | month | week}.
%% account_tos_acceptance
-type account_tos_acceptance() ::
    #{user_agent => binary() | null,
      service_agreement => binary(),
      ip => binary() | null,
      date => integer() | null}.
%% subscription_automatic_tax
-type subscription_automatic_tax() :: #{enabled := boolean()}.
%% period
-type period() :: #{start => integer() | null, 'end' => integer() | null}.
%% payment_pages_checkout_session_consent_collection
-type payment_pages_checkout_session_consent_collection() :: #{promotions => auto | null}.
%% mandate
%%
%% A Mandate is a record of the permission a customer has given you
%% to debit their payment method.
-type mandate() ::
    #{type := multi_use | single_use,
      status := active | inactive | pending,
      single_use => mandate_single_use(),
      payment_method_details := mandate_payment_method_details(),
      payment_method := binary() | payment_method(),
      object := mandate,
      multi_use => mandate_multi_use(),
      livemode := boolean(),
      id := binary(),
      customer_acceptance := customer_acceptance()}.
%% quotes_resource_total_details
-type quotes_resource_total_details() ::
    #{breakdown => quotes_resource_total_details_resource_breakdown(),
      amount_tax := integer(),
      amount_shipping => integer() | null,
      amount_discount := integer()}.
%% radar.value_list_item
%%
%% Value list items allow you to add specific values to a given
%% Radar value list, which can then be used in rules.
%%
%% Related guide: [Managing List
%% Items](https://stripe.com/docs/radar/lists#managing-list-items).
-type radar_value_list_item() ::
    #{value_list := binary(),
      value := binary(),
      object := 'radar.value_list_item',
      livemode := boolean(),
      id := binary(),
      created_by := binary(),
      created := integer()}.
%% payment_links_resource_shipping_address_collection
-type payment_links_resource_shipping_address_collection() ::
    #{allowed_countries :=
          ['AC' | 'AD' | 'AE' | 'AF' | 'AG' | 'AI' | 'AL' | 'AM' | 'AO' | 'AQ' | 'AR' | 'AT' |
           'AU' | 'AW' | 'AX' | 'AZ' | 'BA' | 'BB' | 'BD' | 'BE' | 'BF' | 'BG' | 'BH' | 'BI' |
           'BJ' | 'BL' | 'BM' | 'BN' | 'BO' | 'BQ' | 'BR' | 'BS' | 'BT' | 'BV' | 'BW' | 'BY' |
           'BZ' | 'CA' | 'CD' | 'CF' | 'CG' | 'CH' | 'CI' | 'CK' | 'CL' | 'CM' | 'CN' | 'CO' |
           'CR' | 'CV' | 'CW' | 'CY' | 'CZ' | 'DE' | 'DJ' | 'DK' | 'DM' | 'DO' | 'DZ' | 'EC' |
           'EE' | 'EG' | 'EH' | 'ER' | 'ES' | 'ET' | 'FI' | 'FJ' | 'FK' | 'FO' | 'FR' | 'GA' |
           'GB' | 'GD' | 'GE' | 'GF' | 'GG' | 'GH' | 'GI' | 'GL' | 'GM' | 'GN' | 'GP' | 'GQ' |
           'GR' | 'GS' | 'GT' | 'GU' | 'GW' | 'GY' | 'HK' | 'HN' | 'HR' | 'HT' | 'HU' | 'ID' |
           'IE' | 'IL' | 'IM' | 'IN' | 'IO' | 'IQ' | 'IS' | 'IT' | 'JE' | 'JM' | 'JO' | 'JP' |
           'KE' | 'KG' | 'KH' | 'KI' | 'KM' | 'KN' | 'KR' | 'KW' | 'KY' | 'KZ' | 'LA' | 'LB' |
           'LC' | 'LI' | 'LK' | 'LR' | 'LS' | 'LT' | 'LU' | 'LV' | 'LY' | 'MA' | 'MC' | 'MD' |
           'ME' | 'MF' | 'MG' | 'MK' | 'ML' | 'MM' | 'MN' | 'MO' | 'MQ' | 'MR' | 'MS' | 'MT' |
           'MU' | 'MV' | 'MW' | 'MX' | 'MY' | 'MZ' | 'NA' | 'NC' | 'NE' | 'NG' | 'NI' | 'NL' |
           'NO' | 'NP' | 'NR' | 'NU' | 'NZ' | 'OM' | 'PA' | 'PE' | 'PF' | 'PG' | 'PH' | 'PK' |
           'PL' | 'PM' | 'PN' | 'PR' | 'PS' | 'PT' | 'PY' | 'QA' | 'RE' | 'RO' | 'RS' | 'RU' |
           'RW' | 'SA' | 'SB' | 'SC' | 'SE' | 'SG' | 'SH' | 'SI' | 'SJ' | 'SK' | 'SL' | 'SM' |
           'SN' | 'SO' | 'SR' | 'SS' | 'ST' | 'SV' | 'SX' | 'SZ' | 'TA' | 'TC' | 'TD' | 'TF' |
           'TG' | 'TH' | 'TJ' | 'TK' | 'TL' | 'TM' | 'TN' | 'TO' | 'TR' | 'TT' | 'TV' | 'TW' |
           'TZ' | 'UA' | 'UG' | 'US' | 'UY' | 'UZ' | 'VA' | 'VC' | 'VE' | 'VG' | 'VN' | 'VU' |
           'WF' | 'WS' | 'XK' | 'YE' | 'YT' | 'ZA' | 'ZM' | 'ZW' | 'ZZ']}.
%% payment_method_au_becs_debit
-type payment_method_au_becs_debit() ::
    #{last4 => binary() | null,
      fingerprint => binary() | null,
      bsb_number => binary() | null}.
%% subscription_transfer_data
-type subscription_transfer_data() ::
    #{destination := binary() | account(), amount_percent => number() | null}.
%% payment_method_details_card_wallet_google_pay
-type payment_method_details_card_wallet_google_pay() :: #{}.
%% source_transaction_gbp_credit_transfer_data
-type source_transaction_gbp_credit_transfer_data() ::
    #{sender_sort_code => binary(),
      sender_name => binary(),
      sender_account_number => binary(),
      reference => binary(),
      last4 => binary(),
      funding_method => binary(),
      fingerprint => binary()}.
%% quotes_resource_from_quote
-type quotes_resource_from_quote() ::
    #{quote := binary() | quote(), is_revision := boolean()}.
%% quotes_resource_upfront
-type quotes_resource_upfront() ::
    #{total_details := quotes_resource_total_details(),
      line_items =>
          #{url := binary(),
            object := list,
            has_more := boolean(),
            data := [item()]},
      amount_total := integer(),
      amount_subtotal := integer()}.
%% issuing_transaction_receipt_data
-type issuing_transaction_receipt_data() ::
    #{unit_cost => integer() | null,
      total => integer() | null,
      quantity => number() | null,
      description => binary() | null}.
%% gelato_selfie_report
%%
%% Result from a selfie check
-type gelato_selfie_report() ::
    #{status := unverified | verified,
      selfie => binary() | null,
      error => gelato_selfie_report_error(),
      document => binary() | null}.
%% payment_method_details_klarna
-type payment_method_details_klarna() ::
    #{preferred_locale => binary() | null, payment_method_category => binary() | null}.
%% payment_method_options_bancontact
-type payment_method_options_bancontact() ::
    #{setup_future_usage => none | off_session, preferred_language := de | en | fr | nl}.
%% discounts_resource_discount_amount
-type discounts_resource_discount_amount() ::
    #{discount := binary() | discount() | deleted_discount(), amount := integer()}.
%% payment_method_details_card_wallet
-type payment_method_details_card_wallet() ::
    #{visa_checkout => payment_method_details_card_wallet_visa_checkout(),
      type :=
          amex_express_checkout | apple_pay | google_pay | masterpass | samsung_pay | visa_checkout,
      samsung_pay => payment_method_details_card_wallet_samsung_pay(),
      masterpass => payment_method_details_card_wallet_masterpass(),
      google_pay => payment_method_details_card_wallet_google_pay(),
      dynamic_last4 => binary() | null,
      apple_pay => payment_method_details_card_wallet_apple_pay(),
      amex_express_checkout => payment_method_details_card_wallet_amex_express_checkout()}.
%% account_requirements_error
-type account_requirements_error() ::
    #{requirement := binary(),
      reason := binary(),
      code :=
          invalid_address_city_state_postal_code | invalid_street_address | invalid_value_other |
          verification_document_address_mismatch | verification_document_address_missing |
          verification_document_corrupt | verification_document_country_not_supported |
          verification_document_dob_mismatch | verification_document_duplicate_type |
          verification_document_expired | verification_document_failed_copy |
          verification_document_failed_greyscale | verification_document_failed_other |
          verification_document_failed_test_mode | verification_document_fraudulent |
          verification_document_id_number_mismatch | verification_document_id_number_missing |
          verification_document_incomplete | verification_document_invalid |
          verification_document_issue_or_expiry_date_missing | verification_document_manipulated |
          verification_document_missing_back | verification_document_missing_front |
          verification_document_name_mismatch | verification_document_name_missing |
          verification_document_nationality_mismatch | verification_document_not_readable |
          verification_document_not_signed | verification_document_not_uploaded |
          verification_document_photo_mismatch | verification_document_too_large |
          verification_document_type_not_supported | verification_failed_address_match |
          verification_failed_business_iec_number | verification_failed_document_match |
          verification_failed_id_number_match | verification_failed_keyed_identity |
          verification_failed_keyed_match | verification_failed_name_match |
          verification_failed_other | verification_failed_tax_id_match |
          verification_failed_tax_id_not_issued | verification_missing_executives |
          verification_missing_owners |
          verification_requires_additional_memorandum_of_associations}.
%% payout
%%
%% A `Payout` object is created when you receive funds from Stripe,
%% or when you initiate a payout to either a bank account or debit
%% card of a [connected Stripe
%% account](/docs/connect/bank-debit-card-payouts). You can retrieve
%% individual payouts, as well as list all payouts. Payouts are made
%% on [varying schedules](/docs/connect/manage-payout-schedule),
%% depending on your country and industry.
%%
%% Related guide: [Receiving
%% Payouts](https://stripe.com/docs/payouts).
-type payout() ::
    #{type := bank_account | card,
      status := binary(),
      statement_descriptor => binary() | null,
      source_type := binary(),
      reversed_by => binary() | payout(),
      original_payout => binary() | payout(),
      object := payout,
      method := binary(),
      metadata => json:value() | null,
      livemode := boolean(),
      id := binary(),
      failure_message => binary() | null,
      failure_code => binary() | null,
      failure_balance_transaction => binary() | balance_transaction(),
      destination =>
          binary() | bank_account() | card() | deleted_bank_account() | deleted_card(),
      description => binary() | null,
      currency := binary(),
      created := integer(),
      balance_transaction => binary() | balance_transaction(),
      automatic := boolean(),
      arrival_date := integer(),
      amount := integer()}.
%% gelato_session_last_error
%%
%% Shows last VerificationSession error
-type gelato_session_last_error() ::
    #{reason => binary() | null,
      code =>
          abandoned |
          consent_declined |
          country_not_supported |
          device_not_supported |
          document_expired |
          document_type_not_supported |
          document_unverified_other |
          id_number_insufficient_document_data |
          id_number_mismatch |
          id_number_unverified_other |
          selfie_document_missing_photo |
          selfie_face_mismatch |
          selfie_manipulated |
          selfie_unverified_other |
          under_supported_age |
          null}.
%% payment_method_details_interac_present_receipt
-type payment_method_details_interac_present_receipt() ::
    #{transaction_status_information => binary() | null,
      terminal_verification_results => binary() | null,
      dedicated_file_name => binary() | null,
      cardholder_verification_method => binary() | null,
      authorization_response_code => binary() | null,
      authorization_code => binary() | null,
      application_preferred_name => binary() | null,
      application_cryptogram => binary() | null,
      account_type => checking | savings | unknown}.
%% account_unification_account_controller
-type account_unification_account_controller() ::
    #{type := account | application, is_controller => boolean()}.
%% three_d_secure
%%
%% Cardholder authentication via 3D Secure is initiated by creating
%% a `3D Secure` object. Once the object has been created, you can
%% use it to authenticate the cardholder and create a charge.
-type three_d_secure() ::
    #{status := binary(),
      redirect_url => binary() | null,
      object := three_d_secure,
      livemode := boolean(),
      id := binary(),
      currency := binary(),
      created := integer(),
      card := card(),
      authenticated := boolean(),
      amount := integer()}.
%% account_requirements_alternative
-type account_requirements_alternative() ::
    #{original_fields_due := [binary()], alternative_fields_due := [binary()]}.
%% subscription_schedule_current_phase
-type subscription_schedule_current_phase() ::
    #{start_date := integer(), end_date := integer()}.
%% address
-type address() ::
    #{state => binary() | null,
      postal_code => binary() | null,
      line2 => binary() | null,
      line1 => binary() | null,
      country => binary() | null,
      city => binary() | null}.
%% source_type_p24
-type source_type_p24() :: #{reference => binary() | null}.
%% issuing_transaction_flight_data
-type issuing_transaction_flight_data() ::
    #{travel_agency => binary() | null,
      segments => [issuing_transaction_flight_data_leg()] | null,
      refundable => boolean() | null,
      passenger_name => binary() | null,
      departure_at => integer() | null}.
%% checkout_oxxo_payment_method_options
-type checkout_oxxo_payment_method_options() :: #{expires_after_days := integer()}.
%% checkout_acss_debit_payment_method_options
-type checkout_acss_debit_payment_method_options() ::
    #{verification_method => automatic | instant | microdeposits,
      mandate_options => checkout_acss_debit_mandate_options(),
      currency => cad | usd}.
%% source_mandate_notification_acss_debit_data
-type source_mandate_notification_acss_debit_data() ::
    #{statement_descriptor => binary()}.
%% setup_attempt_payment_method_details_bancontact
-type setup_attempt_payment_method_details_bancontact() ::
    #{verified_name => binary() | null,
      preferred_language => de | en | fr | nl | null,
      iban_last4 => binary() | null,
      generated_sepa_debit_mandate => binary() | mandate(),
      generated_sepa_debit => binary() | payment_method(),
      bic => binary() | null,
      bank_name => binary() | null,
      bank_code => binary() | null}.
%% country_spec_verification_fields
-type country_spec_verification_fields() ::
    #{individual := country_spec_verification_field_details(),
      company := country_spec_verification_field_details()}.
%% issuing_dispute_duplicate_evidence
-type issuing_dispute_duplicate_evidence() ::
    #{original_transaction => binary() | null,
      explanation => binary() | null,
      check_image => binary() | file(),
      cash_receipt => binary() | file(),
      card_statement => binary() | file(),
      additional_documentation => binary() | file()}.
%% credit_note
%%
%% Issue a credit note to adjust an invoice's amount after the
%% invoice is finalized.
%%
%% Related guide: [Credit
%% Notes](https://stripe.com/docs/billing/invoices/credit-notes).
-type credit_note() ::
    #{voided_at => integer() | null,
      type := post_payment | pre_payment,
      total := integer(),
      tax_amounts := [credit_note_tax_amount()],
      subtotal := integer(),
      status := issued | void,
      refund => binary() | refund(),
      reason => duplicate | fraudulent | order_change | product_unsatisfactory | null,
      pdf := binary(),
      out_of_band_amount => integer() | null,
      object := credit_note,
      number := binary(),
      metadata => json:value() | null,
      memo => binary() | null,
      livemode := boolean(),
      lines :=
          #{url := binary(),
            object := list,
            has_more := boolean(),
            data := [credit_note_line_item()]},
      invoice := binary() | invoice(),
      id := binary(),
      discount_amounts := [discounts_resource_discount_amount()],
      discount_amount := integer(),
      customer_balance_transaction => binary() | customer_balance_transaction(),
      customer := binary() | customer() | deleted_customer(),
      currency := binary(),
      created := integer(),
      amount := integer()}.
%% issuing_card_shipping
-type issuing_card_shipping() ::
    #{type := bulk | individual,
      tracking_url => binary() | null,
      tracking_number => binary() | null,
      status => canceled | delivered | failure | pending | returned | shipped | null,
      service := express | priority | standard,
      name := binary(),
      eta => integer() | null,
      carrier => dhl | fedex | royal_mail | usps | null,
      address := address()}.
%% line_item
-type line_item() ::
    #{type := invoiceitem | subscription,
      tax_rates => [tax_rate()],
      tax_amounts => [invoice_tax_amount()],
      subscription_item => binary(),
      subscription => binary() | null,
      quantity => integer() | null,
      proration := boolean(),
      price => price(),
      period := invoice_line_item_period(),
      object := line_item,
      metadata := json:value(),
      livemode := boolean(),
      invoice_item => binary(),
      id := binary(),
      discounts => [binary() | discount()] | null,
      discountable := boolean(),
      discount_amounts => [discounts_resource_discount_amount()] | null,
      description => binary() | null,
      currency := binary(),
      amount := integer()}.
%% account_capability_future_requirements
-type account_capability_future_requirements() ::
    #{pending_verification := [binary()],
      past_due := [binary()],
      eventually_due := [binary()],
      errors := [account_requirements_error()],
      disabled_reason => binary() | null,
      currently_due := [binary()],
      current_deadline => integer() | null,
      alternatives => [account_requirements_alternative()] | null}.
%% payment_intent_next_action_wechat_pay_redirect_to_android_app
-type payment_intent_next_action_wechat_pay_redirect_to_android_app() ::
    #{timestamp := binary(),
      sign := binary(),
      prepay_id := binary(),
      partner_id := binary(),
      package := binary(),
      nonce_str := binary(),
      app_id := binary()}.
%% person_requirements
-type person_requirements() ::
    #{pending_verification := [binary()],
      past_due := [binary()],
      eventually_due := [binary()],
      errors := [account_requirements_error()],
      currently_due := [binary()],
      alternatives => [account_requirements_alternative()] | null}.
%% issuing_authorization_merchant_data
-type issuing_authorization_merchant_data() ::
    #{state => binary() | null,
      postal_code => binary() | null,
      network_id := binary(),
      name => binary() | null,
      country => binary() | null,
      city => binary() | null,
      category_code := binary(),
      category := binary()}.
%% issuing.transaction
%%
%% Any use of an [issued card](https://stripe.com/docs/issuing) that
%% results in funds entering or leaving your Stripe account, such as
%% a completed purchase or refund, is represented by an Issuing
%% `Transaction` object.
%%
%% Related guide: [Issued Card
%% Transactions](https://stripe.com/docs/issuing/purchases/transactions).
-type issuing_transaction() ::
    #{wallet => apple_pay | google_pay | samsung_pay | null,
      type := capture | refund,
      purchase_details => issuing_transaction_purchase_details(),
      object := 'issuing.transaction',
      metadata := json:value(),
      merchant_data := issuing_authorization_merchant_data(),
      merchant_currency := binary(),
      merchant_amount := integer(),
      livemode := boolean(),
      id := binary(),
      dispute => binary() | issuing_dispute(),
      currency := binary(),
      created := integer(),
      cardholder => binary() | issuing_cardholder(),
      card := binary() | issuing_card(),
      balance_transaction => binary() | balance_transaction(),
      authorization => binary() | issuing_authorization(),
      amount_details => issuing_transaction_amount_details(),
      amount := integer()}.
%% deleted_recipient
-type deleted_recipient() ::
    #{object := recipient,
      id := binary(),
      deleted := boolean()}.
%% source_transaction_paper_check_data
-type source_transaction_paper_check_data() ::
    #{invoices => binary(), available_at => binary()}.
%% legal_entity_person_verification
-type legal_entity_person_verification() ::
    #{status := binary(),
      document => legal_entity_person_verification_document(),
      details_code => binary() | null,
      details => binary() | null,
      additional_document => legal_entity_person_verification_document()}.
%% usage_record
%%
%% Usage records allow you to report customer usage and metrics to
%% Stripe for metered billing of subscription prices.
%%
%% Related guide: [Metered
%% Billing](https://stripe.com/docs/billing/subscriptions/metered-billing).
-type usage_record() ::
    #{timestamp := integer(),
      subscription_item := binary(),
      quantity := integer(),
      object := usage_record,
      livemode := boolean(),
      id := binary()}.
%% source_type_klarna
-type source_type_klarna() ::
    #{shipping_last_name => binary(),
      shipping_first_name => binary(),
      shipping_delay => integer(),
      redirect_url => binary(),
      purchase_type => binary(),
      purchase_country => binary(),
      payment_method_categories => binary(),
      pay_over_time_redirect_url => binary(),
      pay_over_time_name => binary(),
      pay_over_time_asset_urls_standard => binary(),
      pay_over_time_asset_urls_descriptive => binary(),
      pay_now_redirect_url => binary(),
      pay_now_name => binary(),
      pay_now_asset_urls_standard => binary(),
      pay_now_asset_urls_descriptive => binary(),
      pay_later_redirect_url => binary(),
      pay_later_name => binary(),
      pay_later_asset_urls_standard => binary(),
      pay_later_asset_urls_descriptive => binary(),
      page_title => binary(),
      logo_url => binary(),
      locale => binary(),
      last_name => binary(),
      first_name => binary(),
      client_token => binary() | null,
      background_image_url => binary()}.
%% payment_method_card_wallet_google_pay
-type payment_method_card_wallet_google_pay() :: #{}.
%% tax_id
%%
%% You can add one or multiple tax IDs to a
%% [customer](https://stripe.com/docs/api/customers). A customer's
%% tax IDs are displayed on invoices and credit notes issued for the
%% customer.
%%
%% Related guide: [Customer Tax Identification
%% Numbers](https://stripe.com/docs/billing/taxes/tax-ids).
-type tax_id() ::
    #{verification => tax_id_verification(),
      value := binary(),
      type :=
          ae_trn | au_abn | au_arn | br_cnpj | br_cpf | ca_bn | ca_gst_hst | ca_pst_bc | ca_pst_mb |
          ca_pst_sk | ca_qst | ch_vat | cl_tin | es_cif | eu_vat | gb_vat | ge_vat | hk_br |
          id_npwp | il_vat | in_gst | is_vat | jp_cn | jp_rn | kr_brn | li_uid | mx_rfc | my_frp |
          my_itn | my_sst | no_vat | nz_gst | ru_inn | ru_kpp | sa_vat | sg_gst | sg_uen | th_vat |
          tw_vat | ua_vat | unknown | us_ein | za_vat,
      object := tax_id,
      livemode := boolean(),
      id := binary(),
      customer => binary() | customer(),
      created := integer(),
      country => binary() | null}.
%% usage_record_summary
-type usage_record_summary() ::
    #{total_usage := integer(),
      subscription_item := binary(),
      period := period(),
      object := usage_record_summary,
      livemode := boolean(),
      invoice => binary() | null,
      id := binary()}.
%% balance_detail
-type balance_detail() :: #{available := [balance_amount()]}.
%% transfer_data
-type transfer_data() :: #{destination := binary() | account(), amount => integer()}.
%% balance_amount_by_source_type
-type balance_amount_by_source_type() ::
    #{fpx => integer(),
      card => integer(),
      bank_account => integer()}.
%% payment_method_afterpay_clearpay
-type payment_method_afterpay_clearpay() :: #{}.
%% source_order
-type source_order() ::
    #{shipping => shipping(),
      items => [source_order_item()] | null,
      email => binary(),
      currency := binary(),
      amount := integer()}.
%% payment_method_details_wechat_pay
-type payment_method_details_wechat_pay() ::
    #{transaction_id => binary() | null, fingerprint => binary() | null}.
%% payment_flows_private_payment_methods_alipay_details
-type payment_flows_private_payment_methods_alipay_details() ::
    #{transaction_id => binary() | null,
      fingerprint => binary() | null,
      buyer_id => binary()}.
%% fee
-type fee() ::
    #{type := binary(),
      description => binary() | null,
      currency := binary(),
      application => binary() | null,
      amount := integer()}.
%% issuing_dispute_other_evidence
-type issuing_dispute_other_evidence() ::
    #{product_type => merchandise | service | null,
      product_description => binary() | null,
      explanation => binary() | null,
      additional_documentation => binary() | file()}.
%% country_spec
%%
%% Stripe needs to collect certain pieces of information about each
%% account created. These requirements can differ depending on the
%% account's country. The Country Specs API makes these rules
%% available to your integration.
%%
%% You can also view the information from this API call as [an
%% online guide](/docs/connect/required-verification-information).
-type country_spec() ::
    #{verification_fields := country_spec_verification_fields(),
      supported_transfer_countries := [binary()],
      supported_payment_methods := [binary()],
      supported_payment_currencies := [binary()],
      supported_bank_account_currencies := json:value(),
      object := country_spec,
      id := binary(),
      default_currency := binary()}.
%% source_type_card
-type source_type_card() ::
    #{tokenization_method => binary() | null,
      three_d_secure => binary(),
      name => binary() | null,
      last4 => binary() | null,
      funding => binary() | null,
      fingerprint => binary(),
      exp_year => integer() | null,
      exp_month => integer() | null,
      dynamic_last4 => binary() | null,
      cvc_check => binary() | null,
      country => binary() | null,
      brand => binary() | null,
      address_zip_check => binary() | null,
      address_line1_check => binary() | null}.
%% shipping
-type shipping() ::
    #{tracking_number => binary() | null,
      phone => binary() | null,
      name => binary() | null,
      carrier => binary() | null,
      address => address()}.
%% payment_method_details_afterpay_clearpay
-type payment_method_details_afterpay_clearpay() :: #{reference => binary() | null}.
%% notification_event_data
-type notification_event_data() ::
    #{previous_attributes => json:value(), object := json:value()}.
%% person
%%
%% This is an object representing a person associated with a Stripe
%% account.
%%
%% A platform cannot access a Standard or Express account's persons
%% after the account starts onboarding, such as after generating an
%% account link for the account. See the [Standard
%% onboarding](https://stripe.com/docs/connect/standard-accounts) or
%% [Express onboarding
%% documentation](https://stripe.com/docs/connect/express-accounts)
%% for information about platform pre-filling and account onboarding
%% steps.
%%
%% Related guide: [Handling Identity Verification with the
%% API](https://stripe.com/docs/connect/identity-verification-api#person-information).
-type person() ::
    #{verification => legal_entity_person_verification(),
      ssn_last_4_provided => boolean(),
      requirements => person_requirements(),
      relationship => person_relationship(),
      political_exposure => existing | none,
      phone => binary() | null,
      object := person,
      nationality => binary() | null,
      metadata => json:value(),
      maiden_name => binary() | null,
      last_name_kanji => binary() | null,
      last_name_kana => binary() | null,
      last_name => binary() | null,
      id_number_provided => boolean(),
      id := binary(),
      gender => binary() | null,
      future_requirements => person_future_requirements(),
      full_name_aliases => [binary()],
      first_name_kanji => binary() | null,
      first_name_kana => binary() | null,
      first_name => binary() | null,
      email => binary() | null,
      dob => legal_entity_dob(),
      created := integer(),
      address_kanji => legal_entity_japan_address(),
      address_kana => legal_entity_japan_address(),
      address => address(),
      account := binary()}.
%% billing_portal.session
%%
%% The Billing customer portal is a Stripe-hosted UI for
%% subscription and billing management.
%%
%% A portal configuration describes the functionality and features
%% that you want to provide to your customers through the portal.
%%
%% A portal session describes the instantiation of the customer
%% portal for a particular customer. By visiting the session's URL,
%% the customer can manage their subscriptions and billing details.
%% For security reasons, sessions are short-lived and will expire if
%% the customer does not visit the URL. Create sessions on-demand
%% when customers intend to manage their subscriptions and billing
%% details.
%%
%% Learn more in the [integration
%% guide](https://stripe.com/docs/billing/subscriptions/integrating-customer-portal).
-type billing_portal_session() ::
    #{url := binary(),
      return_url := binary(),
      on_behalf_of => binary() | null,
      object := 'billing_portal.session',
      locale =>
          auto | bg | cs | da | de | el | en | 'en-AU' | 'en-CA' | 'en-GB' | 'en-IE' | 'en-IN' |
          'en-NZ' | 'en-SG' | es | 'es-419' | et | fi | fil | fr | 'fr-CA' | hr | hu | id | it |
          ja | ko | lt | lv | ms | mt | nb | nl | pl | pt | 'pt-BR' | ro | ru | sk | sl | sv | th |
          tr | vi | zh | 'zh-HK' | 'zh-TW' | null,
      livemode := boolean(),
      id := binary(),
      customer := binary(),
      created := integer(),
      configuration := binary() | billing_portal_configuration()}.
%% payment_method_details_card_installments_plan
-type payment_method_details_card_installments_plan() ::
    #{type := fixed_count,
      interval => month | null,
      count => integer() | null}.
%% mandate_au_becs_debit
-type mandate_au_becs_debit() :: #{url := binary()}.
%% payment_pages_checkout_session_consent
-type payment_pages_checkout_session_consent() ::
    #{promotions => opt_in | opt_out | null}.
%% setup_attempt_payment_method_details_bacs_debit
-type setup_attempt_payment_method_details_bacs_debit() :: #{}.
%% online_acceptance
-type online_acceptance() ::
    #{user_agent => binary() | null, ip_address => binary() | null}.
%% gelato_id_number_report
%%
%% Result from an id_number check
-type gelato_id_number_report() ::
    #{status := unverified | verified,
      last_name => binary() | null,
      id_number_type => br_cpf | sg_nric | us_ssn | null,
      id_number => binary() | null,
      first_name => binary() | null,
      error => gelato_id_number_report_error(),
      dob => gelato_data_id_number_report_date()}.
%% payment_method_options_ideal
-type payment_method_options_ideal() :: #{setup_future_usage => none | off_session}.
%% subscription_billing_thresholds
-type subscription_billing_thresholds() ::
    #{reset_billing_cycle_anchor => boolean() | null, amount_gte => integer() | null}.
%% payment_pages_checkout_session_shipping_address_collection
-type payment_pages_checkout_session_shipping_address_collection() ::
    #{allowed_countries :=
          ['AC' | 'AD' | 'AE' | 'AF' | 'AG' | 'AI' | 'AL' | 'AM' | 'AO' | 'AQ' | 'AR' | 'AT' |
           'AU' | 'AW' | 'AX' | 'AZ' | 'BA' | 'BB' | 'BD' | 'BE' | 'BF' | 'BG' | 'BH' | 'BI' |
           'BJ' | 'BL' | 'BM' | 'BN' | 'BO' | 'BQ' | 'BR' | 'BS' | 'BT' | 'BV' | 'BW' | 'BY' |
           'BZ' | 'CA' | 'CD' | 'CF' | 'CG' | 'CH' | 'CI' | 'CK' | 'CL' | 'CM' | 'CN' | 'CO' |
           'CR' | 'CV' | 'CW' | 'CY' | 'CZ' | 'DE' | 'DJ' | 'DK' | 'DM' | 'DO' | 'DZ' | 'EC' |
           'EE' | 'EG' | 'EH' | 'ER' | 'ES' | 'ET' | 'FI' | 'FJ' | 'FK' | 'FO' | 'FR' | 'GA' |
           'GB' | 'GD' | 'GE' | 'GF' | 'GG' | 'GH' | 'GI' | 'GL' | 'GM' | 'GN' | 'GP' | 'GQ' |
           'GR' | 'GS' | 'GT' | 'GU' | 'GW' | 'GY' | 'HK' | 'HN' | 'HR' | 'HT' | 'HU' | 'ID' |
           'IE' | 'IL' | 'IM' | 'IN' | 'IO' | 'IQ' | 'IS' | 'IT' | 'JE' | 'JM' | 'JO' | 'JP' |
           'KE' | 'KG' | 'KH' | 'KI' | 'KM' | 'KN' | 'KR' | 'KW' | 'KY' | 'KZ' | 'LA' | 'LB' |
           'LC' | 'LI' | 'LK' | 'LR' | 'LS' | 'LT' | 'LU' | 'LV' | 'LY' | 'MA' | 'MC' | 'MD' |
           'ME' | 'MF' | 'MG' | 'MK' | 'ML' | 'MM' | 'MN' | 'MO' | 'MQ' | 'MR' | 'MS' | 'MT' |
           'MU' | 'MV' | 'MW' | 'MX' | 'MY' | 'MZ' | 'NA' | 'NC' | 'NE' | 'NG' | 'NI' | 'NL' |
           'NO' | 'NP' | 'NR' | 'NU' | 'NZ' | 'OM' | 'PA' | 'PE' | 'PF' | 'PG' | 'PH' | 'PK' |
           'PL' | 'PM' | 'PN' | 'PR' | 'PS' | 'PT' | 'PY' | 'QA' | 'RE' | 'RO' | 'RS' | 'RU' |
           'RW' | 'SA' | 'SB' | 'SC' | 'SE' | 'SG' | 'SH' | 'SI' | 'SJ' | 'SK' | 'SL' | 'SM' |
           'SN' | 'SO' | 'SR' | 'SS' | 'ST' | 'SV' | 'SX' | 'SZ' | 'TA' | 'TC' | 'TD' | 'TF' |
           'TG' | 'TH' | 'TJ' | 'TK' | 'TL' | 'TM' | 'TN' | 'TO' | 'TR' | 'TT' | 'TV' | 'TW' |
           'TZ' | 'UA' | 'UG' | 'US' | 'UY' | 'UZ' | 'VA' | 'VC' | 'VE' | 'VG' | 'VN' | 'VU' |
           'WF' | 'WS' | 'XK' | 'YE' | 'YT' | 'ZA' | 'ZM' | 'ZW' | 'ZZ']}.
%% payment_method_options_oxxo
-type payment_method_options_oxxo() ::
    #{setup_future_usage => none, expires_after_days := integer()}.
%% portal_business_profile
-type portal_business_profile() ::
    #{terms_of_service_url := binary(),
      privacy_policy_url := binary(),
      headline => binary() | null}.
%% payment_method_details_multibanco
-type payment_method_details_multibanco() ::
    #{reference => binary() | null, entity => binary() | null}.
%% subscription_item_billing_thresholds
-type subscription_item_billing_thresholds() :: #{usage_gte => integer() | null}.
%% payment_method_options_klarna
-type payment_method_options_klarna() ::
    #{setup_future_usage => none, preferred_locale => binary() | null}.
%% source_type_giropay
-type source_type_giropay() ::
    #{statement_descriptor => binary() | null,
      bic => binary() | null,
      bank_name => binary() | null,
      bank_code => binary() | null}.
%% gelato_session_document_options
-type gelato_session_document_options() ::
    #{require_matching_selfie => boolean(),
      require_live_capture => boolean(),
      require_id_number => boolean(),
      allowed_types => [driving_license | id_card | passport]}.
%% plan
%%
%% You can now model subscriptions more flexibly using the [Prices
%% API](https://stripe.com/docs/api#prices). It replaces the Plans
%% API and is backwards compatible to simplify your migration.
%%
%% Plans define the base price, currency, and billing cycle for
%% recurring purchases of products.
%% [Products](https://stripe.com/docs/api#products) help you track
%% inventory or provisioning, and plans help you track pricing.
%% Different physical goods or levels of service should be
%% represented by products, and pricing options should be
%% represented by plans. This approach lets you change prices
%% without having to change your provisioning scheme.
%%
%% For example, you might have a single "gold" product that has
%% plans for $10/month, $100/year, â¬9/month, and â¬90/year.
%%
%% Related guides: [Set up a
%% subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription)
%% and more about [products and
%% prices](https://stripe.com/docs/products-prices/overview).
-type plan() ::
    #{usage_type := licensed | metered,
      trial_period_days => integer() | null,
      transform_usage => transform_usage(),
      tiers_mode => graduated | volume | null,
      tiers => [plan_tier()],
      product => binary() | product() | deleted_product(),
      object := plan,
      nickname => binary() | null,
      metadata => json:value() | null,
      livemode := boolean(),
      interval_count := integer(),
      interval := day | month | week | year,
      id := binary(),
      currency := binary(),
      created := integer(),
      billing_scheme := per_unit | tiered,
      amount_decimal => binary() | null,
      amount => integer() | null,
      aggregate_usage => last_during_period | last_ever | max | sum | null,
      active := boolean()}.
